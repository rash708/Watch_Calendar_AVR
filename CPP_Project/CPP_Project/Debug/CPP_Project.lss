
CPP_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  000017a6  0000183a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800148  00800148  00001922  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011fa  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000708  00000000  00000000  00002c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3b  00000000  00000000  0000338a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  00004100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000991  00000000  00000000  00004728  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000050b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	16 c0       	rjmp	.+44     	; 0x2e <__ctors_end>
       2:	30 c0       	rjmp	.+96     	; 0x64 <__bad_interrupt>
       4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
       6:	2e c0       	rjmp	.+92     	; 0x64 <__bad_interrupt>
       8:	d1 c1       	rjmp	.+930    	; 0x3ac <__vector_4>
       a:	2c c0       	rjmp	.+88     	; 0x64 <__bad_interrupt>
       c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
       e:	2a c0       	rjmp	.+84     	; 0x64 <__bad_interrupt>
      10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
      12:	29 c0       	rjmp	.+82     	; 0x66 <__vector_9>
      14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
      16:	26 c0       	rjmp	.+76     	; 0x64 <__bad_interrupt>
      18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
      1a:	24 c0       	rjmp	.+72     	; 0x64 <__bad_interrupt>
      1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
      1e:	22 c0       	rjmp	.+68     	; 0x64 <__bad_interrupt>
      20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>

00000022 <__trampolines_end>:
      22:	63 64       	ori	r22, 0x43	; 67
      24:	69 6e       	ori	r22, 0xE9	; 233
      26:	6f 70       	andi	r22, 0x0F	; 15
      28:	73 75       	andi	r23, 0x53	; 83
      2a:	78 58       	subi	r23, 0x88	; 136
      2c:	5b 00       	.word	0x005b	; ????

0000002e <__ctors_end>:
      2e:	11 24       	eor	r1, r1
      30:	1f be       	out	0x3f, r1	; 63
      32:	cf e5       	ldi	r28, 0x5F	; 95
      34:	d2 e0       	ldi	r29, 0x02	; 2
      36:	de bf       	out	0x3e, r29	; 62
      38:	cd bf       	out	0x3d, r28	; 61

0000003a <__do_copy_data>:
      3a:	11 e0       	ldi	r17, 0x01	; 1
      3c:	a0 e6       	ldi	r26, 0x60	; 96
      3e:	b0 e0       	ldi	r27, 0x00	; 0
      40:	e6 ea       	ldi	r30, 0xA6	; 166
      42:	f7 e1       	ldi	r31, 0x17	; 23
      44:	02 c0       	rjmp	.+4      	; 0x4a <__SREG__+0xb>
      46:	05 90       	lpm	r0, Z+
      48:	0d 92       	st	X+, r0
      4a:	a8 34       	cpi	r26, 0x48	; 72
      4c:	b1 07       	cpc	r27, r17
      4e:	d9 f7       	brne	.-10     	; 0x46 <__SREG__+0x7>

00000050 <__do_clear_bss>:
      50:	21 e0       	ldi	r18, 0x01	; 1
      52:	a8 e4       	ldi	r26, 0x48	; 72
      54:	b1 e0       	ldi	r27, 0x01	; 1
      56:	01 c0       	rjmp	.+2      	; 0x5a <.do_clear_bss_start>

00000058 <.do_clear_bss_loop>:
      58:	1d 92       	st	X+, r1

0000005a <.do_clear_bss_start>:
      5a:	a7 38       	cpi	r26, 0x87	; 135
      5c:	b2 07       	cpc	r27, r18
      5e:	e1 f7       	brne	.-8      	; 0x58 <.do_clear_bss_loop>
      60:	78 d2       	rcall	.+1264   	; 0x552 <main>
      62:	9f cb       	rjmp	.-2242   	; 0xfffff7a2 <__eeprom_end+0xff7ef7a2>

00000064 <__bad_interrupt>:
      64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <__vector_9>:
}

//-----------------------------------------------------------------------------------------
//Блок прерываний
ISR(USART_RX_vect)
{
      66:	1f 92       	push	r1
      68:	0f 92       	push	r0
      6a:	0f b6       	in	r0, 0x3f	; 63
      6c:	0f 92       	push	r0
      6e:	11 24       	eor	r1, r1
      70:	0f 93       	push	r16
      72:	1f 93       	push	r17
      74:	2f 93       	push	r18
      76:	3f 93       	push	r19
      78:	4f 93       	push	r20
      7a:	5f 93       	push	r21
      7c:	6f 93       	push	r22
      7e:	7f 93       	push	r23
      80:	8f 93       	push	r24
      82:	9f 93       	push	r25
      84:	af 93       	push	r26
      86:	bf 93       	push	r27
      88:	ef 93       	push	r30
      8a:	ff 93       	push	r31
      8c:	cf 93       	push	r28
      8e:	df 93       	push	r29
      90:	cd b7       	in	r28, 0x3d	; 61
      92:	de b7       	in	r29, 0x3e	; 62
      94:	a0 97       	sbiw	r28, 0x20	; 32
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61
	rData = UDR;
      9a:	8c b1       	in	r24, 0x0c	; 12
      9c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <rData>
	char temp[20] = {'\0'};
      a0:	fe 01       	movw	r30, r28
      a2:	31 96       	adiw	r30, 0x01	; 1
      a4:	94 e1       	ldi	r25, 0x14	; 20
      a6:	df 01       	movw	r26, r30
      a8:	1d 92       	st	X+, r1
      aa:	9a 95       	dec	r25
      ac:	e9 f7       	brne	.-6      	; 0xa8 <__vector_9+0x42>
	int t_h, t_min, t_sec, t_date, t_month, t_year;
	//unsigned char flag;

	if (rData == '\r')
      ae:	8d 30       	cpi	r24, 0x0D	; 13
      b0:	09 f0       	breq	.+2      	; 0xb4 <__vector_9+0x4e>
      b2:	53 c1       	rjmp	.+678    	; 0x35a <__stack+0xfb>
	{

		msg[count_char] = '\0';
      b4:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <count_char>
      b8:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <count_char+0x1>
      bc:	e4 5b       	subi	r30, 0xB4	; 180
      be:	fe 4f       	sbci	r31, 0xFE	; 254
      c0:	10 82       	st	Z, r1

		if (set_date == 1) //Если мы устанавливаем дату
      c2:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <set_date>
      c6:	81 30       	cpi	r24, 0x01	; 1
      c8:	09 f0       	breq	.+2      	; 0xcc <__vector_9+0x66>
      ca:	7f c0       	rjmp	.+254    	; 0x1ca <__vector_9+0x164>
		{
			sscanf(msg, "%d-%d-%d", &t_date, &t_month, &t_year);
      cc:	ce 01       	movw	r24, r28
      ce:	4f 96       	adiw	r24, 0x1f	; 31
      d0:	9f 93       	push	r25
      d2:	8f 93       	push	r24
      d4:	02 97       	sbiw	r24, 0x02	; 2
      d6:	9f 93       	push	r25
      d8:	8f 93       	push	r24
      da:	02 97       	sbiw	r24, 0x02	; 2
      dc:	9f 93       	push	r25
      de:	8f 93       	push	r24
      e0:	8a e6       	ldi	r24, 0x6A	; 106
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	9f 93       	push	r25
      e6:	8f 93       	push	r24
      e8:	8c e4       	ldi	r24, 0x4C	; 76
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	9f 93       	push	r25
      ee:	8f 93       	push	r24
      f0:	8e d5       	rcall	.+2844   	; 0xc0e <sscanf>

			if ((t_date < 1) || (t_date > 31) || (t_month < 1) || (t_month > 12) || (t_year < 0))
      f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
      f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
      f6:	9c 01       	movw	r18, r24
      f8:	21 50       	subi	r18, 0x01	; 1
      fa:	31 09       	sbc	r19, r1
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	f8 94       	cli
     100:	de bf       	out	0x3e, r29	; 62
     102:	0f be       	out	0x3f, r0	; 63
     104:	cd bf       	out	0x3d, r28	; 61
     106:	2f 31       	cpi	r18, 0x1F	; 31
     108:	31 05       	cpc	r19, r1
     10a:	60 f4       	brcc	.+24     	; 0x124 <__vector_9+0xbe>
     10c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     10e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     110:	a9 01       	movw	r20, r18
     112:	41 50       	subi	r20, 0x01	; 1
     114:	51 09       	sbc	r21, r1
     116:	4c 30       	cpi	r20, 0x0C	; 12
     118:	51 05       	cpc	r21, r1
     11a:	20 f4       	brcc	.+8      	; 0x124 <__vector_9+0xbe>
     11c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     11e:	f8 a1       	ldd	r31, Y+32	; 0x20
     120:	ff 23       	and	r31, r31
     122:	24 f4       	brge	.+8      	; 0x12c <__vector_9+0xc6>
			{
				UART_send_string_ln("Wrong value");
     124:	83 e7       	ldi	r24, 0x73	; 115
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	24 d5       	rcall	.+2632   	; 0xb72 <_Z19UART_send_string_lnPKc>
     12a:	12 c1       	rjmp	.+548    	; 0x350 <__stack+0xf1>
			}
			else if (t_date == 31)
     12c:	8f 31       	cpi	r24, 0x1F	; 31
     12e:	91 05       	cpc	r25, r1
     130:	81 f4       	brne	.+32     	; 0x152 <__vector_9+0xec>
			{
				if ((t_month == 2) || (t_month == 4) || (t_month == 6) || (t_month == 9) || (t_month == 11))
     132:	c9 01       	movw	r24, r18
     134:	8b 7f       	andi	r24, 0xFB	; 251
     136:	02 97       	sbiw	r24, 0x02	; 2
     138:	41 f0       	breq	.+16     	; 0x14a <__vector_9+0xe4>
     13a:	24 30       	cpi	r18, 0x04	; 4
     13c:	31 05       	cpc	r19, r1
     13e:	29 f0       	breq	.+10     	; 0x14a <__vector_9+0xe4>
     140:	2d 7f       	andi	r18, 0xFD	; 253
     142:	29 30       	cpi	r18, 0x09	; 9
     144:	31 05       	cpc	r19, r1
     146:	09 f0       	breq	.+2      	; 0x14a <__vector_9+0xe4>
     148:	03 c1       	rjmp	.+518    	; 0x350 <__stack+0xf1>
				{
					UART_send_string_ln("Wrong value of date for month");
     14a:	8f e7       	ldi	r24, 0x7F	; 127
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	11 d5       	rcall	.+2594   	; 0xb72 <_Z19UART_send_string_lnPKc>
     150:	ff c0       	rjmp	.+510    	; 0x350 <__stack+0xf1>
				}
			}
			else if (t_date == 30)
     152:	8e 31       	cpi	r24, 0x1E	; 30
     154:	91 05       	cpc	r25, r1
     156:	41 f4       	brne	.+16     	; 0x168 <__vector_9+0x102>
			{
				if (t_month == 2)
     158:	22 30       	cpi	r18, 0x02	; 2
     15a:	31 05       	cpc	r19, r1
     15c:	09 f0       	breq	.+2      	; 0x160 <__vector_9+0xfa>
     15e:	f8 c0       	rjmp	.+496    	; 0x350 <__stack+0xf1>
				{
					UART_send_string_ln("Wrong value of date for month");
     160:	8f e7       	ldi	r24, 0x7F	; 127
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	06 d5       	rcall	.+2572   	; 0xb72 <_Z19UART_send_string_lnPKc>
     166:	f4 c0       	rjmp	.+488    	; 0x350 <__stack+0xf1>
				}
			}
			else if (t_date == 29)
     168:	8d 31       	cpi	r24, 0x1D	; 29
     16a:	91 05       	cpc	r25, r1
     16c:	19 f5       	brne	.+70     	; 0x1b4 <__vector_9+0x14e>
			{
				if ((t_month == 2) && (not_leap(t_year)))
     16e:	22 30       	cpi	r18, 0x02	; 2
     170:	31 05       	cpc	r19, r1
     172:	a1 f4       	brne	.+40     	; 0x19c <__vector_9+0x136>
	TIFR = 0x01; //clear flag
}

static char not_leap(unsigned short year) //проверка вискосного года
{
	if (!(year % 100))
     174:	cf 01       	movw	r24, r30
     176:	64 e6       	ldi	r22, 0x64	; 100
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	01 d5       	rcall	.+2562   	; 0xb7e <__udivmodhi4>
     17c:	89 2b       	or	r24, r25
     17e:	31 f4       	brne	.+12     	; 0x18c <__vector_9+0x126>
	{
		return (char)(year % 400);
     180:	8e 2f       	mov	r24, r30
     182:	9f 2f       	mov	r25, r31
     184:	60 e9       	ldi	r22, 0x90	; 144
     186:	71 e0       	ldi	r23, 0x01	; 1
     188:	fa d4       	rcall	.+2548   	; 0xb7e <__udivmodhi4>
     18a:	02 c0       	rjmp	.+4      	; 0x190 <__vector_9+0x12a>
	}
	else
	{
		return (char)(year % 4);
     18c:	8e 2f       	mov	r24, r30
     18e:	83 70       	andi	r24, 0x03	; 3
					UART_send_string_ln("Wrong value of date for month");
				}
			}
			else if (t_date == 29)
			{
				if ((t_month == 2) && (not_leap(t_year)))
     190:	88 23       	and	r24, r24
     192:	21 f0       	breq	.+8      	; 0x19c <__vector_9+0x136>
				{
					UART_send_string_ln("Wrong value of date for month");
     194:	8f e7       	ldi	r24, 0x7F	; 127
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	ec d4       	rcall	.+2520   	; 0xb72 <_Z19UART_send_string_lnPKc>
     19a:	da c0       	rjmp	.+436    	; 0x350 <__stack+0xf1>
				}
				else
				{
					date = t_date;
     19c:	8d e1       	ldi	r24, 0x1D	; 29
     19e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
					month = t_month;
     1a2:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <month>
					year = t_year;
     1a6:	f0 93 80 01 	sts	0x0180, r31	; 0x800180 <year+0x1>
     1aa:	e0 93 7f 01 	sts	0x017F, r30	; 0x80017f <year>
					set_date = 0;
     1ae:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <set_date>
     1b2:	ce c0       	rjmp	.+412    	; 0x350 <__stack+0xf1>
				}
			}
			else
			{
				date = t_date;
     1b4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
				month = t_month;
     1b8:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <month>
				year = t_year;
     1bc:	f0 93 80 01 	sts	0x0180, r31	; 0x800180 <year+0x1>
     1c0:	e0 93 7f 01 	sts	0x017F, r30	; 0x80017f <year>
				set_date = 0;
     1c4:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <set_date>
     1c8:	c3 c0       	rjmp	.+390    	; 0x350 <__stack+0xf1>
			}

			//UART_send_string_ln((const char*)t_h);
		}
		else if (set_time == 1) //Если мы устанавливаем время
     1ca:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	b9 f5       	brne	.+110    	; 0x240 <__vector_9+0x1da>
		{
			sscanf(msg, "%d-%d-%d", &t_h, &t_min, &t_sec);
     1d2:	ce 01       	movw	r24, r28
     1d4:	49 96       	adiw	r24, 0x19	; 25
     1d6:	9f 93       	push	r25
     1d8:	8f 93       	push	r24
     1da:	02 97       	sbiw	r24, 0x02	; 2
     1dc:	9f 93       	push	r25
     1de:	8f 93       	push	r24
     1e0:	02 97       	sbiw	r24, 0x02	; 2
     1e2:	9f 93       	push	r25
     1e4:	8f 93       	push	r24
     1e6:	8a e6       	ldi	r24, 0x6A	; 106
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	9f 93       	push	r25
     1ec:	8f 93       	push	r24
     1ee:	8c e4       	ldi	r24, 0x4C	; 76
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	9f 93       	push	r25
     1f4:	8f 93       	push	r24
     1f6:	0b d5       	rcall	.+2582   	; 0xc0e <sscanf>

			if ((t_h < 24) && (t_min < 60) && (t_sec < 60))
     1f8:	8d 89       	ldd	r24, Y+21	; 0x15
     1fa:	9e 89       	ldd	r25, Y+22	; 0x16
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
     206:	88 31       	cpi	r24, 0x18	; 24
     208:	91 05       	cpc	r25, r1
     20a:	9c f4       	brge	.+38     	; 0x232 <__vector_9+0x1cc>
     20c:	2f 89       	ldd	r18, Y+23	; 0x17
     20e:	38 8d       	ldd	r19, Y+24	; 0x18
     210:	2c 33       	cpi	r18, 0x3C	; 60
     212:	31 05       	cpc	r19, r1
     214:	74 f4       	brge	.+28     	; 0x232 <__vector_9+0x1cc>
     216:	49 8d       	ldd	r20, Y+25	; 0x19
     218:	5a 8d       	ldd	r21, Y+26	; 0x1a
     21a:	4c 33       	cpi	r20, 0x3C	; 60
     21c:	51 05       	cpc	r21, r1
     21e:	4c f4       	brge	.+18     	; 0x232 <__vector_9+0x1cc>
			{
				hour = t_h;
     220:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <hour>
				minute = t_min;
     224:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <minute>
				second = t_sec;
     228:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <second>
				set_time = 0;
     22c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
     230:	8f c0       	rjmp	.+286    	; 0x350 <__stack+0xf1>
			}
			else
			{
				UART_send_string_ln("Wrong value");
     232:	83 e7       	ldi	r24, 0x73	; 115
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	9d d4       	rcall	.+2362   	; 0xb72 <_Z19UART_send_string_lnPKc>
				UART_send_string("Print time (format 23-59-59): ");
     238:	8d e9       	ldi	r24, 0x9D	; 157
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	8c d4       	rcall	.+2328   	; 0xb56 <_Z16UART_send_stringPKc>
     23e:	88 c0       	rjmp	.+272    	; 0x350 <__stack+0xf1>

			//UART_send_string_ln((const char*)t_h);
		}
		else //Все остальные события
		{
			if (strcmp(msg, "help") == 0)
     240:	6c eb       	ldi	r22, 0xBC	; 188
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	8c e4       	ldi	r24, 0x4C	; 76
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	ba d4       	rcall	.+2420   	; 0xbbe <strcmp>
     24a:	89 2b       	or	r24, r25
     24c:	81 f4       	brne	.+32     	; 0x26e <__stack+0xf>
			{
				UART_send_string_ln("Command list:");
     24e:	81 ec       	ldi	r24, 0xC1	; 193
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	8f d4       	rcall	.+2334   	; 0xb72 <_Z19UART_send_string_lnPKc>
				UART_send_string_ln("print-date");
     254:	8f ec       	ldi	r24, 0xCF	; 207
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	8c d4       	rcall	.+2328   	; 0xb72 <_Z19UART_send_string_lnPKc>
				UART_send_string_ln("print-time");
     25a:	8a ed       	ldi	r24, 0xDA	; 218
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	89 d4       	rcall	.+2322   	; 0xb72 <_Z19UART_send_string_lnPKc>
				UART_send_string_ln("set-date");
     260:	85 ee       	ldi	r24, 0xE5	; 229
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	86 d4       	rcall	.+2316   	; 0xb72 <_Z19UART_send_string_lnPKc>
				UART_send_string_ln("set-time");
     266:	8e ee       	ldi	r24, 0xEE	; 238
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	83 d4       	rcall	.+2310   	; 0xb72 <_Z19UART_send_string_lnPKc>
     26c:	71 c0       	rjmp	.+226    	; 0x350 <__stack+0xf1>
			}
			else if (strcmp(msg, "print-date") == 0)
     26e:	6f ec       	ldi	r22, 0xCF	; 207
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	8c e4       	ldi	r24, 0x4C	; 76
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	a3 d4       	rcall	.+2374   	; 0xbbe <strcmp>
     278:	89 2b       	or	r24, r25
     27a:	19 f5       	brne	.+70     	; 0x2c2 <__stack+0x63>
			{
				UART_send_string_ln("date:");
     27c:	87 ef       	ldi	r24, 0xF7	; 247
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	78 d4       	rcall	.+2288   	; 0xb72 <_Z19UART_send_string_lnPKc>
				sprintf(temp, "%d-%d-%d", (int)date, (int)month, (int)year);
     282:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <year+0x1>
     286:	8f 93       	push	r24
     288:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <year>
     28c:	8f 93       	push	r24
     28e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     292:	1f 92       	push	r1
     294:	8f 93       	push	r24
     296:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <date>
     29a:	1f 92       	push	r1
     29c:	8f 93       	push	r24
     29e:	8a e6       	ldi	r24, 0x6A	; 106
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	9f 93       	push	r25
     2a4:	8f 93       	push	r24
     2a6:	8e 01       	movw	r16, r28
     2a8:	0f 5f       	subi	r16, 0xFF	; 255
     2aa:	1f 4f       	sbci	r17, 0xFF	; 255
     2ac:	1f 93       	push	r17
     2ae:	0f 93       	push	r16
     2b0:	8f d4       	rcall	.+2334   	; 0xbd0 <sprintf>
				UART_send_string_ln(temp);
     2b2:	c8 01       	movw	r24, r16
     2b4:	5e d4       	rcall	.+2236   	; 0xb72 <_Z19UART_send_string_lnPKc>
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	47 c0       	rjmp	.+142    	; 0x350 <__stack+0xf1>
			}
			else if (strcmp(msg, "print-time") == 0)
     2c2:	6a ed       	ldi	r22, 0xDA	; 218
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	8c e4       	ldi	r24, 0x4C	; 76
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	79 d4       	rcall	.+2290   	; 0xbbe <strcmp>
     2cc:	89 2b       	or	r24, r25
     2ce:	09 f5       	brne	.+66     	; 0x312 <__stack+0xb3>
			{
				UART_send_string("time: ");
     2d0:	8d ef       	ldi	r24, 0xFD	; 253
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	40 d4       	rcall	.+2176   	; 0xb56 <_Z16UART_send_stringPKc>
				sprintf(temp, "%d-%d-%d", (int)hour, (int)minute, (int)second);
     2d6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <second>
     2da:	1f 92       	push	r1
     2dc:	8f 93       	push	r24
     2de:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <minute>
     2e2:	1f 92       	push	r1
     2e4:	8f 93       	push	r24
     2e6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <hour>
     2ea:	1f 92       	push	r1
     2ec:	8f 93       	push	r24
     2ee:	8a e6       	ldi	r24, 0x6A	; 106
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	9f 93       	push	r25
     2f4:	8f 93       	push	r24
     2f6:	8e 01       	movw	r16, r28
     2f8:	0f 5f       	subi	r16, 0xFF	; 255
     2fa:	1f 4f       	sbci	r17, 0xFF	; 255
     2fc:	1f 93       	push	r17
     2fe:	0f 93       	push	r16
     300:	67 d4       	rcall	.+2254   	; 0xbd0 <sprintf>
				UART_send_string_ln(temp);
     302:	c8 01       	movw	r24, r16
     304:	36 d4       	rcall	.+2156   	; 0xb72 <_Z19UART_send_string_lnPKc>
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	1f c0       	rjmp	.+62     	; 0x350 <__stack+0xf1>
			}
			else if (strcmp(msg, "set-date") == 0)
     312:	65 ee       	ldi	r22, 0xE5	; 229
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	8c e4       	ldi	r24, 0x4C	; 76
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	51 d4       	rcall	.+2210   	; 0xbbe <strcmp>
     31c:	89 2b       	or	r24, r25
     31e:	39 f4       	brne	.+14     	; 0x32e <__stack+0xcf>
			{
				UART_send_string("Print date (format 10-12-2019): ");
     320:	84 e0       	ldi	r24, 0x04	; 4
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	18 d4       	rcall	.+2096   	; 0xb56 <_Z16UART_send_stringPKc>
				set_date = 1;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <set_date>
     32c:	11 c0       	rjmp	.+34     	; 0x350 <__stack+0xf1>
			}
			else if (strcmp(msg, "set-time") == 0)
     32e:	6e ee       	ldi	r22, 0xEE	; 238
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	8c e4       	ldi	r24, 0x4C	; 76
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	43 d4       	rcall	.+2182   	; 0xbbe <strcmp>
     338:	89 2b       	or	r24, r25
     33a:	39 f4       	brne	.+14     	; 0x34a <__stack+0xeb>
			{
				UART_send_string("Print time (format 23-59-59): ");
     33c:	8d e9       	ldi	r24, 0x9D	; 157
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0a d4       	rcall	.+2068   	; 0xb56 <_Z16UART_send_stringPKc>
				set_time = 1;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
     348:	03 c0       	rjmp	.+6      	; 0x350 <__stack+0xf1>
			}
			else
			{
				UART_send_string_ln("Print 'help' for more information");
     34a:	85 e2       	ldi	r24, 0x25	; 37
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	11 d4       	rcall	.+2082   	; 0xb72 <_Z19UART_send_string_lnPKc>
			}
		}

		count_char = 0;
     350:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <count_char+0x1>
     354:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <count_char>
     358:	0e c0       	rjmp	.+28     	; 0x376 <__stack+0x117>
	}
	else
	{
		msg[count_char] = rData;
     35a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <count_char>
     35e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <count_char+0x1>
     362:	f9 01       	movw	r30, r18
     364:	e4 5b       	subi	r30, 0xB4	; 180
     366:	fe 4f       	sbci	r31, 0xFE	; 254
     368:	80 83       	st	Z, r24
		count_char++;
     36a:	2f 5f       	subi	r18, 0xFF	; 255
     36c:	3f 4f       	sbci	r19, 0xFF	; 255
     36e:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <count_char+0x1>
     372:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <count_char>
	}
}
     376:	a0 96       	adiw	r28, 0x20	; 32
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	ff 91       	pop	r31
     388:	ef 91       	pop	r30
     38a:	bf 91       	pop	r27
     38c:	af 91       	pop	r26
     38e:	9f 91       	pop	r25
     390:	8f 91       	pop	r24
     392:	7f 91       	pop	r23
     394:	6f 91       	pop	r22
     396:	5f 91       	pop	r21
     398:	4f 91       	pop	r20
     39a:	3f 91       	pop	r19
     39c:	2f 91       	pop	r18
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	0f 90       	pop	r0
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	0f 90       	pop	r0
     3a8:	1f 90       	pop	r1
     3aa:	18 95       	reti

000003ac <__vector_4>:
// {
// 	disp_flag = !(disp_flag);
// }

ISR(TIMER1_COMPA_vect) //внешнее прерывание по таймеру t1 (каждую секунду) и обработка времени
{
     3ac:	1f 92       	push	r1
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	0f 92       	push	r0
     3b4:	11 24       	eor	r1, r1
     3b6:	2f 93       	push	r18
     3b8:	3f 93       	push	r19
     3ba:	4f 93       	push	r20
     3bc:	5f 93       	push	r21
     3be:	6f 93       	push	r22
     3c0:	7f 93       	push	r23
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
     3c6:	af 93       	push	r26
     3c8:	bf 93       	push	r27
	if (++second == 60)
     3ca:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <second>
     3ce:	8f 5f       	subi	r24, 0xFF	; 255
     3d0:	8c 33       	cpi	r24, 0x3C	; 60
     3d2:	19 f0       	breq	.+6      	; 0x3da <__vector_4+0x2e>
     3d4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <second>
     3d8:	82 c0       	rjmp	.+260    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
	{
		second = 0;
     3da:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <second>
		if (++minute == 60)
     3de:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <minute>
     3e2:	8f 5f       	subi	r24, 0xFF	; 255
     3e4:	8c 33       	cpi	r24, 0x3C	; 60
     3e6:	19 f0       	breq	.+6      	; 0x3ee <__vector_4+0x42>
     3e8:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <minute>
     3ec:	78 c0       	rjmp	.+240    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
		{
			minute = 0;
     3ee:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <minute>
			if (++hour == 24)
     3f2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <hour>
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	88 31       	cpi	r24, 0x18	; 24
     3fa:	19 f0       	breq	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fc:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <hour>
     400:	6e c0       	rjmp	.+220    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			{
				hour = 0;
     402:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <hour>
				if (++date == 32)
     406:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <date>
     40a:	8f 5f       	subi	r24, 0xFF	; 255
     40c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     410:	80 32       	cpi	r24, 0x20	; 32
     412:	49 f4       	brne	.+18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
				{
					month++;
     414:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     418:	8f 5f       	subi	r24, 0xFF	; 255
     41a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
					date = 1;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     424:	4c c0       	rjmp	.+152    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				}
				else if (date == 31)
     426:	8f 31       	cpi	r24, 0x1F	; 31
     428:	81 f4       	brne	.+32     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				{
					if ((month == 4) || (month == 6) || (month == 9) || (month == 11))
     42a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     42e:	98 2f       	mov	r25, r24
     430:	9d 7f       	andi	r25, 0xFD	; 253
     432:	94 30       	cpi	r25, 0x04	; 4
     434:	19 f0       	breq	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	99 30       	cpi	r25, 0x09	; 9
     438:	09 f0       	breq	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43a:	41 c0       	rjmp	.+130    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
					{
						month++;
     43c:	8f 5f       	subi	r24, 0xFF	; 255
     43e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
						date = 1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     448:	3a c0       	rjmp	.+116    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
					}
				}
				else if (date == 30)
     44a:	8e 31       	cpi	r24, 0x1E	; 30
     44c:	59 f4       	brne	.+22     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				{
					if (month == 2)
     44e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	a1 f5       	brne	.+104    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
					{
						month++;
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
						date = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     462:	3d c0       	rjmp	.+122    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					}
				}
				else if (date == 29)
     464:	8d 31       	cpi	r24, 0x1D	; 29
     466:	59 f5       	brne	.+86     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				{
					if ((month == 2) && (not_leap(year)))
     468:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     46c:	82 30       	cpi	r24, 0x02	; 2
     46e:	39 f5       	brne	.+78     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     470:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <year>
     474:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <year+0x1>
	TIFR = 0x01; //clear flag
}

static char not_leap(unsigned short year) //проверка вискосного года
{
	if (!(year % 100))
     478:	9a 01       	movw	r18, r20
     47a:	36 95       	lsr	r19
     47c:	27 95       	ror	r18
     47e:	36 95       	lsr	r19
     480:	27 95       	ror	r18
     482:	ab e7       	ldi	r26, 0x7B	; 123
     484:	b4 e1       	ldi	r27, 0x14	; 20
     486:	8f d3       	rcall	.+1822   	; 0xba6 <__umulhisi3>
     488:	96 95       	lsr	r25
     48a:	87 95       	ror	r24
     48c:	64 e6       	ldi	r22, 0x64	; 100
     48e:	68 9f       	mul	r22, r24
     490:	90 01       	movw	r18, r0
     492:	69 9f       	mul	r22, r25
     494:	30 0d       	add	r19, r0
     496:	11 24       	eor	r1, r1
     498:	42 17       	cp	r20, r18
     49a:	53 07       	cpc	r21, r19
     49c:	31 f4       	brne	.+12     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
	{
		return (char)(year % 400);
     49e:	ca 01       	movw	r24, r20
     4a0:	60 e9       	ldi	r22, 0x90	; 144
     4a2:	71 e0       	ldi	r23, 0x01	; 1
     4a4:	6c d3       	rcall	.+1752   	; 0xb7e <__udivmodhi4>
     4a6:	48 2f       	mov	r20, r24
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	}
	else
	{
		return (char)(year % 4);
     4aa:	43 70       	andi	r20, 0x03	; 3
						date = 1;
					}
				}
				else if (date == 29)
				{
					if ((month == 2) && (not_leap(year)))
     4ac:	44 23       	and	r20, r20
     4ae:	b9 f0       	breq	.+46     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					{
						month++;
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
						date = 1;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     4bc:	10 c0       	rjmp	.+32     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					}
				}
				if (month == 13)
     4be:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     4c2:	8d 30       	cpi	r24, 0x0D	; 13
     4c4:	61 f4       	brne	.+24     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
				{
					month = 1;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
					year++;
     4cc:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <year>
     4d0:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <year+0x1>
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <year+0x1>
     4da:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <year>
				}
			}
		}
	}
}
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <_Z10timer1_iniv>:

//-----------------------------------------------------------------------------------------
//Блок настройки
void timer1_ini(void) // Настройка Timer1
{
	TCCR1B |= (1 << WGM12); // устанавливаем режим СТС (сброс по совпадению)
     4fc:	8e b5       	in	r24, 0x2e	; 46
     4fe:	88 60       	ori	r24, 0x08	; 8
     500:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     502:	89 b7       	in	r24, 0x39	; 57
     504:	80 64       	ori	r24, 0x40	; 64
     506:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b01111010;	//записываем в регистр число для сравнения
     508:	8a e7       	ldi	r24, 0x7A	; 122
     50a:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00010010;
     50c:	82 e1       	ldi	r24, 0x12	; 18
     50e:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << CS12); //установим делитель 256.
     510:	8e b5       	in	r24, 0x2e	; 46
     512:	84 60       	ori	r24, 0x04	; 4
     514:	8e bd       	out	0x2e, r24	; 46
     516:	08 95       	ret

00000518 <_Z8port_iniv>:
	GICR = (1 << INT1) | (1 << INT0);
}*/

void port_ini() //Настройка портов ввода/вывода
{
	DDRA = 0xff;  // PORTA as OUTPUT
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; // All pins of PORTA LOW
     51c:	1b ba       	out	0x1b, r1	; 27

	DDRC = 0xff;  // PORTC as OUTPUT
     51e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00; // All pins of PORTC LOW
     520:	15 ba       	out	0x15, r1	; 21

	DDRD = 0x00;  // PORTD as INPUT
     522:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xff; // All pins of PORTD HIGH
     524:	82 bb       	out	0x12, r24	; 18
     526:	08 95       	ret

00000528 <_Z7var_iniv>:
}

void var_ini() //Инициализация переменных
{
	second = 0;
     528:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <second>
	minute = 0;
     52c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <minute>
	hour = 0;
     530:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <hour>
	date = 1;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
	month = 11;
     53a:	8b e0       	ldi	r24, 0x0B	; 11
     53c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
	year = 2019;
     540:	83 ee       	ldi	r24, 0xE3	; 227
     542:	97 e0       	ldi	r25, 0x07	; 7
     544:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <year+0x1>
     548:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <year>
	disp_flag = 0;
     54c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <disp_flag>
     550:	08 95       	ret

00000552 <main>:
}
//-----------------------------------------------------------------------------------------

int main(void)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <main+0x6>
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
	timer1_ini();
     55c:	cf df       	rcall	.-98     	; 0x4fc <_Z10timer1_iniv>
	//int_ini();
	port_ini();
     55e:	dc df       	rcall	.-72     	; 0x518 <_Z8port_iniv>
	var_ini();
     560:	e3 df       	rcall	.-58     	; 0x528 <_Z7var_iniv>
	UART_init(8);
     562:	88 e0       	ldi	r24, 0x08	; 8
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9a 83       	std	Y+2, r25	; 0x02
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	ce 01       	movw	r24, r28
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	e4 d2       	rcall	.+1480   	; 0xb38 <_Z9UART_initRKj>

	sei(); //Глобальные прерывания
     570:	78 94       	sei

	UART_send_string_ln("Print 'help' for more information");
     572:	85 e2       	ldi	r24, 0x25	; 37
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	fd d2       	rcall	.+1530   	; 0xb72 <_Z19UART_send_string_lnPKc>
				}
				while (!(PIND & (1 << PIND3)))
					;
			}

			PORTC = ~(1 << 7);
     578:	0f 2e       	mov	r0, r31
     57a:	ff e7       	ldi	r31, 0x7F	; 127
     57c:	bf 2e       	mov	r11, r31
     57e:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[((year % 1000) % 100) % 10]; //year 8
     580:	08 ee       	ldi	r16, 0xE8	; 232
     582:	13 e0       	ldi	r17, 0x03	; 3
     584:	0f 2e       	mov	r0, r31
     586:	f4 e6       	ldi	r31, 0x64	; 100
     588:	ff 2e       	mov	r15, r31
     58a:	f0 2d       	mov	r31, r0
			_delay_ms(1);

			PORTC = ~(1 << 6);
     58c:	0f 2e       	mov	r0, r31
     58e:	ff eb       	ldi	r31, 0xBF	; 191
     590:	cf 2e       	mov	r12, r31
     592:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[((year % 1000) % 100) / 10]; //year 7
			_delay_ms(1);

			PORTC = ~(1 << 5);
     594:	0f 2e       	mov	r0, r31
     596:	ff ed       	ldi	r31, 0xDF	; 223
     598:	df 2e       	mov	r13, r31
     59a:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[(year % 1000) / 100]; //year 6
			_delay_ms(1);

			PORTC = ~(1 << 4);
     59c:	0f 2e       	mov	r0, r31
     59e:	ff ee       	ldi	r31, 0xEF	; 239
     5a0:	ef 2e       	mov	r14, r31
     5a2:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[(year / 1000)]; //year 5
			_delay_ms(1);

			PORTC = ~(1 << 3);
     5a4:	0f 2e       	mov	r0, r31
     5a6:	f7 ef       	ldi	r31, 0xF7	; 247
     5a8:	af 2e       	mov	r10, r31
     5aa:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[(month % 10)] | (1 << PINA7); //month 4
     5ac:	ed ec       	ldi	r30, 0xCD	; 205
			_delay_ms(1);

			PORTC = ~(1 << 2);
     5ae:	0f 2e       	mov	r0, r31
     5b0:	fb ef       	ldi	r31, 0xFB	; 251
     5b2:	9f 2e       	mov	r9, r31
     5b4:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[(month / 10)]; //month 3
			_delay_ms(1);

			PORTC = ~(1 << 1);
     5b6:	0f 2e       	mov	r0, r31
     5b8:	fd ef       	ldi	r31, 0xFD	; 253
     5ba:	8f 2e       	mov	r8, r31
     5bc:	f0 2d       	mov	r31, r0

static char not_leap(unsigned short year) //проверка вискосного года
{
	if (!(year % 100))
	{
		return (char)(year % 400);
     5be:	0f 2e       	mov	r0, r31
     5c0:	f0 e9       	ldi	r31, 0x90	; 144
     5c2:	3f 2e       	mov	r3, r31
     5c4:	f0 2d       	mov	r31, r0
	{

		if (!(PIND & (1 << PIND2))) //Смена даты/время
		{
			if (disp_flag == 0)
				disp_flag = 1;
     5c6:	f1 e0       	ldi	r31, 0x01	; 1
		{

			if (!(PIND & (1 << PIND6))) //year--
			{
				if (--year == 0)
					year = 1;
     5c8:	44 24       	eor	r4, r4
     5ca:	43 94       	inc	r4
     5cc:	51 2c       	mov	r5, r1

			PORTC = ~(1 << 1);
			PORTA = numberSegments[(date % 10)] | (1 << PINA7); //date 2
			_delay_ms(1);

			PORTC = ~(1 << 0);
     5ce:	0f 2e       	mov	r0, r31
     5d0:	fe ef       	ldi	r31, 0xFE	; 254
     5d2:	7f 2e       	mov	r7, r31
     5d4:	f0 2d       	mov	r31, r0
					;
			}

			if (!(PIND & (1 << PIND3))) // date++
			{
				if (++date == 32)
     5d6:	68 94       	set
     5d8:	66 24       	eor	r6, r6
     5da:	61 f8       	bld	r6, 1
	UART_send_string_ln("Print 'help' for more information");

	while (1)
	{

		if (!(PIND & (1 << PIND2))) //Смена даты/время
     5dc:	82 99       	sbic	0x10, 2	; 16
     5de:	0b c0       	rjmp	.+22     	; 0x5f6 <main+0xa4>
		{
			if (disp_flag == 0)
     5e0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <disp_flag>
     5e4:	81 11       	cpse	r24, r1
     5e6:	03 c0       	rjmp	.+6      	; 0x5ee <main+0x9c>
				disp_flag = 1;
     5e8:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <disp_flag>
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <main+0xa0>
			else
				disp_flag = 0;
     5ee:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <disp_flag>
			while (!(PIND & (1 << PIND2)))
     5f2:	82 9b       	sbis	0x10, 2	; 16
     5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <main+0xa0>
				;
		}

		//disp_flag для переключения отображения дата/время == 1/0
		if (disp_flag == 1)
     5f6:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <disp_flag>
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	09 f0       	breq	.+2      	; 0x600 <main+0xae>
     5fe:	cb c1       	rjmp	.+918    	; 0x996 <main+0x444>
		{

			if (!(PIND & (1 << PIND6))) //year--
     600:	86 99       	sbic	0x10, 6	; 16
     602:	13 c0       	rjmp	.+38     	; 0x62a <main+0xd8>
			{
				if (--year == 0)
     604:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <year>
     608:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <year+0x1>
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	29 f0       	breq	.+10     	; 0x61a <main+0xc8>
     610:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <year+0x1>
     614:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <year>
     618:	04 c0       	rjmp	.+8      	; 0x622 <main+0xd0>
					year = 1;
     61a:	50 92 80 01 	sts	0x0180, r5	; 0x800180 <year+0x1>
     61e:	40 92 7f 01 	sts	0x017F, r4	; 0x80017f <year>
				date = 1;
     622:	f0 93 83 01 	sts	0x0183, r31	; 0x800183 <date>
				while (!(PIND & (1 << PIND6)))
     626:	86 9b       	sbis	0x10, 6	; 16
     628:	fe cf       	rjmp	.-4      	; 0x626 <main+0xd4>
					;
			}

			if (!(PIND & (1 << PIND5))) //year++
     62a:	85 99       	sbic	0x10, 5	; 16
     62c:	0b c0       	rjmp	.+22     	; 0x644 <main+0xf2>
			{
				year++;
     62e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <year>
     632:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <year+0x1>
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <year+0x1>
     63c:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <year>
				while (!(PIND & (1 << PIND5)))
     640:	85 9b       	sbis	0x10, 5	; 16
     642:	fe cf       	rjmp	.-4      	; 0x640 <main+0xee>
					;
			}

			if (!(PIND & (1 << PIND4))) // mouth++
     644:	84 99       	sbic	0x10, 4	; 16
     646:	0f c0       	rjmp	.+30     	; 0x666 <main+0x114>
			{
				if (++month == 13)
     648:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	8d 30       	cpi	r24, 0x0D	; 13
     650:	19 f0       	breq	.+6      	; 0x658 <main+0x106>
     652:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
     656:	02 c0       	rjmp	.+4      	; 0x65c <main+0x10a>
					month = 1;
     658:	f0 93 82 01 	sts	0x0182, r31	; 0x800182 <month>
				date = 1;
     65c:	f0 93 83 01 	sts	0x0183, r31	; 0x800183 <date>
				while (!(PIND & (1 << PIND4)))
     660:	84 9b       	sbis	0x10, 4	; 16
     662:	fe cf       	rjmp	.-4      	; 0x660 <main+0x10e>
     664:	66 c2       	rjmp	.+1228   	; 0xb32 <main+0x5e0>
					;
			}

			if (!(PIND & (1 << PIND3))) // date++
     666:	83 99       	sbic	0x10, 3	; 16
     668:	4f c0       	rjmp	.+158    	; 0x708 <main+0x1b6>
			{
				if (++date == 32)
     66a:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <date>
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     674:	80 32       	cpi	r24, 0x20	; 32
     676:	19 f4       	brne	.+6      	; 0x67e <main+0x12c>
				{
					date = 1;
     678:	f0 93 83 01 	sts	0x0183, r31	; 0x800183 <date>
     67c:	43 c0       	rjmp	.+134    	; 0x704 <main+0x1b2>
				}
				else if (date == 31)
     67e:	8f 31       	cpi	r24, 0x1F	; 31
     680:	51 f4       	brne	.+20     	; 0x696 <main+0x144>
				{
					if ((month == 4) || (month == 6) || (month == 9) || (month == 11))
     682:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     686:	8d 7f       	andi	r24, 0xFD	; 253
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	11 f0       	breq	.+4      	; 0x690 <main+0x13e>
     68c:	89 30       	cpi	r24, 0x09	; 9
     68e:	d1 f5       	brne	.+116    	; 0x704 <main+0x1b2>
					{
						date = 1;
     690:	f0 93 83 01 	sts	0x0183, r31	; 0x800183 <date>
     694:	37 c0       	rjmp	.+110    	; 0x704 <main+0x1b2>
					}
				}
				else if (date == 30)
     696:	8e 31       	cpi	r24, 0x1E	; 30
     698:	39 f4       	brne	.+14     	; 0x6a8 <main+0x156>
				{
					if (month == 2)
     69a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	89 f5       	brne	.+98     	; 0x704 <main+0x1b2>
					{
						date = 1;
     6a2:	f0 93 83 01 	sts	0x0183, r31	; 0x800183 <date>
     6a6:	2e c0       	rjmp	.+92     	; 0x704 <main+0x1b2>
					}
				}
				else if (date == 29)
     6a8:	8d 31       	cpi	r24, 0x1D	; 29
     6aa:	61 f5       	brne	.+88     	; 0x704 <main+0x1b2>
				{
					if ((month == 2) && (not_leap(year)))
     6ac:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	41 f5       	brne	.+80     	; 0x704 <main+0x1b2>
     6b4:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <year>
     6b8:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <year+0x1>
	TIFR = 0x01; //clear flag
}

static char not_leap(unsigned short year) //проверка вискосного года
{
	if (!(year % 100))
     6bc:	9a 01       	movw	r18, r20
     6be:	36 95       	lsr	r19
     6c0:	27 95       	ror	r18
     6c2:	36 95       	lsr	r19
     6c4:	27 95       	ror	r18
     6c6:	ab e7       	ldi	r26, 0x7B	; 123
     6c8:	b4 e1       	ldi	r27, 0x14	; 20
     6ca:	6d d2       	rcall	.+1242   	; 0xba6 <__umulhisi3>
     6cc:	96 95       	lsr	r25
     6ce:	87 95       	ror	r24
     6d0:	f8 9e       	mul	r15, r24
     6d2:	90 01       	movw	r18, r0
     6d4:	f9 9e       	mul	r15, r25
     6d6:	30 0d       	add	r19, r0
     6d8:	11 24       	eor	r1, r1
     6da:	42 17       	cp	r20, r18
     6dc:	53 07       	cpc	r21, r19
     6de:	71 f4       	brne	.+28     	; 0x6fc <main+0x1aa>
	{
		return (char)(year % 400);
     6e0:	9a 01       	movw	r18, r20
     6e2:	32 95       	swap	r19
     6e4:	22 95       	swap	r18
     6e6:	2f 70       	andi	r18, 0x0F	; 15
     6e8:	23 27       	eor	r18, r19
     6ea:	3f 70       	andi	r19, 0x0F	; 15
     6ec:	23 27       	eor	r18, r19
     6ee:	ae e3       	ldi	r26, 0x3E	; 62
     6f0:	ba e0       	ldi	r27, 0x0A	; 10
     6f2:	59 d2       	rcall	.+1202   	; 0xba6 <__umulhisi3>
     6f4:	83 9d       	mul	r24, r3
     6f6:	40 19       	sub	r20, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <main+0x1ac>
	}
	else
	{
		return (char)(year % 4);
     6fc:	43 70       	andi	r20, 0x03	; 3
						date = 1;
					}
				}
				else if (date == 29)
				{
					if ((month == 2) && (not_leap(year)))
     6fe:	41 11       	cpse	r20, r1
					{
						date = 1;
     700:	f0 93 83 01 	sts	0x0183, r31	; 0x800183 <date>
					}
				}
				while (!(PIND & (1 << PIND3)))
     704:	83 9b       	sbis	0x10, 3	; 16
     706:	fe cf       	rjmp	.-4      	; 0x704 <main+0x1b2>
					;
			}

			PORTC = ~(1 << 7);
     708:	b5 ba       	out	0x15, r11	; 21
			PORTA = numberSegments[((year % 1000) % 100) % 10]; //year 8
     70a:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <year>
     70e:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <year+0x1>
     712:	9a 01       	movw	r18, r20
     714:	36 95       	lsr	r19
     716:	27 95       	ror	r18
     718:	36 95       	lsr	r19
     71a:	27 95       	ror	r18
     71c:	36 95       	lsr	r19
     71e:	27 95       	ror	r18
     720:	a5 ec       	ldi	r26, 0xC5	; 197
     722:	b0 e2       	ldi	r27, 0x20	; 32
     724:	40 d2       	rcall	.+1152   	; 0xba6 <__umulhisi3>
     726:	92 95       	swap	r25
     728:	82 95       	swap	r24
     72a:	8f 70       	andi	r24, 0x0F	; 15
     72c:	89 27       	eor	r24, r25
     72e:	9f 70       	andi	r25, 0x0F	; 15
     730:	89 27       	eor	r24, r25
     732:	80 9f       	mul	r24, r16
     734:	90 01       	movw	r18, r0
     736:	81 9f       	mul	r24, r17
     738:	30 0d       	add	r19, r0
     73a:	90 9f       	mul	r25, r16
     73c:	30 0d       	add	r19, r0
     73e:	11 24       	eor	r1, r1
     740:	42 1b       	sub	r20, r18
     742:	53 0b       	sbc	r21, r19
     744:	9a 01       	movw	r18, r20
     746:	36 95       	lsr	r19
     748:	27 95       	ror	r18
     74a:	36 95       	lsr	r19
     74c:	27 95       	ror	r18
     74e:	ab e7       	ldi	r26, 0x7B	; 123
     750:	b4 e1       	ldi	r27, 0x14	; 20
     752:	29 d2       	rcall	.+1106   	; 0xba6 <__umulhisi3>
     754:	96 95       	lsr	r25
     756:	87 95       	ror	r24
     758:	f8 9e       	mul	r15, r24
     75a:	90 01       	movw	r18, r0
     75c:	f9 9e       	mul	r15, r25
     75e:	30 0d       	add	r19, r0
     760:	11 24       	eor	r1, r1
     762:	42 1b       	sub	r20, r18
     764:	53 0b       	sbc	r21, r19
     766:	9a 01       	movw	r18, r20
     768:	ad ec       	ldi	r26, 0xCD	; 205
     76a:	bc ec       	ldi	r27, 0xCC	; 204
     76c:	1c d2       	rcall	.+1080   	; 0xba6 <__umulhisi3>
     76e:	96 95       	lsr	r25
     770:	87 95       	ror	r24
     772:	96 95       	lsr	r25
     774:	87 95       	ror	r24
     776:	96 95       	lsr	r25
     778:	87 95       	ror	r24
     77a:	9c 01       	movw	r18, r24
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	82 0f       	add	r24, r18
     78e:	93 1f       	adc	r25, r19
     790:	48 1b       	sub	r20, r24
     792:	59 0b       	sbc	r21, r25
     794:	da 01       	movw	r26, r20
     796:	a0 5a       	subi	r26, 0xA0	; 160
     798:	bf 4f       	sbci	r27, 0xFF	; 255
     79a:	8c 91       	ld	r24, X
     79c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     79e:	8f ec       	ldi	r24, 0xCF	; 207
     7a0:	97 e0       	ldi	r25, 0x07	; 7
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <main+0x250>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <main+0x256>
     7a8:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 6);
     7aa:	c5 ba       	out	0x15, r12	; 21
			PORTA = numberSegments[((year % 1000) % 100) / 10]; //year 7
     7ac:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <year>
     7b0:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <year+0x1>
     7b4:	9a 01       	movw	r18, r20
     7b6:	36 95       	lsr	r19
     7b8:	27 95       	ror	r18
     7ba:	36 95       	lsr	r19
     7bc:	27 95       	ror	r18
     7be:	36 95       	lsr	r19
     7c0:	27 95       	ror	r18
     7c2:	a5 ec       	ldi	r26, 0xC5	; 197
     7c4:	b0 e2       	ldi	r27, 0x20	; 32
     7c6:	ef d1       	rcall	.+990    	; 0xba6 <__umulhisi3>
     7c8:	92 95       	swap	r25
     7ca:	82 95       	swap	r24
     7cc:	8f 70       	andi	r24, 0x0F	; 15
     7ce:	89 27       	eor	r24, r25
     7d0:	9f 70       	andi	r25, 0x0F	; 15
     7d2:	89 27       	eor	r24, r25
     7d4:	80 9f       	mul	r24, r16
     7d6:	90 01       	movw	r18, r0
     7d8:	81 9f       	mul	r24, r17
     7da:	30 0d       	add	r19, r0
     7dc:	90 9f       	mul	r25, r16
     7de:	30 0d       	add	r19, r0
     7e0:	11 24       	eor	r1, r1
     7e2:	42 1b       	sub	r20, r18
     7e4:	53 0b       	sbc	r21, r19
     7e6:	9a 01       	movw	r18, r20
     7e8:	36 95       	lsr	r19
     7ea:	27 95       	ror	r18
     7ec:	36 95       	lsr	r19
     7ee:	27 95       	ror	r18
     7f0:	ab e7       	ldi	r26, 0x7B	; 123
     7f2:	b4 e1       	ldi	r27, 0x14	; 20
     7f4:	d8 d1       	rcall	.+944    	; 0xba6 <__umulhisi3>
     7f6:	96 95       	lsr	r25
     7f8:	87 95       	ror	r24
     7fa:	f8 9e       	mul	r15, r24
     7fc:	90 01       	movw	r18, r0
     7fe:	f9 9e       	mul	r15, r25
     800:	30 0d       	add	r19, r0
     802:	11 24       	eor	r1, r1
     804:	da 01       	movw	r26, r20
     806:	a2 1b       	sub	r26, r18
     808:	b3 0b       	sbc	r27, r19
     80a:	9d 01       	movw	r18, r26
     80c:	ad ec       	ldi	r26, 0xCD	; 205
     80e:	bc ec       	ldi	r27, 0xCC	; 204
     810:	ca d1       	rcall	.+916    	; 0xba6 <__umulhisi3>
     812:	96 95       	lsr	r25
     814:	87 95       	ror	r24
     816:	96 95       	lsr	r25
     818:	87 95       	ror	r24
     81a:	96 95       	lsr	r25
     81c:	87 95       	ror	r24
     81e:	dc 01       	movw	r26, r24
     820:	a0 5a       	subi	r26, 0xA0	; 160
     822:	bf 4f       	sbci	r27, 0xFF	; 255
     824:	8c 91       	ld	r24, X
     826:	8b bb       	out	0x1b, r24	; 27
     828:	8f ec       	ldi	r24, 0xCF	; 207
     82a:	97 e0       	ldi	r25, 0x07	; 7
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <main+0x2da>
     830:	00 c0       	rjmp	.+0      	; 0x832 <main+0x2e0>
     832:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 5);
     834:	d5 ba       	out	0x15, r13	; 21
			PORTA = numberSegments[(year % 1000) / 100]; //year 6
     836:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <year>
     83a:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <year+0x1>
     83e:	9a 01       	movw	r18, r20
     840:	36 95       	lsr	r19
     842:	27 95       	ror	r18
     844:	36 95       	lsr	r19
     846:	27 95       	ror	r18
     848:	36 95       	lsr	r19
     84a:	27 95       	ror	r18
     84c:	a5 ec       	ldi	r26, 0xC5	; 197
     84e:	b0 e2       	ldi	r27, 0x20	; 32
     850:	aa d1       	rcall	.+852    	; 0xba6 <__umulhisi3>
     852:	92 95       	swap	r25
     854:	82 95       	swap	r24
     856:	8f 70       	andi	r24, 0x0F	; 15
     858:	89 27       	eor	r24, r25
     85a:	9f 70       	andi	r25, 0x0F	; 15
     85c:	89 27       	eor	r24, r25
     85e:	80 9f       	mul	r24, r16
     860:	90 01       	movw	r18, r0
     862:	81 9f       	mul	r24, r17
     864:	30 0d       	add	r19, r0
     866:	90 9f       	mul	r25, r16
     868:	30 0d       	add	r19, r0
     86a:	11 24       	eor	r1, r1
     86c:	da 01       	movw	r26, r20
     86e:	a2 1b       	sub	r26, r18
     870:	b3 0b       	sbc	r27, r19
     872:	9d 01       	movw	r18, r26
     874:	36 95       	lsr	r19
     876:	27 95       	ror	r18
     878:	36 95       	lsr	r19
     87a:	27 95       	ror	r18
     87c:	ab e7       	ldi	r26, 0x7B	; 123
     87e:	b4 e1       	ldi	r27, 0x14	; 20
     880:	92 d1       	rcall	.+804    	; 0xba6 <__umulhisi3>
     882:	96 95       	lsr	r25
     884:	87 95       	ror	r24
     886:	dc 01       	movw	r26, r24
     888:	a0 5a       	subi	r26, 0xA0	; 160
     88a:	bf 4f       	sbci	r27, 0xFF	; 255
     88c:	8c 91       	ld	r24, X
     88e:	8b bb       	out	0x1b, r24	; 27
     890:	8f ec       	ldi	r24, 0xCF	; 207
     892:	97 e0       	ldi	r25, 0x07	; 7
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <main+0x342>
     898:	00 c0       	rjmp	.+0      	; 0x89a <main+0x348>
     89a:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 4);
     89c:	e5 ba       	out	0x15, r14	; 21
			PORTA = numberSegments[(year / 1000)]; //year 5
     89e:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <year>
     8a2:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <year+0x1>
     8a6:	36 95       	lsr	r19
     8a8:	27 95       	ror	r18
     8aa:	36 95       	lsr	r19
     8ac:	27 95       	ror	r18
     8ae:	36 95       	lsr	r19
     8b0:	27 95       	ror	r18
     8b2:	a5 ec       	ldi	r26, 0xC5	; 197
     8b4:	b0 e2       	ldi	r27, 0x20	; 32
     8b6:	77 d1       	rcall	.+750    	; 0xba6 <__umulhisi3>
     8b8:	92 95       	swap	r25
     8ba:	82 95       	swap	r24
     8bc:	8f 70       	andi	r24, 0x0F	; 15
     8be:	89 27       	eor	r24, r25
     8c0:	9f 70       	andi	r25, 0x0F	; 15
     8c2:	89 27       	eor	r24, r25
     8c4:	dc 01       	movw	r26, r24
     8c6:	a0 5a       	subi	r26, 0xA0	; 160
     8c8:	bf 4f       	sbci	r27, 0xFF	; 255
     8ca:	8c 91       	ld	r24, X
     8cc:	8b bb       	out	0x1b, r24	; 27
     8ce:	af ec       	ldi	r26, 0xCF	; 207
     8d0:	b7 e0       	ldi	r27, 0x07	; 7
     8d2:	11 97       	sbiw	r26, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <main+0x380>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <main+0x386>
     8d8:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 3);
     8da:	a5 ba       	out	0x15, r10	; 21
			PORTA = numberSegments[(month % 10)] | (1 << PINA7); //month 4
     8dc:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <month>
     8e0:	ae 9f       	mul	r26, r30
     8e2:	81 2d       	mov	r24, r1
     8e4:	11 24       	eor	r1, r1
     8e6:	86 95       	lsr	r24
     8e8:	86 95       	lsr	r24
     8ea:	86 95       	lsr	r24
     8ec:	88 0f       	add	r24, r24
     8ee:	98 2f       	mov	r25, r24
     8f0:	99 0f       	add	r25, r25
     8f2:	99 0f       	add	r25, r25
     8f4:	89 0f       	add	r24, r25
     8f6:	a8 1b       	sub	r26, r24
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	a0 5a       	subi	r26, 0xA0	; 160
     8fc:	bf 4f       	sbci	r27, 0xFF	; 255
     8fe:	8c 91       	ld	r24, X
     900:	80 68       	ori	r24, 0x80	; 128
     902:	8b bb       	out	0x1b, r24	; 27
     904:	8f ec       	ldi	r24, 0xCF	; 207
     906:	97 e0       	ldi	r25, 0x07	; 7
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <main+0x3b6>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <main+0x3bc>
     90e:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 2);
     910:	95 ba       	out	0x15, r9	; 21
			PORTA = numberSegments[(month / 10)]; //month 3
     912:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <month>
     916:	ae 9f       	mul	r26, r30
     918:	a1 2d       	mov	r26, r1
     91a:	11 24       	eor	r1, r1
     91c:	a6 95       	lsr	r26
     91e:	a6 95       	lsr	r26
     920:	a6 95       	lsr	r26
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	a0 5a       	subi	r26, 0xA0	; 160
     926:	bf 4f       	sbci	r27, 0xFF	; 255
     928:	8c 91       	ld	r24, X
     92a:	8b bb       	out	0x1b, r24	; 27
     92c:	af ec       	ldi	r26, 0xCF	; 207
     92e:	b7 e0       	ldi	r27, 0x07	; 7
     930:	11 97       	sbiw	r26, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <main+0x3de>
     934:	00 c0       	rjmp	.+0      	; 0x936 <main+0x3e4>
     936:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 1);
     938:	85 ba       	out	0x15, r8	; 21
			PORTA = numberSegments[(date % 10)] | (1 << PINA7); //date 2
     93a:	a0 91 83 01 	lds	r26, 0x0183	; 0x800183 <date>
     93e:	ae 9f       	mul	r26, r30
     940:	81 2d       	mov	r24, r1
     942:	11 24       	eor	r1, r1
     944:	86 95       	lsr	r24
     946:	86 95       	lsr	r24
     948:	86 95       	lsr	r24
     94a:	88 0f       	add	r24, r24
     94c:	98 2f       	mov	r25, r24
     94e:	99 0f       	add	r25, r25
     950:	99 0f       	add	r25, r25
     952:	89 0f       	add	r24, r25
     954:	a8 1b       	sub	r26, r24
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	a0 5a       	subi	r26, 0xA0	; 160
     95a:	bf 4f       	sbci	r27, 0xFF	; 255
     95c:	8c 91       	ld	r24, X
     95e:	80 68       	ori	r24, 0x80	; 128
     960:	8b bb       	out	0x1b, r24	; 27
     962:	8f ec       	ldi	r24, 0xCF	; 207
     964:	97 e0       	ldi	r25, 0x07	; 7
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <main+0x414>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <main+0x41a>
     96c:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 0);
     96e:	75 ba       	out	0x15, r7	; 21
			PORTA = numberSegments[(date / 10)]; //date 1
     970:	a0 91 83 01 	lds	r26, 0x0183	; 0x800183 <date>
     974:	ae 9f       	mul	r26, r30
     976:	a1 2d       	mov	r26, r1
     978:	11 24       	eor	r1, r1
     97a:	a6 95       	lsr	r26
     97c:	a6 95       	lsr	r26
     97e:	a6 95       	lsr	r26
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	a0 5a       	subi	r26, 0xA0	; 160
     984:	bf 4f       	sbci	r27, 0xFF	; 255
     986:	8c 91       	ld	r24, X
     988:	8b bb       	out	0x1b, r24	; 27
     98a:	af ec       	ldi	r26, 0xCF	; 207
     98c:	b7 e0       	ldi	r27, 0x07	; 7
     98e:	11 97       	sbiw	r26, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <main+0x43c>
     992:	00 c0       	rjmp	.+0      	; 0x994 <main+0x442>
     994:	00 00       	nop
			_delay_ms(1);
		}

		if (disp_flag == 0)
     996:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <disp_flag>
     99a:	81 11       	cpse	r24, r1
     99c:	1f ce       	rjmp	.-962    	; 0x5dc <main+0x8a>
		{

			if (!(PIND & (1 << PIND5)))
     99e:	85 99       	sbic	0x10, 5	; 16
     9a0:	0c c0       	rjmp	.+24     	; 0x9ba <main+0x468>
			{
				if (++second == 60)
     9a2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <second>
     9a6:	8f 5f       	subi	r24, 0xFF	; 255
     9a8:	8c 33       	cpi	r24, 0x3C	; 60
     9aa:	19 f0       	breq	.+6      	; 0x9b2 <main+0x460>
     9ac:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <second>
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <main+0x464>
					second = 0;
     9b2:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <second>
				while (!(PIND & (1 << PIND5)))
     9b6:	85 9b       	sbis	0x10, 5	; 16
     9b8:	fe cf       	rjmp	.-4      	; 0x9b6 <main+0x464>
					;
			}

			if (!(PIND & (1 << PIND4)))
     9ba:	84 99       	sbic	0x10, 4	; 16
     9bc:	0c c0       	rjmp	.+24     	; 0x9d6 <main+0x484>
			{
				if (++minute == 60)
     9be:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <minute>
     9c2:	8f 5f       	subi	r24, 0xFF	; 255
     9c4:	8c 33       	cpi	r24, 0x3C	; 60
     9c6:	19 f0       	breq	.+6      	; 0x9ce <main+0x47c>
     9c8:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <minute>
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <main+0x480>
					minute = 0;
     9ce:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <minute>
				while (!(PIND & (1 << PIND4)))
     9d2:	84 9b       	sbis	0x10, 4	; 16
     9d4:	fe cf       	rjmp	.-4      	; 0x9d2 <main+0x480>
					;
			}

			if (!(PIND & (1 << PIND3)))
     9d6:	83 99       	sbic	0x10, 3	; 16
     9d8:	0c c0       	rjmp	.+24     	; 0x9f2 <main+0x4a0>
			{
				if (++hour == 24)
     9da:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <hour>
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	88 31       	cpi	r24, 0x18	; 24
     9e2:	19 f0       	breq	.+6      	; 0x9ea <main+0x498>
     9e4:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <hour>
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <main+0x49c>
					hour = 0;
     9ea:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <hour>
				while (!(PIND & (1 << PIND3)))
     9ee:	83 9b       	sbis	0x10, 3	; 16
     9f0:	fe cf       	rjmp	.-4      	; 0x9ee <main+0x49c>
					;
			}

			PORTC = ~(1 << 7);
     9f2:	b5 ba       	out	0x15, r11	; 21
			PORTA = numberSegments[(second % 10)]; //sec1 6
     9f4:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <second>
     9f8:	ae 9f       	mul	r26, r30
     9fa:	81 2d       	mov	r24, r1
     9fc:	11 24       	eor	r1, r1
     9fe:	86 95       	lsr	r24
     a00:	86 95       	lsr	r24
     a02:	86 95       	lsr	r24
     a04:	88 0f       	add	r24, r24
     a06:	98 2f       	mov	r25, r24
     a08:	99 0f       	add	r25, r25
     a0a:	99 0f       	add	r25, r25
     a0c:	89 0f       	add	r24, r25
     a0e:	a8 1b       	sub	r26, r24
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	a0 5a       	subi	r26, 0xA0	; 160
     a14:	bf 4f       	sbci	r27, 0xFF	; 255
     a16:	8c 91       	ld	r24, X
     a18:	8b bb       	out	0x1b, r24	; 27
     a1a:	8f ec       	ldi	r24, 0xCF	; 207
     a1c:	97 e0       	ldi	r25, 0x07	; 7
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <main+0x4cc>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <main+0x4d2>
     a24:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 6);
     a26:	c5 ba       	out	0x15, r12	; 21
			PORTA = numberSegments[(second / 10)]; //sec2 5
     a28:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <second>
     a2c:	ae 9f       	mul	r26, r30
     a2e:	a1 2d       	mov	r26, r1
     a30:	11 24       	eor	r1, r1
     a32:	a6 95       	lsr	r26
     a34:	a6 95       	lsr	r26
     a36:	a6 95       	lsr	r26
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	a0 5a       	subi	r26, 0xA0	; 160
     a3c:	bf 4f       	sbci	r27, 0xFF	; 255
     a3e:	8c 91       	ld	r24, X
     a40:	8b bb       	out	0x1b, r24	; 27
     a42:	af ec       	ldi	r26, 0xCF	; 207
     a44:	b7 e0       	ldi	r27, 0x07	; 7
     a46:	11 97       	sbiw	r26, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <main+0x4f4>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <main+0x4fa>
     a4c:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 5);
     a4e:	d5 ba       	out	0x15, r13	; 21
			PORTA = (1 << 6); // '-' 5
     a50:	80 e4       	ldi	r24, 0x40	; 64
     a52:	8b bb       	out	0x1b, r24	; 27
     a54:	af ec       	ldi	r26, 0xCF	; 207
     a56:	b7 e0       	ldi	r27, 0x07	; 7
     a58:	11 97       	sbiw	r26, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <main+0x506>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <main+0x50c>
     a5e:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 4);
     a60:	e5 ba       	out	0x15, r14	; 21
			PORTA = numberSegments[(minute % 10)]; //min1 5
     a62:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <minute>
     a66:	ae 9f       	mul	r26, r30
     a68:	91 2d       	mov	r25, r1
     a6a:	11 24       	eor	r1, r1
     a6c:	96 95       	lsr	r25
     a6e:	96 95       	lsr	r25
     a70:	96 95       	lsr	r25
     a72:	99 0f       	add	r25, r25
     a74:	29 2f       	mov	r18, r25
     a76:	22 0f       	add	r18, r18
     a78:	22 0f       	add	r18, r18
     a7a:	92 0f       	add	r25, r18
     a7c:	a9 1b       	sub	r26, r25
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	a0 5a       	subi	r26, 0xA0	; 160
     a82:	bf 4f       	sbci	r27, 0xFF	; 255
     a84:	9c 91       	ld	r25, X
     a86:	9b bb       	out	0x1b, r25	; 27
     a88:	af ec       	ldi	r26, 0xCF	; 207
     a8a:	b7 e0       	ldi	r27, 0x07	; 7
     a8c:	11 97       	sbiw	r26, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <main+0x53a>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <main+0x540>
     a92:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 3);
     a94:	a5 ba       	out	0x15, r10	; 21
			PORTA = numberSegments[(minute / 10)]; //min2 4
     a96:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <minute>
     a9a:	ae 9f       	mul	r26, r30
     a9c:	a1 2d       	mov	r26, r1
     a9e:	11 24       	eor	r1, r1
     aa0:	a6 95       	lsr	r26
     aa2:	a6 95       	lsr	r26
     aa4:	a6 95       	lsr	r26
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	a0 5a       	subi	r26, 0xA0	; 160
     aaa:	bf 4f       	sbci	r27, 0xFF	; 255
     aac:	9c 91       	ld	r25, X
     aae:	9b bb       	out	0x1b, r25	; 27
     ab0:	af ec       	ldi	r26, 0xCF	; 207
     ab2:	b7 e0       	ldi	r27, 0x07	; 7
     ab4:	11 97       	sbiw	r26, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <main+0x562>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <main+0x568>
     aba:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 2);
     abc:	95 ba       	out	0x15, r9	; 21
			PORTA = (1 << 6); // '-' 3
     abe:	8b bb       	out	0x1b, r24	; 27
     ac0:	8f ec       	ldi	r24, 0xCF	; 207
     ac2:	97 e0       	ldi	r25, 0x07	; 7
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <main+0x572>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <main+0x578>
     aca:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 1);
     acc:	85 ba       	out	0x15, r8	; 21
			PORTA = numberSegments[(hour % 10)]; //hour1 2
     ace:	a0 91 84 01 	lds	r26, 0x0184	; 0x800184 <hour>
     ad2:	ae 9f       	mul	r26, r30
     ad4:	81 2d       	mov	r24, r1
     ad6:	11 24       	eor	r1, r1
     ad8:	86 95       	lsr	r24
     ada:	86 95       	lsr	r24
     adc:	86 95       	lsr	r24
     ade:	88 0f       	add	r24, r24
     ae0:	98 2f       	mov	r25, r24
     ae2:	99 0f       	add	r25, r25
     ae4:	99 0f       	add	r25, r25
     ae6:	89 0f       	add	r24, r25
     ae8:	a8 1b       	sub	r26, r24
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	a0 5a       	subi	r26, 0xA0	; 160
     aee:	bf 4f       	sbci	r27, 0xFF	; 255
     af0:	8c 91       	ld	r24, X
     af2:	8b bb       	out	0x1b, r24	; 27
     af4:	af ec       	ldi	r26, 0xCF	; 207
     af6:	b7 e0       	ldi	r27, 0x07	; 7
     af8:	11 97       	sbiw	r26, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <main+0x5a6>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <main+0x5ac>
     afe:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 0);
     b00:	8e ef       	ldi	r24, 0xFE	; 254
     b02:	85 bb       	out	0x15, r24	; 21
			PORTA = numberSegments[(hour / 10)]; //hour2 1
     b04:	a0 91 84 01 	lds	r26, 0x0184	; 0x800184 <hour>
     b08:	ae 9f       	mul	r26, r30
     b0a:	a1 2d       	mov	r26, r1
     b0c:	11 24       	eor	r1, r1
     b0e:	a6 95       	lsr	r26
     b10:	a6 95       	lsr	r26
     b12:	a6 95       	lsr	r26
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	a0 5a       	subi	r26, 0xA0	; 160
     b18:	bf 4f       	sbci	r27, 0xFF	; 255
     b1a:	8c 91       	ld	r24, X
     b1c:	8b bb       	out	0x1b, r24	; 27
     b1e:	8f ec       	ldi	r24, 0xCF	; 207
     b20:	97 e0       	ldi	r25, 0x07	; 7
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <main+0x5d0>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <main+0x5d6>
     b28:	00 00       	nop
     b2a:	51 cd       	rjmp	.-1374   	; 0x5ce <main+0x7c>
					;
			}

			if (!(PIND & (1 << PIND3))) // date++
			{
				if (++date == 32)
     b2c:	60 92 83 01 	sts	0x0183, r6	; 0x800183 <date>
     b30:	e9 cd       	rjmp	.-1070   	; 0x704 <main+0x1b2>
				date = 1;
				while (!(PIND & (1 << PIND4)))
					;
			}

			if (!(PIND & (1 << PIND3))) // date++
     b32:	83 99       	sbic	0x10, 3	; 16
     b34:	e9 cd       	rjmp	.-1070   	; 0x708 <main+0x1b6>
     b36:	fa cf       	rjmp	.-12     	; 0xb2c <main+0x5da>

00000b38 <_Z9UART_initRKj>:

#include "uart.h"

// UART
void UART_init(const uint16_t& speed) {
	UBRRH = (uint8_t)(speed>>8);
     b38:	fc 01       	movw	r30, r24
     b3a:	21 81       	ldd	r18, Z+1	; 0x01
     b3c:	20 bd       	out	0x20, r18	; 32
	UBRRL = (uint8_t)(speed);
     b3e:	80 81       	ld	r24, Z
     b40:	89 b9       	out	0x09, r24	; 9
	//   Enable RXD | Enable TXD
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE); // Receiver / Transmitter / Receiver Interrupt
     b42:	88 e9       	ldi	r24, 0x98	; 152
     b44:	8a b9       	out	0x0a, r24	; 10
//	UCSRA = 0;
	UCSRA |= (1<<U2X);
     b46:	59 9a       	sbi	0x0b, 1	; 11
	//       UCSRC   |        Even       |   8 bits in frame
	UCSRC = 1<<URSEL | 1<<UPM1 | 0<<UPM0 | 1<<UCSZ0 | 1<<UCSZ1;
     b48:	86 ea       	ldi	r24, 0xA6	; 166
     b4a:	80 bd       	out	0x20, r24	; 32
     b4c:	08 95       	ret

00000b4e <_Z14UART_send_byteh>:
}

//  РџРµСЂРµРґР°С‡Р° РѕРґРЅРѕРіРѕ Р±Р°Р№С‚Р°
void UART_send_byte(const uint8_t byte) {
  while(!( UCSRA & (1<<UDRE)));
     b4e:	5d 9b       	sbis	0x0b, 5	; 11
     b50:	fe cf       	rjmp	.-4      	; 0xb4e <_Z14UART_send_byteh>
  UDR = byte;
     b52:	8c b9       	out	0x0c, r24	; 12
     b54:	08 95       	ret

00000b56 <_Z16UART_send_stringPKc>:
}


//  РџРµСЂРµРґР°С‡Р° СЃС‚СЂРѕРєРё
void UART_send_string(const char* str) {
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	ec 01       	movw	r28, r24
	while (*str != 0) {
     b5c:	88 81       	ld	r24, Y
     b5e:	88 23       	and	r24, r24
     b60:	29 f0       	breq	.+10     	; 0xb6c <_Z16UART_send_stringPKc+0x16>
     b62:	21 96       	adiw	r28, 0x01	; 1
		UART_send_byte(*str++);
     b64:	f4 df       	rcall	.-24     	; 0xb4e <_Z14UART_send_byteh>
}


//  РџРµСЂРµРґР°С‡Р° СЃС‚СЂРѕРєРё
void UART_send_string(const char* str) {
	while (*str != 0) {
     b66:	89 91       	ld	r24, Y+
     b68:	81 11       	cpse	r24, r1
     b6a:	fc cf       	rjmp	.-8      	; 0xb64 <_Z16UART_send_stringPKc+0xe>
		UART_send_byte(*str++);
	}
}
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	08 95       	ret

00000b72 <_Z19UART_send_string_lnPKc>:


//  РџРµСЂРµРґР°С‡Р° СЃС‚СЂРѕРєРё СЃ РїРµСЂРµРІРѕРґРѕРј РєР°СЂРµС‚РєРё РЅР° РЅРѕРІСѓСЋ СЃС‚СЂРѕРєСѓ
void UART_send_string_ln(const char* str) {
  UART_send_string(str);
     b72:	f1 df       	rcall	.-30     	; 0xb56 <_Z16UART_send_stringPKc>
  UART_send_byte(0x0D); // carriage return
     b74:	8d e0       	ldi	r24, 0x0D	; 13
     b76:	eb df       	rcall	.-42     	; 0xb4e <_Z14UART_send_byteh>
  UART_send_byte(0x0A); // new line
     b78:	8a e0       	ldi	r24, 0x0A	; 10
     b7a:	e9 df       	rcall	.-46     	; 0xb4e <_Z14UART_send_byteh>
     b7c:	08 95       	ret

00000b7e <__udivmodhi4>:
     b7e:	aa 1b       	sub	r26, r26
     b80:	bb 1b       	sub	r27, r27
     b82:	51 e1       	ldi	r21, 0x11	; 17
     b84:	07 c0       	rjmp	.+14     	; 0xb94 <__udivmodhi4_ep>

00000b86 <__udivmodhi4_loop>:
     b86:	aa 1f       	adc	r26, r26
     b88:	bb 1f       	adc	r27, r27
     b8a:	a6 17       	cp	r26, r22
     b8c:	b7 07       	cpc	r27, r23
     b8e:	10 f0       	brcs	.+4      	; 0xb94 <__udivmodhi4_ep>
     b90:	a6 1b       	sub	r26, r22
     b92:	b7 0b       	sbc	r27, r23

00000b94 <__udivmodhi4_ep>:
     b94:	88 1f       	adc	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	5a 95       	dec	r21
     b9a:	a9 f7       	brne	.-22     	; 0xb86 <__udivmodhi4_loop>
     b9c:	80 95       	com	r24
     b9e:	90 95       	com	r25
     ba0:	bc 01       	movw	r22, r24
     ba2:	cd 01       	movw	r24, r26
     ba4:	08 95       	ret

00000ba6 <__umulhisi3>:
     ba6:	a2 9f       	mul	r26, r18
     ba8:	b0 01       	movw	r22, r0
     baa:	b3 9f       	mul	r27, r19
     bac:	c0 01       	movw	r24, r0
     bae:	a3 9f       	mul	r26, r19
     bb0:	01 d0       	rcall	.+2      	; 0xbb4 <__umulhisi3+0xe>
     bb2:	b2 9f       	mul	r27, r18
     bb4:	70 0d       	add	r23, r0
     bb6:	81 1d       	adc	r24, r1
     bb8:	11 24       	eor	r1, r1
     bba:	91 1d       	adc	r25, r1
     bbc:	08 95       	ret

00000bbe <strcmp>:
     bbe:	fb 01       	movw	r30, r22
     bc0:	dc 01       	movw	r26, r24
     bc2:	8d 91       	ld	r24, X+
     bc4:	01 90       	ld	r0, Z+
     bc6:	80 19       	sub	r24, r0
     bc8:	01 10       	cpse	r0, r1
     bca:	d9 f3       	breq	.-10     	; 0xbc2 <strcmp+0x4>
     bcc:	99 0b       	sbc	r25, r25
     bce:	08 95       	ret

00000bd0 <sprintf>:
     bd0:	ae e0       	ldi	r26, 0x0E	; 14
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ed ee       	ldi	r30, 0xED	; 237
     bd6:	f5 e0       	ldi	r31, 0x05	; 5
     bd8:	bb c5       	rjmp	.+2934   	; 0x1750 <__prologue_saves__+0x1c>
     bda:	0d 89       	ldd	r16, Y+21	; 0x15
     bdc:	1e 89       	ldd	r17, Y+22	; 0x16
     bde:	86 e0       	ldi	r24, 0x06	; 6
     be0:	8c 83       	std	Y+4, r24	; 0x04
     be2:	1a 83       	std	Y+2, r17	; 0x02
     be4:	09 83       	std	Y+1, r16	; 0x01
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	9f e7       	ldi	r25, 0x7F	; 127
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
     bee:	ae 01       	movw	r20, r28
     bf0:	47 5e       	subi	r20, 0xE7	; 231
     bf2:	5f 4f       	sbci	r21, 0xFF	; 255
     bf4:	6f 89       	ldd	r22, Y+23	; 0x17
     bf6:	78 8d       	ldd	r23, Y+24	; 0x18
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	1e d0       	rcall	.+60     	; 0xc3a <vfprintf>
     bfe:	ef 81       	ldd	r30, Y+7	; 0x07
     c00:	f8 85       	ldd	r31, Y+8	; 0x08
     c02:	e0 0f       	add	r30, r16
     c04:	f1 1f       	adc	r31, r17
     c06:	10 82       	st	Z, r1
     c08:	2e 96       	adiw	r28, 0x0e	; 14
     c0a:	e4 e0       	ldi	r30, 0x04	; 4
     c0c:	bd c5       	rjmp	.+2938   	; 0x1788 <__epilogue_restores__+0x1c>

00000c0e <sscanf>:
     c0e:	ae e0       	ldi	r26, 0x0E	; 14
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	ec e0       	ldi	r30, 0x0C	; 12
     c14:	f6 e0       	ldi	r31, 0x06	; 6
     c16:	9e c5       	rjmp	.+2876   	; 0x1754 <__prologue_saves__+0x20>
     c18:	85 e0       	ldi	r24, 0x05	; 5
     c1a:	8c 83       	std	Y+4, r24	; 0x04
     c1c:	8b 89       	ldd	r24, Y+19	; 0x13
     c1e:	9c 89       	ldd	r25, Y+20	; 0x14
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	ae 01       	movw	r20, r28
     c26:	49 5e       	subi	r20, 0xE9	; 233
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	6d 89       	ldd	r22, Y+21	; 0x15
     c2c:	7e 89       	ldd	r23, Y+22	; 0x16
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	62 d3       	rcall	.+1732   	; 0x12f8 <vfscanf>
     c34:	2e 96       	adiw	r28, 0x0e	; 14
     c36:	e2 e0       	ldi	r30, 0x02	; 2
     c38:	a9 c5       	rjmp	.+2898   	; 0x178c <__epilogue_restores__+0x20>

00000c3a <vfprintf>:
     c3a:	ab e0       	ldi	r26, 0x0B	; 11
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e2 e2       	ldi	r30, 0x22	; 34
     c40:	f6 e0       	ldi	r31, 0x06	; 6
     c42:	78 c5       	rjmp	.+2800   	; 0x1734 <__prologue_saves__>
     c44:	6c 01       	movw	r12, r24
     c46:	7b 01       	movw	r14, r22
     c48:	8a 01       	movw	r16, r20
     c4a:	fc 01       	movw	r30, r24
     c4c:	17 82       	std	Z+7, r1	; 0x07
     c4e:	16 82       	std	Z+6, r1	; 0x06
     c50:	83 81       	ldd	r24, Z+3	; 0x03
     c52:	81 ff       	sbrs	r24, 1
     c54:	bf c1       	rjmp	.+894    	; 0xfd4 <vfprintf+0x39a>
     c56:	ce 01       	movw	r24, r28
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	3c 01       	movw	r6, r24
     c5c:	f6 01       	movw	r30, r12
     c5e:	93 81       	ldd	r25, Z+3	; 0x03
     c60:	f7 01       	movw	r30, r14
     c62:	93 fd       	sbrc	r25, 3
     c64:	85 91       	lpm	r24, Z+
     c66:	93 ff       	sbrs	r25, 3
     c68:	81 91       	ld	r24, Z+
     c6a:	7f 01       	movw	r14, r30
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <vfprintf+0x38>
     c70:	ad c1       	rjmp	.+858    	; 0xfcc <vfprintf+0x392>
     c72:	85 32       	cpi	r24, 0x25	; 37
     c74:	39 f4       	brne	.+14     	; 0xc84 <vfprintf+0x4a>
     c76:	93 fd       	sbrc	r25, 3
     c78:	85 91       	lpm	r24, Z+
     c7a:	93 ff       	sbrs	r25, 3
     c7c:	81 91       	ld	r24, Z+
     c7e:	7f 01       	movw	r14, r30
     c80:	85 32       	cpi	r24, 0x25	; 37
     c82:	21 f4       	brne	.+8      	; 0xc8c <vfprintf+0x52>
     c84:	b6 01       	movw	r22, r12
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9f d4       	rcall	.+2366   	; 0x15c8 <fputc>
     c8a:	e8 cf       	rjmp	.-48     	; 0xc5c <vfprintf+0x22>
     c8c:	91 2c       	mov	r9, r1
     c8e:	21 2c       	mov	r2, r1
     c90:	31 2c       	mov	r3, r1
     c92:	ff e1       	ldi	r31, 0x1F	; 31
     c94:	f3 15       	cp	r31, r3
     c96:	d8 f0       	brcs	.+54     	; 0xcce <vfprintf+0x94>
     c98:	8b 32       	cpi	r24, 0x2B	; 43
     c9a:	79 f0       	breq	.+30     	; 0xcba <vfprintf+0x80>
     c9c:	38 f4       	brcc	.+14     	; 0xcac <vfprintf+0x72>
     c9e:	80 32       	cpi	r24, 0x20	; 32
     ca0:	79 f0       	breq	.+30     	; 0xcc0 <vfprintf+0x86>
     ca2:	83 32       	cpi	r24, 0x23	; 35
     ca4:	a1 f4       	brne	.+40     	; 0xcce <vfprintf+0x94>
     ca6:	23 2d       	mov	r18, r3
     ca8:	20 61       	ori	r18, 0x10	; 16
     caa:	1d c0       	rjmp	.+58     	; 0xce6 <vfprintf+0xac>
     cac:	8d 32       	cpi	r24, 0x2D	; 45
     cae:	61 f0       	breq	.+24     	; 0xcc8 <vfprintf+0x8e>
     cb0:	80 33       	cpi	r24, 0x30	; 48
     cb2:	69 f4       	brne	.+26     	; 0xcce <vfprintf+0x94>
     cb4:	23 2d       	mov	r18, r3
     cb6:	21 60       	ori	r18, 0x01	; 1
     cb8:	16 c0       	rjmp	.+44     	; 0xce6 <vfprintf+0xac>
     cba:	83 2d       	mov	r24, r3
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	38 2e       	mov	r3, r24
     cc0:	e3 2d       	mov	r30, r3
     cc2:	e4 60       	ori	r30, 0x04	; 4
     cc4:	3e 2e       	mov	r3, r30
     cc6:	2a c0       	rjmp	.+84     	; 0xd1c <vfprintf+0xe2>
     cc8:	f3 2d       	mov	r31, r3
     cca:	f8 60       	ori	r31, 0x08	; 8
     ccc:	1d c0       	rjmp	.+58     	; 0xd08 <vfprintf+0xce>
     cce:	37 fc       	sbrc	r3, 7
     cd0:	2d c0       	rjmp	.+90     	; 0xd2c <vfprintf+0xf2>
     cd2:	20 ed       	ldi	r18, 0xD0	; 208
     cd4:	28 0f       	add	r18, r24
     cd6:	2a 30       	cpi	r18, 0x0A	; 10
     cd8:	40 f0       	brcs	.+16     	; 0xcea <vfprintf+0xb0>
     cda:	8e 32       	cpi	r24, 0x2E	; 46
     cdc:	b9 f4       	brne	.+46     	; 0xd0c <vfprintf+0xd2>
     cde:	36 fc       	sbrc	r3, 6
     ce0:	75 c1       	rjmp	.+746    	; 0xfcc <vfprintf+0x392>
     ce2:	23 2d       	mov	r18, r3
     ce4:	20 64       	ori	r18, 0x40	; 64
     ce6:	32 2e       	mov	r3, r18
     ce8:	19 c0       	rjmp	.+50     	; 0xd1c <vfprintf+0xe2>
     cea:	36 fe       	sbrs	r3, 6
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <vfprintf+0xc0>
     cee:	8a e0       	ldi	r24, 0x0A	; 10
     cf0:	98 9e       	mul	r9, r24
     cf2:	20 0d       	add	r18, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	92 2e       	mov	r9, r18
     cf8:	11 c0       	rjmp	.+34     	; 0xd1c <vfprintf+0xe2>
     cfa:	ea e0       	ldi	r30, 0x0A	; 10
     cfc:	2e 9e       	mul	r2, r30
     cfe:	20 0d       	add	r18, r0
     d00:	11 24       	eor	r1, r1
     d02:	22 2e       	mov	r2, r18
     d04:	f3 2d       	mov	r31, r3
     d06:	f0 62       	ori	r31, 0x20	; 32
     d08:	3f 2e       	mov	r3, r31
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <vfprintf+0xe2>
     d0c:	8c 36       	cpi	r24, 0x6C	; 108
     d0e:	21 f4       	brne	.+8      	; 0xd18 <vfprintf+0xde>
     d10:	83 2d       	mov	r24, r3
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	38 2e       	mov	r3, r24
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <vfprintf+0xe2>
     d18:	88 36       	cpi	r24, 0x68	; 104
     d1a:	41 f4       	brne	.+16     	; 0xd2c <vfprintf+0xf2>
     d1c:	f7 01       	movw	r30, r14
     d1e:	93 fd       	sbrc	r25, 3
     d20:	85 91       	lpm	r24, Z+
     d22:	93 ff       	sbrs	r25, 3
     d24:	81 91       	ld	r24, Z+
     d26:	7f 01       	movw	r14, r30
     d28:	81 11       	cpse	r24, r1
     d2a:	b3 cf       	rjmp	.-154    	; 0xc92 <vfprintf+0x58>
     d2c:	98 2f       	mov	r25, r24
     d2e:	9f 7d       	andi	r25, 0xDF	; 223
     d30:	95 54       	subi	r25, 0x45	; 69
     d32:	93 30       	cpi	r25, 0x03	; 3
     d34:	28 f4       	brcc	.+10     	; 0xd40 <vfprintf+0x106>
     d36:	0c 5f       	subi	r16, 0xFC	; 252
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	9f e3       	ldi	r25, 0x3F	; 63
     d3c:	99 83       	std	Y+1, r25	; 0x01
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <vfprintf+0x120>
     d40:	83 36       	cpi	r24, 0x63	; 99
     d42:	31 f0       	breq	.+12     	; 0xd50 <vfprintf+0x116>
     d44:	83 37       	cpi	r24, 0x73	; 115
     d46:	71 f0       	breq	.+28     	; 0xd64 <vfprintf+0x12a>
     d48:	83 35       	cpi	r24, 0x53	; 83
     d4a:	09 f0       	breq	.+2      	; 0xd4e <vfprintf+0x114>
     d4c:	55 c0       	rjmp	.+170    	; 0xdf8 <vfprintf+0x1be>
     d4e:	20 c0       	rjmp	.+64     	; 0xd90 <vfprintf+0x156>
     d50:	f8 01       	movw	r30, r16
     d52:	80 81       	ld	r24, Z
     d54:	89 83       	std	Y+1, r24	; 0x01
     d56:	0e 5f       	subi	r16, 0xFE	; 254
     d58:	1f 4f       	sbci	r17, 0xFF	; 255
     d5a:	88 24       	eor	r8, r8
     d5c:	83 94       	inc	r8
     d5e:	91 2c       	mov	r9, r1
     d60:	53 01       	movw	r10, r6
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <vfprintf+0x14e>
     d64:	28 01       	movw	r4, r16
     d66:	f2 e0       	ldi	r31, 0x02	; 2
     d68:	4f 0e       	add	r4, r31
     d6a:	51 1c       	adc	r5, r1
     d6c:	f8 01       	movw	r30, r16
     d6e:	a0 80       	ld	r10, Z
     d70:	b1 80       	ldd	r11, Z+1	; 0x01
     d72:	36 fe       	sbrs	r3, 6
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <vfprintf+0x142>
     d76:	69 2d       	mov	r22, r9
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <vfprintf+0x146>
     d7c:	6f ef       	ldi	r22, 0xFF	; 255
     d7e:	7f ef       	ldi	r23, 0xFF	; 255
     d80:	c5 01       	movw	r24, r10
     d82:	d9 d3       	rcall	.+1970   	; 0x1536 <strnlen>
     d84:	4c 01       	movw	r8, r24
     d86:	82 01       	movw	r16, r4
     d88:	f3 2d       	mov	r31, r3
     d8a:	ff 77       	andi	r31, 0x7F	; 127
     d8c:	3f 2e       	mov	r3, r31
     d8e:	15 c0       	rjmp	.+42     	; 0xdba <vfprintf+0x180>
     d90:	28 01       	movw	r4, r16
     d92:	22 e0       	ldi	r18, 0x02	; 2
     d94:	42 0e       	add	r4, r18
     d96:	51 1c       	adc	r5, r1
     d98:	f8 01       	movw	r30, r16
     d9a:	a0 80       	ld	r10, Z
     d9c:	b1 80       	ldd	r11, Z+1	; 0x01
     d9e:	36 fe       	sbrs	r3, 6
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <vfprintf+0x16e>
     da2:	69 2d       	mov	r22, r9
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <vfprintf+0x172>
     da8:	6f ef       	ldi	r22, 0xFF	; 255
     daa:	7f ef       	ldi	r23, 0xFF	; 255
     dac:	c5 01       	movw	r24, r10
     dae:	b8 d3       	rcall	.+1904   	; 0x1520 <strnlen_P>
     db0:	4c 01       	movw	r8, r24
     db2:	f3 2d       	mov	r31, r3
     db4:	f0 68       	ori	r31, 0x80	; 128
     db6:	3f 2e       	mov	r3, r31
     db8:	82 01       	movw	r16, r4
     dba:	33 fc       	sbrc	r3, 3
     dbc:	19 c0       	rjmp	.+50     	; 0xdf0 <vfprintf+0x1b6>
     dbe:	82 2d       	mov	r24, r2
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	88 16       	cp	r8, r24
     dc4:	99 06       	cpc	r9, r25
     dc6:	a0 f4       	brcc	.+40     	; 0xdf0 <vfprintf+0x1b6>
     dc8:	b6 01       	movw	r22, r12
     dca:	80 e2       	ldi	r24, 0x20	; 32
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	fc d3       	rcall	.+2040   	; 0x15c8 <fputc>
     dd0:	2a 94       	dec	r2
     dd2:	f5 cf       	rjmp	.-22     	; 0xdbe <vfprintf+0x184>
     dd4:	f5 01       	movw	r30, r10
     dd6:	37 fc       	sbrc	r3, 7
     dd8:	85 91       	lpm	r24, Z+
     dda:	37 fe       	sbrs	r3, 7
     ddc:	81 91       	ld	r24, Z+
     dde:	5f 01       	movw	r10, r30
     de0:	b6 01       	movw	r22, r12
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	f1 d3       	rcall	.+2018   	; 0x15c8 <fputc>
     de6:	21 10       	cpse	r2, r1
     de8:	2a 94       	dec	r2
     dea:	21 e0       	ldi	r18, 0x01	; 1
     dec:	82 1a       	sub	r8, r18
     dee:	91 08       	sbc	r9, r1
     df0:	81 14       	cp	r8, r1
     df2:	91 04       	cpc	r9, r1
     df4:	79 f7       	brne	.-34     	; 0xdd4 <vfprintf+0x19a>
     df6:	e1 c0       	rjmp	.+450    	; 0xfba <vfprintf+0x380>
     df8:	84 36       	cpi	r24, 0x64	; 100
     dfa:	11 f0       	breq	.+4      	; 0xe00 <vfprintf+0x1c6>
     dfc:	89 36       	cpi	r24, 0x69	; 105
     dfe:	39 f5       	brne	.+78     	; 0xe4e <vfprintf+0x214>
     e00:	f8 01       	movw	r30, r16
     e02:	37 fe       	sbrs	r3, 7
     e04:	07 c0       	rjmp	.+14     	; 0xe14 <vfprintf+0x1da>
     e06:	60 81       	ld	r22, Z
     e08:	71 81       	ldd	r23, Z+1	; 0x01
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	0c 5f       	subi	r16, 0xFC	; 252
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	08 c0       	rjmp	.+16     	; 0xe24 <vfprintf+0x1ea>
     e14:	60 81       	ld	r22, Z
     e16:	71 81       	ldd	r23, Z+1	; 0x01
     e18:	07 2e       	mov	r0, r23
     e1a:	00 0c       	add	r0, r0
     e1c:	88 0b       	sbc	r24, r24
     e1e:	99 0b       	sbc	r25, r25
     e20:	0e 5f       	subi	r16, 0xFE	; 254
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	f3 2d       	mov	r31, r3
     e26:	ff 76       	andi	r31, 0x6F	; 111
     e28:	3f 2e       	mov	r3, r31
     e2a:	97 ff       	sbrs	r25, 7
     e2c:	09 c0       	rjmp	.+18     	; 0xe40 <vfprintf+0x206>
     e2e:	90 95       	com	r25
     e30:	80 95       	com	r24
     e32:	70 95       	com	r23
     e34:	61 95       	neg	r22
     e36:	7f 4f       	sbci	r23, 0xFF	; 255
     e38:	8f 4f       	sbci	r24, 0xFF	; 255
     e3a:	9f 4f       	sbci	r25, 0xFF	; 255
     e3c:	f0 68       	ori	r31, 0x80	; 128
     e3e:	3f 2e       	mov	r3, r31
     e40:	2a e0       	ldi	r18, 0x0A	; 10
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	a3 01       	movw	r20, r6
     e46:	15 d4       	rcall	.+2090   	; 0x1672 <__ultoa_invert>
     e48:	88 2e       	mov	r8, r24
     e4a:	86 18       	sub	r8, r6
     e4c:	44 c0       	rjmp	.+136    	; 0xed6 <vfprintf+0x29c>
     e4e:	85 37       	cpi	r24, 0x75	; 117
     e50:	31 f4       	brne	.+12     	; 0xe5e <vfprintf+0x224>
     e52:	23 2d       	mov	r18, r3
     e54:	2f 7e       	andi	r18, 0xEF	; 239
     e56:	b2 2e       	mov	r11, r18
     e58:	2a e0       	ldi	r18, 0x0A	; 10
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	25 c0       	rjmp	.+74     	; 0xea8 <vfprintf+0x26e>
     e5e:	93 2d       	mov	r25, r3
     e60:	99 7f       	andi	r25, 0xF9	; 249
     e62:	b9 2e       	mov	r11, r25
     e64:	8f 36       	cpi	r24, 0x6F	; 111
     e66:	c1 f0       	breq	.+48     	; 0xe98 <vfprintf+0x25e>
     e68:	18 f4       	brcc	.+6      	; 0xe70 <vfprintf+0x236>
     e6a:	88 35       	cpi	r24, 0x58	; 88
     e6c:	79 f0       	breq	.+30     	; 0xe8c <vfprintf+0x252>
     e6e:	ae c0       	rjmp	.+348    	; 0xfcc <vfprintf+0x392>
     e70:	80 37       	cpi	r24, 0x70	; 112
     e72:	19 f0       	breq	.+6      	; 0xe7a <vfprintf+0x240>
     e74:	88 37       	cpi	r24, 0x78	; 120
     e76:	21 f0       	breq	.+8      	; 0xe80 <vfprintf+0x246>
     e78:	a9 c0       	rjmp	.+338    	; 0xfcc <vfprintf+0x392>
     e7a:	e9 2f       	mov	r30, r25
     e7c:	e0 61       	ori	r30, 0x10	; 16
     e7e:	be 2e       	mov	r11, r30
     e80:	b4 fe       	sbrs	r11, 4
     e82:	0d c0       	rjmp	.+26     	; 0xe9e <vfprintf+0x264>
     e84:	fb 2d       	mov	r31, r11
     e86:	f4 60       	ori	r31, 0x04	; 4
     e88:	bf 2e       	mov	r11, r31
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <vfprintf+0x264>
     e8c:	34 fe       	sbrs	r3, 4
     e8e:	0a c0       	rjmp	.+20     	; 0xea4 <vfprintf+0x26a>
     e90:	29 2f       	mov	r18, r25
     e92:	26 60       	ori	r18, 0x06	; 6
     e94:	b2 2e       	mov	r11, r18
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <vfprintf+0x26a>
     e98:	28 e0       	ldi	r18, 0x08	; 8
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <vfprintf+0x26e>
     e9e:	20 e1       	ldi	r18, 0x10	; 16
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <vfprintf+0x26e>
     ea4:	20 e1       	ldi	r18, 0x10	; 16
     ea6:	32 e0       	ldi	r19, 0x02	; 2
     ea8:	f8 01       	movw	r30, r16
     eaa:	b7 fe       	sbrs	r11, 7
     eac:	07 c0       	rjmp	.+14     	; 0xebc <vfprintf+0x282>
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	0c 5f       	subi	r16, 0xFC	; 252
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <vfprintf+0x28e>
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 5f       	subi	r16, 0xFE	; 254
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	a3 01       	movw	r20, r6
     eca:	d3 d3       	rcall	.+1958   	; 0x1672 <__ultoa_invert>
     ecc:	88 2e       	mov	r8, r24
     ece:	86 18       	sub	r8, r6
     ed0:	fb 2d       	mov	r31, r11
     ed2:	ff 77       	andi	r31, 0x7F	; 127
     ed4:	3f 2e       	mov	r3, r31
     ed6:	36 fe       	sbrs	r3, 6
     ed8:	0d c0       	rjmp	.+26     	; 0xef4 <vfprintf+0x2ba>
     eda:	23 2d       	mov	r18, r3
     edc:	2e 7f       	andi	r18, 0xFE	; 254
     ede:	a2 2e       	mov	r10, r18
     ee0:	89 14       	cp	r8, r9
     ee2:	58 f4       	brcc	.+22     	; 0xefa <vfprintf+0x2c0>
     ee4:	34 fe       	sbrs	r3, 4
     ee6:	0b c0       	rjmp	.+22     	; 0xefe <vfprintf+0x2c4>
     ee8:	32 fc       	sbrc	r3, 2
     eea:	09 c0       	rjmp	.+18     	; 0xefe <vfprintf+0x2c4>
     eec:	83 2d       	mov	r24, r3
     eee:	8e 7e       	andi	r24, 0xEE	; 238
     ef0:	a8 2e       	mov	r10, r24
     ef2:	05 c0       	rjmp	.+10     	; 0xefe <vfprintf+0x2c4>
     ef4:	b8 2c       	mov	r11, r8
     ef6:	a3 2c       	mov	r10, r3
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <vfprintf+0x2c6>
     efa:	b8 2c       	mov	r11, r8
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <vfprintf+0x2c6>
     efe:	b9 2c       	mov	r11, r9
     f00:	a4 fe       	sbrs	r10, 4
     f02:	0f c0       	rjmp	.+30     	; 0xf22 <vfprintf+0x2e8>
     f04:	fe 01       	movw	r30, r28
     f06:	e8 0d       	add	r30, r8
     f08:	f1 1d       	adc	r31, r1
     f0a:	80 81       	ld	r24, Z
     f0c:	80 33       	cpi	r24, 0x30	; 48
     f0e:	21 f4       	brne	.+8      	; 0xf18 <vfprintf+0x2de>
     f10:	9a 2d       	mov	r25, r10
     f12:	99 7e       	andi	r25, 0xE9	; 233
     f14:	a9 2e       	mov	r10, r25
     f16:	09 c0       	rjmp	.+18     	; 0xf2a <vfprintf+0x2f0>
     f18:	a2 fe       	sbrs	r10, 2
     f1a:	06 c0       	rjmp	.+12     	; 0xf28 <vfprintf+0x2ee>
     f1c:	b3 94       	inc	r11
     f1e:	b3 94       	inc	r11
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <vfprintf+0x2f0>
     f22:	8a 2d       	mov	r24, r10
     f24:	86 78       	andi	r24, 0x86	; 134
     f26:	09 f0       	breq	.+2      	; 0xf2a <vfprintf+0x2f0>
     f28:	b3 94       	inc	r11
     f2a:	a3 fc       	sbrc	r10, 3
     f2c:	10 c0       	rjmp	.+32     	; 0xf4e <vfprintf+0x314>
     f2e:	a0 fe       	sbrs	r10, 0
     f30:	06 c0       	rjmp	.+12     	; 0xf3e <vfprintf+0x304>
     f32:	b2 14       	cp	r11, r2
     f34:	80 f4       	brcc	.+32     	; 0xf56 <vfprintf+0x31c>
     f36:	28 0c       	add	r2, r8
     f38:	92 2c       	mov	r9, r2
     f3a:	9b 18       	sub	r9, r11
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <vfprintf+0x31e>
     f3e:	b2 14       	cp	r11, r2
     f40:	58 f4       	brcc	.+22     	; 0xf58 <vfprintf+0x31e>
     f42:	b6 01       	movw	r22, r12
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	3f d3       	rcall	.+1662   	; 0x15c8 <fputc>
     f4a:	b3 94       	inc	r11
     f4c:	f8 cf       	rjmp	.-16     	; 0xf3e <vfprintf+0x304>
     f4e:	b2 14       	cp	r11, r2
     f50:	18 f4       	brcc	.+6      	; 0xf58 <vfprintf+0x31e>
     f52:	2b 18       	sub	r2, r11
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <vfprintf+0x320>
     f56:	98 2c       	mov	r9, r8
     f58:	21 2c       	mov	r2, r1
     f5a:	a4 fe       	sbrs	r10, 4
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <vfprintf+0x342>
     f5e:	b6 01       	movw	r22, r12
     f60:	80 e3       	ldi	r24, 0x30	; 48
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	31 d3       	rcall	.+1634   	; 0x15c8 <fputc>
     f66:	a2 fe       	sbrs	r10, 2
     f68:	16 c0       	rjmp	.+44     	; 0xf96 <vfprintf+0x35c>
     f6a:	a1 fc       	sbrc	r10, 1
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <vfprintf+0x33a>
     f6e:	88 e7       	ldi	r24, 0x78	; 120
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0x33e>
     f74:	88 e5       	ldi	r24, 0x58	; 88
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	b6 01       	movw	r22, r12
     f7a:	0c c0       	rjmp	.+24     	; 0xf94 <vfprintf+0x35a>
     f7c:	8a 2d       	mov	r24, r10
     f7e:	86 78       	andi	r24, 0x86	; 134
     f80:	51 f0       	breq	.+20     	; 0xf96 <vfprintf+0x35c>
     f82:	a1 fe       	sbrs	r10, 1
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <vfprintf+0x350>
     f86:	8b e2       	ldi	r24, 0x2B	; 43
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <vfprintf+0x352>
     f8a:	80 e2       	ldi	r24, 0x20	; 32
     f8c:	a7 fc       	sbrc	r10, 7
     f8e:	8d e2       	ldi	r24, 0x2D	; 45
     f90:	b6 01       	movw	r22, r12
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	19 d3       	rcall	.+1586   	; 0x15c8 <fputc>
     f96:	89 14       	cp	r8, r9
     f98:	30 f4       	brcc	.+12     	; 0xfa6 <vfprintf+0x36c>
     f9a:	b6 01       	movw	r22, r12
     f9c:	80 e3       	ldi	r24, 0x30	; 48
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	13 d3       	rcall	.+1574   	; 0x15c8 <fputc>
     fa2:	9a 94       	dec	r9
     fa4:	f8 cf       	rjmp	.-16     	; 0xf96 <vfprintf+0x35c>
     fa6:	8a 94       	dec	r8
     fa8:	f3 01       	movw	r30, r6
     faa:	e8 0d       	add	r30, r8
     fac:	f1 1d       	adc	r31, r1
     fae:	80 81       	ld	r24, Z
     fb0:	b6 01       	movw	r22, r12
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	09 d3       	rcall	.+1554   	; 0x15c8 <fputc>
     fb6:	81 10       	cpse	r8, r1
     fb8:	f6 cf       	rjmp	.-20     	; 0xfa6 <vfprintf+0x36c>
     fba:	22 20       	and	r2, r2
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <vfprintf+0x386>
     fbe:	4e ce       	rjmp	.-868    	; 0xc5c <vfprintf+0x22>
     fc0:	b6 01       	movw	r22, r12
     fc2:	80 e2       	ldi	r24, 0x20	; 32
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	00 d3       	rcall	.+1536   	; 0x15c8 <fputc>
     fc8:	2a 94       	dec	r2
     fca:	f7 cf       	rjmp	.-18     	; 0xfba <vfprintf+0x380>
     fcc:	f6 01       	movw	r30, r12
     fce:	86 81       	ldd	r24, Z+6	; 0x06
     fd0:	97 81       	ldd	r25, Z+7	; 0x07
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <vfprintf+0x39e>
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	9f ef       	ldi	r25, 0xFF	; 255
     fd8:	2b 96       	adiw	r28, 0x0b	; 11
     fda:	e2 e1       	ldi	r30, 0x12	; 18
     fdc:	c7 c3       	rjmp	.+1934   	; 0x176c <__epilogue_restores__>

00000fde <putval>:
     fde:	20 fd       	sbrc	r18, 0
     fe0:	09 c0       	rjmp	.+18     	; 0xff4 <putval+0x16>
     fe2:	fc 01       	movw	r30, r24
     fe4:	23 fd       	sbrc	r18, 3
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <putval+0x14>
     fe8:	22 ff       	sbrs	r18, 2
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <putval+0x12>
     fec:	73 83       	std	Z+3, r23	; 0x03
     fee:	62 83       	std	Z+2, r22	; 0x02
     ff0:	51 83       	std	Z+1, r21	; 0x01
     ff2:	40 83       	st	Z, r20
     ff4:	08 95       	ret

00000ff6 <mulacc>:
     ff6:	44 fd       	sbrc	r20, 4
     ff8:	17 c0       	rjmp	.+46     	; 0x1028 <mulacc+0x32>
     ffa:	46 fd       	sbrc	r20, 6
     ffc:	17 c0       	rjmp	.+46     	; 0x102c <mulacc+0x36>
     ffe:	ab 01       	movw	r20, r22
    1000:	bc 01       	movw	r22, r24
    1002:	da 01       	movw	r26, r20
    1004:	fb 01       	movw	r30, r22
    1006:	aa 0f       	add	r26, r26
    1008:	bb 1f       	adc	r27, r27
    100a:	ee 1f       	adc	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	10 94       	com	r1
    1010:	d1 f7       	brne	.-12     	; 0x1006 <mulacc+0x10>
    1012:	4a 0f       	add	r20, r26
    1014:	5b 1f       	adc	r21, r27
    1016:	6e 1f       	adc	r22, r30
    1018:	7f 1f       	adc	r23, r31
    101a:	cb 01       	movw	r24, r22
    101c:	ba 01       	movw	r22, r20
    101e:	66 0f       	add	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	88 1f       	adc	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	09 c0       	rjmp	.+18     	; 0x103a <mulacc+0x44>
    1028:	33 e0       	ldi	r19, 0x03	; 3
    102a:	01 c0       	rjmp	.+2      	; 0x102e <mulacc+0x38>
    102c:	34 e0       	ldi	r19, 0x04	; 4
    102e:	66 0f       	add	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	31 50       	subi	r19, 0x01	; 1
    1038:	d1 f7       	brne	.-12     	; 0x102e <mulacc+0x38>
    103a:	62 0f       	add	r22, r18
    103c:	71 1d       	adc	r23, r1
    103e:	81 1d       	adc	r24, r1
    1040:	91 1d       	adc	r25, r1
    1042:	08 95       	ret

00001044 <skip_spaces>:
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	8c 01       	movw	r16, r24
    104e:	c8 01       	movw	r24, r16
    1050:	7d d2       	rcall	.+1274   	; 0x154c <fgetc>
    1052:	ec 01       	movw	r28, r24
    1054:	97 fd       	sbrc	r25, 7
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <skip_spaces+0x20>
    1058:	50 d2       	rcall	.+1184   	; 0x14fa <isspace>
    105a:	89 2b       	or	r24, r25
    105c:	c1 f7       	brne	.-16     	; 0x104e <skip_spaces+0xa>
    105e:	b8 01       	movw	r22, r16
    1060:	ce 01       	movw	r24, r28
    1062:	ee d2       	rcall	.+1500   	; 0x1640 <ungetc>
    1064:	ce 01       	movw	r24, r28
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <conv_int>:
    1070:	8f 92       	push	r8
    1072:	9f 92       	push	r9
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	8c 01       	movw	r16, r24
    1086:	d6 2f       	mov	r29, r22
    1088:	7a 01       	movw	r14, r20
    108a:	b2 2e       	mov	r11, r18
    108c:	5f d2       	rcall	.+1214   	; 0x154c <fgetc>
    108e:	9c 01       	movw	r18, r24
    1090:	33 27       	eor	r19, r19
    1092:	2b 32       	cpi	r18, 0x2B	; 43
    1094:	31 05       	cpc	r19, r1
    1096:	31 f0       	breq	.+12     	; 0x10a4 <conv_int+0x34>
    1098:	2d 32       	cpi	r18, 0x2D	; 45
    109a:	31 05       	cpc	r19, r1
    109c:	59 f4       	brne	.+22     	; 0x10b4 <conv_int+0x44>
    109e:	8b 2d       	mov	r24, r11
    10a0:	80 68       	ori	r24, 0x80	; 128
    10a2:	b8 2e       	mov	r11, r24
    10a4:	d1 50       	subi	r29, 0x01	; 1
    10a6:	11 f4       	brne	.+4      	; 0x10ac <conv_int+0x3c>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	61 c0       	rjmp	.+194    	; 0x116e <conv_int+0xfe>
    10ac:	c8 01       	movw	r24, r16
    10ae:	4e d2       	rcall	.+1180   	; 0x154c <fgetc>
    10b0:	97 fd       	sbrc	r25, 7
    10b2:	fa cf       	rjmp	.-12     	; 0x10a8 <conv_int+0x38>
    10b4:	cb 2d       	mov	r28, r11
    10b6:	cd 7f       	andi	r28, 0xFD	; 253
    10b8:	2b 2d       	mov	r18, r11
    10ba:	20 73       	andi	r18, 0x30	; 48
    10bc:	f9 f4       	brne	.+62     	; 0x10fc <conv_int+0x8c>
    10be:	80 33       	cpi	r24, 0x30	; 48
    10c0:	e9 f4       	brne	.+58     	; 0x10fc <conv_int+0x8c>
    10c2:	aa 24       	eor	r10, r10
    10c4:	aa 94       	dec	r10
    10c6:	ad 0e       	add	r10, r29
    10c8:	09 f4       	brne	.+2      	; 0x10cc <conv_int+0x5c>
    10ca:	3e c0       	rjmp	.+124    	; 0x1148 <conv_int+0xd8>
    10cc:	c8 01       	movw	r24, r16
    10ce:	3e d2       	rcall	.+1148   	; 0x154c <fgetc>
    10d0:	97 fd       	sbrc	r25, 7
    10d2:	3a c0       	rjmp	.+116    	; 0x1148 <conv_int+0xd8>
    10d4:	9c 01       	movw	r18, r24
    10d6:	2f 7d       	andi	r18, 0xDF	; 223
    10d8:	33 27       	eor	r19, r19
    10da:	28 35       	cpi	r18, 0x58	; 88
    10dc:	31 05       	cpc	r19, r1
    10de:	41 f4       	brne	.+16     	; 0x10f0 <conv_int+0x80>
    10e0:	c2 64       	ori	r28, 0x42	; 66
    10e2:	d2 50       	subi	r29, 0x02	; 2
    10e4:	89 f1       	breq	.+98     	; 0x1148 <conv_int+0xd8>
    10e6:	c8 01       	movw	r24, r16
    10e8:	31 d2       	rcall	.+1122   	; 0x154c <fgetc>
    10ea:	97 ff       	sbrs	r25, 7
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <conv_int+0x8c>
    10ee:	2c c0       	rjmp	.+88     	; 0x1148 <conv_int+0xd8>
    10f0:	b6 fe       	sbrs	r11, 6
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <conv_int+0x88>
    10f4:	c2 60       	ori	r28, 0x02	; 2
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <conv_int+0x8a>
    10f8:	c2 61       	ori	r28, 0x12	; 18
    10fa:	da 2d       	mov	r29, r10
    10fc:	81 2c       	mov	r8, r1
    10fe:	91 2c       	mov	r9, r1
    1100:	54 01       	movw	r10, r8
    1102:	20 ed       	ldi	r18, 0xD0	; 208
    1104:	28 0f       	add	r18, r24
    1106:	28 30       	cpi	r18, 0x08	; 8
    1108:	78 f0       	brcs	.+30     	; 0x1128 <conv_int+0xb8>
    110a:	c4 ff       	sbrs	r28, 4
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <conv_int+0xa4>
    110e:	b8 01       	movw	r22, r16
    1110:	97 d2       	rcall	.+1326   	; 0x1640 <ungetc>
    1112:	17 c0       	rjmp	.+46     	; 0x1142 <conv_int+0xd2>
    1114:	2a 30       	cpi	r18, 0x0A	; 10
    1116:	40 f0       	brcs	.+16     	; 0x1128 <conv_int+0xb8>
    1118:	c6 ff       	sbrs	r28, 6
    111a:	f9 cf       	rjmp	.-14     	; 0x110e <conv_int+0x9e>
    111c:	2f 7d       	andi	r18, 0xDF	; 223
    111e:	3f ee       	ldi	r19, 0xEF	; 239
    1120:	32 0f       	add	r19, r18
    1122:	36 30       	cpi	r19, 0x06	; 6
    1124:	a0 f7       	brcc	.-24     	; 0x110e <conv_int+0x9e>
    1126:	27 50       	subi	r18, 0x07	; 7
    1128:	4c 2f       	mov	r20, r28
    112a:	c5 01       	movw	r24, r10
    112c:	b4 01       	movw	r22, r8
    112e:	63 df       	rcall	.-314    	; 0xff6 <mulacc>
    1130:	4b 01       	movw	r8, r22
    1132:	5c 01       	movw	r10, r24
    1134:	c2 60       	ori	r28, 0x02	; 2
    1136:	d1 50       	subi	r29, 0x01	; 1
    1138:	51 f0       	breq	.+20     	; 0x114e <conv_int+0xde>
    113a:	c8 01       	movw	r24, r16
    113c:	07 d2       	rcall	.+1038   	; 0x154c <fgetc>
    113e:	97 ff       	sbrs	r25, 7
    1140:	e0 cf       	rjmp	.-64     	; 0x1102 <conv_int+0x92>
    1142:	c1 fd       	sbrc	r28, 1
    1144:	04 c0       	rjmp	.+8      	; 0x114e <conv_int+0xde>
    1146:	b0 cf       	rjmp	.-160    	; 0x10a8 <conv_int+0x38>
    1148:	81 2c       	mov	r8, r1
    114a:	91 2c       	mov	r9, r1
    114c:	54 01       	movw	r10, r8
    114e:	c7 ff       	sbrs	r28, 7
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <conv_int+0xf2>
    1152:	b0 94       	com	r11
    1154:	a0 94       	com	r10
    1156:	90 94       	com	r9
    1158:	80 94       	com	r8
    115a:	81 1c       	adc	r8, r1
    115c:	91 1c       	adc	r9, r1
    115e:	a1 1c       	adc	r10, r1
    1160:	b1 1c       	adc	r11, r1
    1162:	2c 2f       	mov	r18, r28
    1164:	b5 01       	movw	r22, r10
    1166:	a4 01       	movw	r20, r8
    1168:	c7 01       	movw	r24, r14
    116a:	39 df       	rcall	.-398    	; 0xfde <putval>
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	08 95       	ret

00001184 <conv_brk>:
    1184:	a0 e2       	ldi	r26, 0x20	; 32
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e7 ec       	ldi	r30, 0xC7	; 199
    118a:	f8 e0       	ldi	r31, 0x08	; 8
    118c:	d6 c2       	rjmp	.+1452   	; 0x173a <__prologue_saves__+0x6>
    118e:	5c 01       	movw	r10, r24
    1190:	96 2e       	mov	r9, r22
    1192:	7a 01       	movw	r14, r20
    1194:	f9 01       	movw	r30, r18
    1196:	8e 01       	movw	r16, r28
    1198:	0f 5f       	subi	r16, 0xFF	; 255
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	68 01       	movw	r12, r16
    119e:	80 e2       	ldi	r24, 0x20	; 32
    11a0:	d8 01       	movw	r26, r16
    11a2:	1d 92       	st	X+, r1
    11a4:	8a 95       	dec	r24
    11a6:	e9 f7       	brne	.-6      	; 0x11a2 <conv_brk+0x1e>
    11a8:	d5 01       	movw	r26, r10
    11aa:	13 96       	adiw	r26, 0x03	; 3
    11ac:	8c 90       	ld	r8, X
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	61 2c       	mov	r6, r1
    11b4:	71 2c       	mov	r7, r1
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	61 e0       	ldi	r22, 0x01	; 1
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	83 fc       	sbrc	r8, 3
    11be:	25 91       	lpm	r18, Z+
    11c0:	83 fe       	sbrs	r8, 3
    11c2:	21 91       	ld	r18, Z+
    11c4:	8f 01       	movw	r16, r30
    11c6:	52 2e       	mov	r5, r18
    11c8:	21 11       	cpse	r18, r1
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <conv_brk+0x4e>
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	90 c0       	rjmp	.+288    	; 0x12f2 <conv_brk+0x16e>
    11d2:	2e 35       	cpi	r18, 0x5E	; 94
    11d4:	11 f4       	brne	.+4      	; 0x11da <conv_brk+0x56>
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	51 f1       	breq	.+84     	; 0x122e <conv_brk+0xaa>
    11da:	43 2f       	mov	r20, r19
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	48 17       	cp	r20, r24
    11e0:	59 07       	cpc	r21, r25
    11e2:	3c f4       	brge	.+14     	; 0x11f2 <conv_brk+0x6e>
    11e4:	2d 35       	cpi	r18, 0x5D	; 93
    11e6:	59 f1       	breq	.+86     	; 0x123e <conv_brk+0xba>
    11e8:	2d 32       	cpi	r18, 0x2D	; 45
    11ea:	19 f4       	brne	.+6      	; 0x11f2 <conv_brk+0x6e>
    11ec:	77 20       	and	r7, r7
    11ee:	09 f1       	breq	.+66     	; 0x1232 <conv_brk+0xae>
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <conv_brk+0x74>
    11f2:	77 20       	and	r7, r7
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <conv_brk+0x74>
    11f6:	68 c0       	rjmp	.+208    	; 0x12c8 <conv_brk+0x144>
    11f8:	45 2d       	mov	r20, r5
    11fa:	46 95       	lsr	r20
    11fc:	46 95       	lsr	r20
    11fe:	46 95       	lsr	r20
    1200:	d6 01       	movw	r26, r12
    1202:	a4 0f       	add	r26, r20
    1204:	b1 1d       	adc	r27, r1
    1206:	45 2d       	mov	r20, r5
    1208:	47 70       	andi	r20, 0x07	; 7
    120a:	8b 01       	movw	r16, r22
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <conv_brk+0x8e>
    120e:	00 0f       	add	r16, r16
    1210:	11 1f       	adc	r17, r17
    1212:	4a 95       	dec	r20
    1214:	e2 f7       	brpl	.-8      	; 0x120e <conv_brk+0x8a>
    1216:	a8 01       	movw	r20, r16
    1218:	5c 91       	ld	r21, X
    121a:	45 2b       	or	r20, r21
    121c:	4c 93       	st	X, r20
    121e:	65 14       	cp	r6, r5
    1220:	59 f0       	breq	.+22     	; 0x1238 <conv_brk+0xb4>
    1222:	56 14       	cp	r5, r6
    1224:	10 f4       	brcc	.+4      	; 0x122a <conv_brk+0xa6>
    1226:	53 94       	inc	r5
    1228:	e7 cf       	rjmp	.-50     	; 0x11f8 <conv_brk+0x74>
    122a:	5a 94       	dec	r5
    122c:	e5 cf       	rjmp	.-54     	; 0x11f8 <conv_brk+0x74>
    122e:	31 e0       	ldi	r19, 0x01	; 1
    1230:	04 c0       	rjmp	.+8      	; 0x123a <conv_brk+0xb6>
    1232:	77 24       	eor	r7, r7
    1234:	73 94       	inc	r7
    1236:	01 c0       	rjmp	.+2      	; 0x123a <conv_brk+0xb6>
    1238:	71 2c       	mov	r7, r1
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	bf cf       	rjmp	.-130    	; 0x11bc <conv_brk+0x38>
    123e:	77 20       	and	r7, r7
    1240:	19 f0       	breq	.+6      	; 0x1248 <conv_brk+0xc4>
    1242:	8e 81       	ldd	r24, Y+6	; 0x06
    1244:	80 62       	ori	r24, 0x20	; 32
    1246:	8e 83       	std	Y+6, r24	; 0x06
    1248:	31 11       	cpse	r19, r1
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <conv_brk+0xce>
    124c:	88 24       	eor	r8, r8
    124e:	83 94       	inc	r8
    1250:	17 c0       	rjmp	.+46     	; 0x1280 <conv_brk+0xfc>
    1252:	f6 01       	movw	r30, r12
    1254:	9e 01       	movw	r18, r28
    1256:	2f 5d       	subi	r18, 0xDF	; 223
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	80 95       	com	r24
    125e:	81 93       	st	Z+, r24
    1260:	2e 17       	cp	r18, r30
    1262:	3f 07       	cpc	r19, r31
    1264:	d1 f7       	brne	.-12     	; 0x125a <conv_brk+0xd6>
    1266:	f2 cf       	rjmp	.-28     	; 0x124c <conv_brk+0xc8>
    1268:	e1 14       	cp	r14, r1
    126a:	f1 04       	cpc	r15, r1
    126c:	29 f0       	breq	.+10     	; 0x1278 <conv_brk+0xf4>
    126e:	d7 01       	movw	r26, r14
    1270:	8c 93       	st	X, r24
    1272:	f7 01       	movw	r30, r14
    1274:	31 96       	adiw	r30, 0x01	; 1
    1276:	7f 01       	movw	r14, r30
    1278:	9a 94       	dec	r9
    127a:	81 2c       	mov	r8, r1
    127c:	99 20       	and	r9, r9
    127e:	e9 f0       	breq	.+58     	; 0x12ba <conv_brk+0x136>
    1280:	c5 01       	movw	r24, r10
    1282:	64 d1       	rcall	.+712    	; 0x154c <fgetc>
    1284:	97 fd       	sbrc	r25, 7
    1286:	17 c0       	rjmp	.+46     	; 0x12b6 <conv_brk+0x132>
    1288:	fc 01       	movw	r30, r24
    128a:	ff 27       	eor	r31, r31
    128c:	23 e0       	ldi	r18, 0x03	; 3
    128e:	f5 95       	asr	r31
    1290:	e7 95       	ror	r30
    1292:	2a 95       	dec	r18
    1294:	e1 f7       	brne	.-8      	; 0x128e <conv_brk+0x10a>
    1296:	ec 0d       	add	r30, r12
    1298:	fd 1d       	adc	r31, r13
    129a:	20 81       	ld	r18, Z
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	ac 01       	movw	r20, r24
    12a0:	47 70       	andi	r20, 0x07	; 7
    12a2:	55 27       	eor	r21, r21
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <conv_brk+0x126>
    12a6:	35 95       	asr	r19
    12a8:	27 95       	ror	r18
    12aa:	4a 95       	dec	r20
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <conv_brk+0x122>
    12ae:	20 fd       	sbrc	r18, 0
    12b0:	db cf       	rjmp	.-74     	; 0x1268 <conv_brk+0xe4>
    12b2:	b5 01       	movw	r22, r10
    12b4:	c5 d1       	rcall	.+906    	; 0x1640 <ungetc>
    12b6:	81 10       	cpse	r8, r1
    12b8:	89 cf       	rjmp	.-238    	; 0x11cc <conv_brk+0x48>
    12ba:	e1 14       	cp	r14, r1
    12bc:	f1 04       	cpc	r15, r1
    12be:	11 f0       	breq	.+4      	; 0x12c4 <conv_brk+0x140>
    12c0:	d7 01       	movw	r26, r14
    12c2:	1c 92       	st	X, r1
    12c4:	c8 01       	movw	r24, r16
    12c6:	15 c0       	rjmp	.+42     	; 0x12f2 <conv_brk+0x16e>
    12c8:	42 2f       	mov	r20, r18
    12ca:	46 95       	lsr	r20
    12cc:	46 95       	lsr	r20
    12ce:	46 95       	lsr	r20
    12d0:	d6 01       	movw	r26, r12
    12d2:	a4 0f       	add	r26, r20
    12d4:	b1 1d       	adc	r27, r1
    12d6:	42 2f       	mov	r20, r18
    12d8:	47 70       	andi	r20, 0x07	; 7
    12da:	8b 01       	movw	r16, r22
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <conv_brk+0x15e>
    12de:	00 0f       	add	r16, r16
    12e0:	11 1f       	adc	r17, r17
    12e2:	4a 95       	dec	r20
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <conv_brk+0x15a>
    12e6:	a8 01       	movw	r20, r16
    12e8:	5c 91       	ld	r21, X
    12ea:	45 2b       	or	r20, r21
    12ec:	4c 93       	st	X, r20
    12ee:	62 2e       	mov	r6, r18
    12f0:	a4 cf       	rjmp	.-184    	; 0x123a <conv_brk+0xb6>
    12f2:	a0 96       	adiw	r28, 0x20	; 32
    12f4:	ef e0       	ldi	r30, 0x0F	; 15
    12f6:	3d c2       	rjmp	.+1146   	; 0x1772 <__epilogue_restores__+0x6>

000012f8 <vfscanf>:
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e1 e8       	ldi	r30, 0x81	; 129
    12fe:	f9 e0       	ldi	r31, 0x09	; 9
    1300:	1c c2       	rjmp	.+1080   	; 0x173a <__prologue_saves__+0x6>
    1302:	6c 01       	movw	r12, r24
    1304:	eb 01       	movw	r28, r22
    1306:	5a 01       	movw	r10, r20
    1308:	fc 01       	movw	r30, r24
    130a:	17 82       	std	Z+7, r1	; 0x07
    130c:	16 82       	std	Z+6, r1	; 0x06
    130e:	51 2c       	mov	r5, r1
    1310:	f6 01       	movw	r30, r12
    1312:	e3 80       	ldd	r14, Z+3	; 0x03
    1314:	fe 01       	movw	r30, r28
    1316:	e3 fc       	sbrc	r14, 3
    1318:	85 91       	lpm	r24, Z+
    131a:	e3 fe       	sbrs	r14, 3
    131c:	81 91       	ld	r24, Z+
    131e:	18 2f       	mov	r17, r24
    1320:	ef 01       	movw	r28, r30
    1322:	88 23       	and	r24, r24
    1324:	09 f4       	brne	.+2      	; 0x1328 <vfscanf+0x30>
    1326:	e0 c0       	rjmp	.+448    	; 0x14e8 <vfscanf+0x1f0>
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	e7 d0       	rcall	.+462    	; 0x14fa <isspace>
    132c:	89 2b       	or	r24, r25
    132e:	19 f0       	breq	.+6      	; 0x1336 <vfscanf+0x3e>
    1330:	c6 01       	movw	r24, r12
    1332:	88 de       	rcall	.-752    	; 0x1044 <skip_spaces>
    1334:	ed cf       	rjmp	.-38     	; 0x1310 <vfscanf+0x18>
    1336:	15 32       	cpi	r17, 0x25	; 37
    1338:	41 f4       	brne	.+16     	; 0x134a <vfscanf+0x52>
    133a:	fe 01       	movw	r30, r28
    133c:	e3 fc       	sbrc	r14, 3
    133e:	15 91       	lpm	r17, Z+
    1340:	e3 fe       	sbrs	r14, 3
    1342:	11 91       	ld	r17, Z+
    1344:	ef 01       	movw	r28, r30
    1346:	15 32       	cpi	r17, 0x25	; 37
    1348:	71 f4       	brne	.+28     	; 0x1366 <vfscanf+0x6e>
    134a:	c6 01       	movw	r24, r12
    134c:	ff d0       	rcall	.+510    	; 0x154c <fgetc>
    134e:	97 fd       	sbrc	r25, 7
    1350:	c9 c0       	rjmp	.+402    	; 0x14e4 <vfscanf+0x1ec>
    1352:	41 2f       	mov	r20, r17
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	9c 01       	movw	r18, r24
    1358:	33 27       	eor	r19, r19
    135a:	24 17       	cp	r18, r20
    135c:	35 07       	cpc	r19, r21
    135e:	c1 f2       	breq	.-80     	; 0x1310 <vfscanf+0x18>
    1360:	b6 01       	movw	r22, r12
    1362:	6e d1       	rcall	.+732    	; 0x1640 <ungetc>
    1364:	c1 c0       	rjmp	.+386    	; 0x14e8 <vfscanf+0x1f0>
    1366:	1a 32       	cpi	r17, 0x2A	; 42
    1368:	39 f4       	brne	.+14     	; 0x1378 <vfscanf+0x80>
    136a:	e3 fc       	sbrc	r14, 3
    136c:	15 91       	lpm	r17, Z+
    136e:	e3 fe       	sbrs	r14, 3
    1370:	11 91       	ld	r17, Z+
    1372:	ef 01       	movw	r28, r30
    1374:	01 e0       	ldi	r16, 0x01	; 1
    1376:	01 c0       	rjmp	.+2      	; 0x137a <vfscanf+0x82>
    1378:	00 e0       	ldi	r16, 0x00	; 0
    137a:	f1 2c       	mov	r15, r1
    137c:	20 ed       	ldi	r18, 0xD0	; 208
    137e:	21 0f       	add	r18, r17
    1380:	2a 30       	cpi	r18, 0x0A	; 10
    1382:	78 f4       	brcc	.+30     	; 0x13a2 <vfscanf+0xaa>
    1384:	02 60       	ori	r16, 0x02	; 2
    1386:	6f 2d       	mov	r22, r15
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	32 de       	rcall	.-924    	; 0xff6 <mulacc>
    1392:	f6 2e       	mov	r15, r22
    1394:	fe 01       	movw	r30, r28
    1396:	e3 fc       	sbrc	r14, 3
    1398:	15 91       	lpm	r17, Z+
    139a:	e3 fe       	sbrs	r14, 3
    139c:	11 91       	ld	r17, Z+
    139e:	ef 01       	movw	r28, r30
    13a0:	ed cf       	rjmp	.-38     	; 0x137c <vfscanf+0x84>
    13a2:	01 ff       	sbrs	r16, 1
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <vfscanf+0xb4>
    13a6:	f1 10       	cpse	r15, r1
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <vfscanf+0xb8>
    13aa:	9e c0       	rjmp	.+316    	; 0x14e8 <vfscanf+0x1f0>
    13ac:	ff 24       	eor	r15, r15
    13ae:	fa 94       	dec	r15
    13b0:	18 36       	cpi	r17, 0x68	; 104
    13b2:	19 f0       	breq	.+6      	; 0x13ba <vfscanf+0xc2>
    13b4:	1c 36       	cpi	r17, 0x6C	; 108
    13b6:	51 f0       	breq	.+20     	; 0x13cc <vfscanf+0xd4>
    13b8:	10 c0       	rjmp	.+32     	; 0x13da <vfscanf+0xe2>
    13ba:	fe 01       	movw	r30, r28
    13bc:	e3 fc       	sbrc	r14, 3
    13be:	15 91       	lpm	r17, Z+
    13c0:	e3 fe       	sbrs	r14, 3
    13c2:	11 91       	ld	r17, Z+
    13c4:	ef 01       	movw	r28, r30
    13c6:	18 36       	cpi	r17, 0x68	; 104
    13c8:	41 f4       	brne	.+16     	; 0x13da <vfscanf+0xe2>
    13ca:	08 60       	ori	r16, 0x08	; 8
    13cc:	04 60       	ori	r16, 0x04	; 4
    13ce:	fe 01       	movw	r30, r28
    13d0:	e3 fc       	sbrc	r14, 3
    13d2:	15 91       	lpm	r17, Z+
    13d4:	e3 fe       	sbrs	r14, 3
    13d6:	11 91       	ld	r17, Z+
    13d8:	ef 01       	movw	r28, r30
    13da:	11 23       	and	r17, r17
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <vfscanf+0xe8>
    13de:	84 c0       	rjmp	.+264    	; 0x14e8 <vfscanf+0x1f0>
    13e0:	61 2f       	mov	r22, r17
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	82 e2       	ldi	r24, 0x22	; 34
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	90 d0       	rcall	.+288    	; 0x150a <strchr_P>
    13ea:	89 2b       	or	r24, r25
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <vfscanf+0xf8>
    13ee:	7c c0       	rjmp	.+248    	; 0x14e8 <vfscanf+0x1f0>
    13f0:	00 fd       	sbrc	r16, 0
    13f2:	07 c0       	rjmp	.+14     	; 0x1402 <vfscanf+0x10a>
    13f4:	f5 01       	movw	r30, r10
    13f6:	80 80       	ld	r8, Z
    13f8:	91 80       	ldd	r9, Z+1	; 0x01
    13fa:	c5 01       	movw	r24, r10
    13fc:	02 96       	adiw	r24, 0x02	; 2
    13fe:	5c 01       	movw	r10, r24
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <vfscanf+0x10e>
    1402:	81 2c       	mov	r8, r1
    1404:	91 2c       	mov	r9, r1
    1406:	1e 36       	cpi	r17, 0x6E	; 110
    1408:	49 f4       	brne	.+18     	; 0x141c <vfscanf+0x124>
    140a:	f6 01       	movw	r30, r12
    140c:	46 81       	ldd	r20, Z+6	; 0x06
    140e:	57 81       	ldd	r21, Z+7	; 0x07
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	20 2f       	mov	r18, r16
    1416:	c4 01       	movw	r24, r8
    1418:	e2 dd       	rcall	.-1084   	; 0xfde <putval>
    141a:	7a cf       	rjmp	.-268    	; 0x1310 <vfscanf+0x18>
    141c:	13 36       	cpi	r17, 0x63	; 99
    141e:	a1 f4       	brne	.+40     	; 0x1448 <vfscanf+0x150>
    1420:	01 fd       	sbrc	r16, 1
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <vfscanf+0x130>
    1424:	ff 24       	eor	r15, r15
    1426:	f3 94       	inc	r15
    1428:	c6 01       	movw	r24, r12
    142a:	90 d0       	rcall	.+288    	; 0x154c <fgetc>
    142c:	97 fd       	sbrc	r25, 7
    142e:	5a c0       	rjmp	.+180    	; 0x14e4 <vfscanf+0x1ec>
    1430:	81 14       	cp	r8, r1
    1432:	91 04       	cpc	r9, r1
    1434:	29 f0       	breq	.+10     	; 0x1440 <vfscanf+0x148>
    1436:	f4 01       	movw	r30, r8
    1438:	80 83       	st	Z, r24
    143a:	c4 01       	movw	r24, r8
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	4c 01       	movw	r8, r24
    1440:	fa 94       	dec	r15
    1442:	f1 10       	cpse	r15, r1
    1444:	f1 cf       	rjmp	.-30     	; 0x1428 <vfscanf+0x130>
    1446:	4a c0       	rjmp	.+148    	; 0x14dc <vfscanf+0x1e4>
    1448:	1b 35       	cpi	r17, 0x5B	; 91
    144a:	51 f4       	brne	.+20     	; 0x1460 <vfscanf+0x168>
    144c:	9e 01       	movw	r18, r28
    144e:	a4 01       	movw	r20, r8
    1450:	6f 2d       	mov	r22, r15
    1452:	c6 01       	movw	r24, r12
    1454:	97 de       	rcall	.-722    	; 0x1184 <conv_brk>
    1456:	ec 01       	movw	r28, r24
    1458:	89 2b       	or	r24, r25
    145a:	09 f0       	breq	.+2      	; 0x145e <vfscanf+0x166>
    145c:	3f c0       	rjmp	.+126    	; 0x14dc <vfscanf+0x1e4>
    145e:	39 c0       	rjmp	.+114    	; 0x14d2 <vfscanf+0x1da>
    1460:	c6 01       	movw	r24, r12
    1462:	f0 dd       	rcall	.-1056   	; 0x1044 <skip_spaces>
    1464:	97 fd       	sbrc	r25, 7
    1466:	3e c0       	rjmp	.+124    	; 0x14e4 <vfscanf+0x1ec>
    1468:	1f 36       	cpi	r17, 0x6F	; 111
    146a:	49 f1       	breq	.+82     	; 0x14be <vfscanf+0x1c6>
    146c:	28 f4       	brcc	.+10     	; 0x1478 <vfscanf+0x180>
    146e:	14 36       	cpi	r17, 0x64	; 100
    1470:	21 f1       	breq	.+72     	; 0x14ba <vfscanf+0x1c2>
    1472:	19 36       	cpi	r17, 0x69	; 105
    1474:	39 f1       	breq	.+78     	; 0x14c4 <vfscanf+0x1cc>
    1476:	25 c0       	rjmp	.+74     	; 0x14c2 <vfscanf+0x1ca>
    1478:	13 37       	cpi	r17, 0x73	; 115
    147a:	71 f0       	breq	.+28     	; 0x1498 <vfscanf+0x1a0>
    147c:	15 37       	cpi	r17, 0x75	; 117
    147e:	e9 f0       	breq	.+58     	; 0x14ba <vfscanf+0x1c2>
    1480:	20 c0       	rjmp	.+64     	; 0x14c2 <vfscanf+0x1ca>
    1482:	81 14       	cp	r8, r1
    1484:	91 04       	cpc	r9, r1
    1486:	29 f0       	breq	.+10     	; 0x1492 <vfscanf+0x19a>
    1488:	f4 01       	movw	r30, r8
    148a:	60 82       	st	Z, r6
    148c:	c4 01       	movw	r24, r8
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	4c 01       	movw	r8, r24
    1492:	fa 94       	dec	r15
    1494:	ff 20       	and	r15, r15
    1496:	59 f0       	breq	.+22     	; 0x14ae <vfscanf+0x1b6>
    1498:	c6 01       	movw	r24, r12
    149a:	58 d0       	rcall	.+176    	; 0x154c <fgetc>
    149c:	3c 01       	movw	r6, r24
    149e:	97 fd       	sbrc	r25, 7
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <vfscanf+0x1b6>
    14a2:	2b d0       	rcall	.+86     	; 0x14fa <isspace>
    14a4:	89 2b       	or	r24, r25
    14a6:	69 f3       	breq	.-38     	; 0x1482 <vfscanf+0x18a>
    14a8:	b6 01       	movw	r22, r12
    14aa:	c3 01       	movw	r24, r6
    14ac:	c9 d0       	rcall	.+402    	; 0x1640 <ungetc>
    14ae:	81 14       	cp	r8, r1
    14b0:	91 04       	cpc	r9, r1
    14b2:	a1 f0       	breq	.+40     	; 0x14dc <vfscanf+0x1e4>
    14b4:	f4 01       	movw	r30, r8
    14b6:	10 82       	st	Z, r1
    14b8:	11 c0       	rjmp	.+34     	; 0x14dc <vfscanf+0x1e4>
    14ba:	00 62       	ori	r16, 0x20	; 32
    14bc:	03 c0       	rjmp	.+6      	; 0x14c4 <vfscanf+0x1cc>
    14be:	00 61       	ori	r16, 0x10	; 16
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <vfscanf+0x1cc>
    14c2:	00 64       	ori	r16, 0x40	; 64
    14c4:	20 2f       	mov	r18, r16
    14c6:	a4 01       	movw	r20, r8
    14c8:	6f 2d       	mov	r22, r15
    14ca:	c6 01       	movw	r24, r12
    14cc:	d1 dd       	rcall	.-1118   	; 0x1070 <conv_int>
    14ce:	81 11       	cpse	r24, r1
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <vfscanf+0x1e4>
    14d2:	f6 01       	movw	r30, r12
    14d4:	83 81       	ldd	r24, Z+3	; 0x03
    14d6:	80 73       	andi	r24, 0x30	; 48
    14d8:	29 f4       	brne	.+10     	; 0x14e4 <vfscanf+0x1ec>
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <vfscanf+0x1f0>
    14dc:	00 fd       	sbrc	r16, 0
    14de:	18 cf       	rjmp	.-464    	; 0x1310 <vfscanf+0x18>
    14e0:	53 94       	inc	r5
    14e2:	16 cf       	rjmp	.-468    	; 0x1310 <vfscanf+0x18>
    14e4:	55 20       	and	r5, r5
    14e6:	19 f0       	breq	.+6      	; 0x14ee <vfscanf+0x1f6>
    14e8:	85 2d       	mov	r24, r5
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <vfscanf+0x1fa>
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	9f ef       	ldi	r25, 0xFF	; 255
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	ef e0       	ldi	r30, 0x0F	; 15
    14f8:	3c c1       	rjmp	.+632    	; 0x1772 <__epilogue_restores__+0x6>

000014fa <isspace>:
    14fa:	91 11       	cpse	r25, r1
    14fc:	18 c1       	rjmp	.+560    	; 0x172e <__ctype_isfalse>
    14fe:	80 32       	cpi	r24, 0x20	; 32
    1500:	19 f0       	breq	.+6      	; 0x1508 <isspace+0xe>
    1502:	89 50       	subi	r24, 0x09	; 9
    1504:	85 50       	subi	r24, 0x05	; 5
    1506:	d0 f7       	brcc	.-12     	; 0x14fc <isspace+0x2>
    1508:	08 95       	ret

0000150a <strchr_P>:
    150a:	fc 01       	movw	r30, r24
    150c:	05 90       	lpm	r0, Z+
    150e:	06 16       	cp	r0, r22
    1510:	21 f0       	breq	.+8      	; 0x151a <strchr_P+0x10>
    1512:	00 20       	and	r0, r0
    1514:	d9 f7       	brne	.-10     	; 0x150c <strchr_P+0x2>
    1516:	c0 01       	movw	r24, r0
    1518:	08 95       	ret
    151a:	31 97       	sbiw	r30, 0x01	; 1
    151c:	cf 01       	movw	r24, r30
    151e:	08 95       	ret

00001520 <strnlen_P>:
    1520:	fc 01       	movw	r30, r24
    1522:	05 90       	lpm	r0, Z+
    1524:	61 50       	subi	r22, 0x01	; 1
    1526:	70 40       	sbci	r23, 0x00	; 0
    1528:	01 10       	cpse	r0, r1
    152a:	d8 f7       	brcc	.-10     	; 0x1522 <strnlen_P+0x2>
    152c:	80 95       	com	r24
    152e:	90 95       	com	r25
    1530:	8e 0f       	add	r24, r30
    1532:	9f 1f       	adc	r25, r31
    1534:	08 95       	ret

00001536 <strnlen>:
    1536:	fc 01       	movw	r30, r24
    1538:	61 50       	subi	r22, 0x01	; 1
    153a:	70 40       	sbci	r23, 0x00	; 0
    153c:	01 90       	ld	r0, Z+
    153e:	01 10       	cpse	r0, r1
    1540:	d8 f7       	brcc	.-10     	; 0x1538 <strnlen+0x2>
    1542:	80 95       	com	r24
    1544:	90 95       	com	r25
    1546:	8e 0f       	add	r24, r30
    1548:	9f 1f       	adc	r25, r31
    154a:	08 95       	ret

0000154c <fgetc>:
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	ec 01       	movw	r28, r24
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	20 ff       	sbrs	r18, 0
    1556:	33 c0       	rjmp	.+102    	; 0x15be <fgetc+0x72>
    1558:	26 ff       	sbrs	r18, 6
    155a:	0a c0       	rjmp	.+20     	; 0x1570 <fgetc+0x24>
    155c:	2f 7b       	andi	r18, 0xBF	; 191
    155e:	2b 83       	std	Y+3, r18	; 0x03
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	9f 81       	ldd	r25, Y+7	; 0x07
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	9f 83       	std	Y+7, r25	; 0x07
    1568:	8e 83       	std	Y+6, r24	; 0x06
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	29 c0       	rjmp	.+82     	; 0x15c2 <fgetc+0x76>
    1570:	22 ff       	sbrs	r18, 2
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <fgetc+0x46>
    1574:	e8 81       	ld	r30, Y
    1576:	f9 81       	ldd	r31, Y+1	; 0x01
    1578:	80 81       	ld	r24, Z
    157a:	08 2e       	mov	r0, r24
    157c:	00 0c       	add	r0, r0
    157e:	99 0b       	sbc	r25, r25
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	19 f4       	brne	.+6      	; 0x158a <fgetc+0x3e>
    1584:	20 62       	ori	r18, 0x20	; 32
    1586:	2b 83       	std	Y+3, r18	; 0x03
    1588:	1a c0       	rjmp	.+52     	; 0x15be <fgetc+0x72>
    158a:	31 96       	adiw	r30, 0x01	; 1
    158c:	f9 83       	std	Y+1, r31	; 0x01
    158e:	e8 83       	st	Y, r30
    1590:	0e c0       	rjmp	.+28     	; 0x15ae <fgetc+0x62>
    1592:	ea 85       	ldd	r30, Y+10	; 0x0a
    1594:	fb 85       	ldd	r31, Y+11	; 0x0b
    1596:	09 95       	icall
    1598:	97 ff       	sbrs	r25, 7
    159a:	09 c0       	rjmp	.+18     	; 0x15ae <fgetc+0x62>
    159c:	2b 81       	ldd	r18, Y+3	; 0x03
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	11 f0       	breq	.+4      	; 0x15a6 <fgetc+0x5a>
    15a2:	80 e2       	ldi	r24, 0x20	; 32
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <fgetc+0x5c>
    15a6:	80 e1       	ldi	r24, 0x10	; 16
    15a8:	82 2b       	or	r24, r18
    15aa:	8b 83       	std	Y+3, r24	; 0x03
    15ac:	08 c0       	rjmp	.+16     	; 0x15be <fgetc+0x72>
    15ae:	2e 81       	ldd	r18, Y+6	; 0x06
    15b0:	3f 81       	ldd	r19, Y+7	; 0x07
    15b2:	2f 5f       	subi	r18, 0xFF	; 255
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
    15b6:	3f 83       	std	Y+7, r19	; 0x07
    15b8:	2e 83       	std	Y+6, r18	; 0x06
    15ba:	99 27       	eor	r25, r25
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <fgetc+0x76>
    15be:	8f ef       	ldi	r24, 0xFF	; 255
    15c0:	9f ef       	ldi	r25, 0xFF	; 255
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	08 95       	ret

000015c8 <fputc>:
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	fb 01       	movw	r30, r22
    15d2:	23 81       	ldd	r18, Z+3	; 0x03
    15d4:	21 fd       	sbrc	r18, 1
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <fputc+0x16>
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
    15da:	9f ef       	ldi	r25, 0xFF	; 255
    15dc:	2c c0       	rjmp	.+88     	; 0x1636 <fputc+0x6e>
    15de:	22 ff       	sbrs	r18, 2
    15e0:	16 c0       	rjmp	.+44     	; 0x160e <fputc+0x46>
    15e2:	46 81       	ldd	r20, Z+6	; 0x06
    15e4:	57 81       	ldd	r21, Z+7	; 0x07
    15e6:	24 81       	ldd	r18, Z+4	; 0x04
    15e8:	35 81       	ldd	r19, Z+5	; 0x05
    15ea:	42 17       	cp	r20, r18
    15ec:	53 07       	cpc	r21, r19
    15ee:	44 f4       	brge	.+16     	; 0x1600 <fputc+0x38>
    15f0:	a0 81       	ld	r26, Z
    15f2:	b1 81       	ldd	r27, Z+1	; 0x01
    15f4:	9d 01       	movw	r18, r26
    15f6:	2f 5f       	subi	r18, 0xFF	; 255
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	31 83       	std	Z+1, r19	; 0x01
    15fc:	20 83       	st	Z, r18
    15fe:	8c 93       	st	X, r24
    1600:	26 81       	ldd	r18, Z+6	; 0x06
    1602:	37 81       	ldd	r19, Z+7	; 0x07
    1604:	2f 5f       	subi	r18, 0xFF	; 255
    1606:	3f 4f       	sbci	r19, 0xFF	; 255
    1608:	37 83       	std	Z+7, r19	; 0x07
    160a:	26 83       	std	Z+6, r18	; 0x06
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <fputc+0x6e>
    160e:	8b 01       	movw	r16, r22
    1610:	ec 01       	movw	r28, r24
    1612:	fb 01       	movw	r30, r22
    1614:	00 84       	ldd	r0, Z+8	; 0x08
    1616:	f1 85       	ldd	r31, Z+9	; 0x09
    1618:	e0 2d       	mov	r30, r0
    161a:	09 95       	icall
    161c:	89 2b       	or	r24, r25
    161e:	e1 f6       	brne	.-72     	; 0x15d8 <fputc+0x10>
    1620:	d8 01       	movw	r26, r16
    1622:	16 96       	adiw	r26, 0x06	; 6
    1624:	8d 91       	ld	r24, X+
    1626:	9c 91       	ld	r25, X
    1628:	17 97       	sbiw	r26, 0x07	; 7
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	17 96       	adiw	r26, 0x07	; 7
    162e:	9c 93       	st	X, r25
    1630:	8e 93       	st	-X, r24
    1632:	16 97       	sbiw	r26, 0x06	; 6
    1634:	ce 01       	movw	r24, r28
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	08 95       	ret

00001640 <ungetc>:
    1640:	fb 01       	movw	r30, r22
    1642:	23 81       	ldd	r18, Z+3	; 0x03
    1644:	20 ff       	sbrs	r18, 0
    1646:	12 c0       	rjmp	.+36     	; 0x166c <ungetc+0x2c>
    1648:	26 fd       	sbrc	r18, 6
    164a:	10 c0       	rjmp	.+32     	; 0x166c <ungetc+0x2c>
    164c:	8f 3f       	cpi	r24, 0xFF	; 255
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	93 07       	cpc	r25, r19
    1652:	61 f0       	breq	.+24     	; 0x166c <ungetc+0x2c>
    1654:	82 83       	std	Z+2, r24	; 0x02
    1656:	2f 7d       	andi	r18, 0xDF	; 223
    1658:	20 64       	ori	r18, 0x40	; 64
    165a:	23 83       	std	Z+3, r18	; 0x03
    165c:	26 81       	ldd	r18, Z+6	; 0x06
    165e:	37 81       	ldd	r19, Z+7	; 0x07
    1660:	21 50       	subi	r18, 0x01	; 1
    1662:	31 09       	sbc	r19, r1
    1664:	37 83       	std	Z+7, r19	; 0x07
    1666:	26 83       	std	Z+6, r18	; 0x06
    1668:	99 27       	eor	r25, r25
    166a:	08 95       	ret
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	9f ef       	ldi	r25, 0xFF	; 255
    1670:	08 95       	ret

00001672 <__ultoa_invert>:
    1672:	fa 01       	movw	r30, r20
    1674:	aa 27       	eor	r26, r26
    1676:	28 30       	cpi	r18, 0x08	; 8
    1678:	51 f1       	breq	.+84     	; 0x16ce <__ultoa_invert+0x5c>
    167a:	20 31       	cpi	r18, 0x10	; 16
    167c:	81 f1       	breq	.+96     	; 0x16de <__ultoa_invert+0x6c>
    167e:	e8 94       	clt
    1680:	6f 93       	push	r22
    1682:	6e 7f       	andi	r22, 0xFE	; 254
    1684:	6e 5f       	subi	r22, 0xFE	; 254
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	8f 4f       	sbci	r24, 0xFF	; 255
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	af 4f       	sbci	r26, 0xFF	; 255
    168e:	b1 e0       	ldi	r27, 0x01	; 1
    1690:	3e d0       	rcall	.+124    	; 0x170e <__ultoa_invert+0x9c>
    1692:	b4 e0       	ldi	r27, 0x04	; 4
    1694:	3c d0       	rcall	.+120    	; 0x170e <__ultoa_invert+0x9c>
    1696:	67 0f       	add	r22, r23
    1698:	78 1f       	adc	r23, r24
    169a:	89 1f       	adc	r24, r25
    169c:	9a 1f       	adc	r25, r26
    169e:	a1 1d       	adc	r26, r1
    16a0:	68 0f       	add	r22, r24
    16a2:	79 1f       	adc	r23, r25
    16a4:	8a 1f       	adc	r24, r26
    16a6:	91 1d       	adc	r25, r1
    16a8:	a1 1d       	adc	r26, r1
    16aa:	6a 0f       	add	r22, r26
    16ac:	71 1d       	adc	r23, r1
    16ae:	81 1d       	adc	r24, r1
    16b0:	91 1d       	adc	r25, r1
    16b2:	a1 1d       	adc	r26, r1
    16b4:	20 d0       	rcall	.+64     	; 0x16f6 <__ultoa_invert+0x84>
    16b6:	09 f4       	brne	.+2      	; 0x16ba <__ultoa_invert+0x48>
    16b8:	68 94       	set
    16ba:	3f 91       	pop	r19
    16bc:	2a e0       	ldi	r18, 0x0A	; 10
    16be:	26 9f       	mul	r18, r22
    16c0:	11 24       	eor	r1, r1
    16c2:	30 19       	sub	r19, r0
    16c4:	30 5d       	subi	r19, 0xD0	; 208
    16c6:	31 93       	st	Z+, r19
    16c8:	de f6       	brtc	.-74     	; 0x1680 <__ultoa_invert+0xe>
    16ca:	cf 01       	movw	r24, r30
    16cc:	08 95       	ret
    16ce:	46 2f       	mov	r20, r22
    16d0:	47 70       	andi	r20, 0x07	; 7
    16d2:	40 5d       	subi	r20, 0xD0	; 208
    16d4:	41 93       	st	Z+, r20
    16d6:	b3 e0       	ldi	r27, 0x03	; 3
    16d8:	0f d0       	rcall	.+30     	; 0x16f8 <__ultoa_invert+0x86>
    16da:	c9 f7       	brne	.-14     	; 0x16ce <__ultoa_invert+0x5c>
    16dc:	f6 cf       	rjmp	.-20     	; 0x16ca <__ultoa_invert+0x58>
    16de:	46 2f       	mov	r20, r22
    16e0:	4f 70       	andi	r20, 0x0F	; 15
    16e2:	40 5d       	subi	r20, 0xD0	; 208
    16e4:	4a 33       	cpi	r20, 0x3A	; 58
    16e6:	18 f0       	brcs	.+6      	; 0x16ee <__ultoa_invert+0x7c>
    16e8:	49 5d       	subi	r20, 0xD9	; 217
    16ea:	31 fd       	sbrc	r19, 1
    16ec:	40 52       	subi	r20, 0x20	; 32
    16ee:	41 93       	st	Z+, r20
    16f0:	02 d0       	rcall	.+4      	; 0x16f6 <__ultoa_invert+0x84>
    16f2:	a9 f7       	brne	.-22     	; 0x16de <__ultoa_invert+0x6c>
    16f4:	ea cf       	rjmp	.-44     	; 0x16ca <__ultoa_invert+0x58>
    16f6:	b4 e0       	ldi	r27, 0x04	; 4
    16f8:	a6 95       	lsr	r26
    16fa:	97 95       	ror	r25
    16fc:	87 95       	ror	r24
    16fe:	77 95       	ror	r23
    1700:	67 95       	ror	r22
    1702:	ba 95       	dec	r27
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__ultoa_invert+0x86>
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	61 05       	cpc	r22, r1
    170a:	71 05       	cpc	r23, r1
    170c:	08 95       	ret
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	0a 2e       	mov	r0, r26
    1714:	06 94       	lsr	r0
    1716:	57 95       	ror	r21
    1718:	47 95       	ror	r20
    171a:	37 95       	ror	r19
    171c:	27 95       	ror	r18
    171e:	ba 95       	dec	r27
    1720:	c9 f7       	brne	.-14     	; 0x1714 <__ultoa_invert+0xa2>
    1722:	62 0f       	add	r22, r18
    1724:	73 1f       	adc	r23, r19
    1726:	84 1f       	adc	r24, r20
    1728:	95 1f       	adc	r25, r21
    172a:	a0 1d       	adc	r26, r0
    172c:	08 95       	ret

0000172e <__ctype_isfalse>:
    172e:	99 27       	eor	r25, r25
    1730:	88 27       	eor	r24, r24

00001732 <__ctype_istrue>:
    1732:	08 95       	ret

00001734 <__prologue_saves__>:
    1734:	2f 92       	push	r2
    1736:	3f 92       	push	r3
    1738:	4f 92       	push	r4
    173a:	5f 92       	push	r5
    173c:	6f 92       	push	r6
    173e:	7f 92       	push	r7
    1740:	8f 92       	push	r8
    1742:	9f 92       	push	r9
    1744:	af 92       	push	r10
    1746:	bf 92       	push	r11
    1748:	cf 92       	push	r12
    174a:	df 92       	push	r13
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	ca 1b       	sub	r28, r26
    175e:	db 0b       	sbc	r29, r27
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	09 94       	ijmp

0000176c <__epilogue_restores__>:
    176c:	2a 88       	ldd	r2, Y+18	; 0x12
    176e:	39 88       	ldd	r3, Y+17	; 0x11
    1770:	48 88       	ldd	r4, Y+16	; 0x10
    1772:	5f 84       	ldd	r5, Y+15	; 0x0f
    1774:	6e 84       	ldd	r6, Y+14	; 0x0e
    1776:	7d 84       	ldd	r7, Y+13	; 0x0d
    1778:	8c 84       	ldd	r8, Y+12	; 0x0c
    177a:	9b 84       	ldd	r9, Y+11	; 0x0b
    177c:	aa 84       	ldd	r10, Y+10	; 0x0a
    177e:	b9 84       	ldd	r11, Y+9	; 0x09
    1780:	c8 84       	ldd	r12, Y+8	; 0x08
    1782:	df 80       	ldd	r13, Y+7	; 0x07
    1784:	ee 80       	ldd	r14, Y+6	; 0x06
    1786:	fd 80       	ldd	r15, Y+5	; 0x05
    1788:	0c 81       	ldd	r16, Y+4	; 0x04
    178a:	1b 81       	ldd	r17, Y+3	; 0x03
    178c:	aa 81       	ldd	r26, Y+2	; 0x02
    178e:	b9 81       	ldd	r27, Y+1	; 0x01
    1790:	ce 0f       	add	r28, r30
    1792:	d1 1d       	adc	r29, r1
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	ed 01       	movw	r28, r26
    17a0:	08 95       	ret

000017a2 <_exit>:
    17a2:	f8 94       	cli

000017a4 <__stop_program>:
    17a4:	ff cf       	rjmp	.-2      	; 0x17a4 <__stop_program>
