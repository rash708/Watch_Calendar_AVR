
CPP_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  000015ec  00001680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800148  00800148  00001768  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001112  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000708  00000000  00000000  000029de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aaa  00000000  00000000  000030e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000879  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004c69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	16 c0       	rjmp	.+44     	; 0x2e <__ctors_end>
       2:	30 c0       	rjmp	.+96     	; 0x64 <__bad_interrupt>
       4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
       6:	2e c0       	rjmp	.+92     	; 0x64 <__bad_interrupt>
       8:	d1 c1       	rjmp	.+930    	; 0x3ac <__vector_4>
       a:	2c c0       	rjmp	.+88     	; 0x64 <__bad_interrupt>
       c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
       e:	2a c0       	rjmp	.+84     	; 0x64 <__bad_interrupt>
      10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
      12:	29 c0       	rjmp	.+82     	; 0x66 <__vector_9>
      14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
      16:	26 c0       	rjmp	.+76     	; 0x64 <__bad_interrupt>
      18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
      1a:	24 c0       	rjmp	.+72     	; 0x64 <__bad_interrupt>
      1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
      1e:	22 c0       	rjmp	.+68     	; 0x64 <__bad_interrupt>
      20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>

00000022 <__trampolines_end>:
      22:	63 64       	ori	r22, 0x43	; 67
      24:	69 6e       	ori	r22, 0xE9	; 233
      26:	6f 70       	andi	r22, 0x0F	; 15
      28:	73 75       	andi	r23, 0x53	; 83
      2a:	78 58       	subi	r23, 0x88	; 136
      2c:	5b 00       	.word	0x005b	; ????

0000002e <__ctors_end>:
      2e:	11 24       	eor	r1, r1
      30:	1f be       	out	0x3f, r1	; 63
      32:	cf e5       	ldi	r28, 0x5F	; 95
      34:	d2 e0       	ldi	r29, 0x02	; 2
      36:	de bf       	out	0x3e, r29	; 62
      38:	cd bf       	out	0x3d, r28	; 61

0000003a <__do_copy_data>:
      3a:	11 e0       	ldi	r17, 0x01	; 1
      3c:	a0 e6       	ldi	r26, 0x60	; 96
      3e:	b0 e0       	ldi	r27, 0x00	; 0
      40:	ec ee       	ldi	r30, 0xEC	; 236
      42:	f5 e1       	ldi	r31, 0x15	; 21
      44:	02 c0       	rjmp	.+4      	; 0x4a <__SREG__+0xb>
      46:	05 90       	lpm	r0, Z+
      48:	0d 92       	st	X+, r0
      4a:	a8 34       	cpi	r26, 0x48	; 72
      4c:	b1 07       	cpc	r27, r17
      4e:	d9 f7       	brne	.-10     	; 0x46 <__SREG__+0x7>

00000050 <__do_clear_bss>:
      50:	21 e0       	ldi	r18, 0x01	; 1
      52:	a8 e4       	ldi	r26, 0x48	; 72
      54:	b1 e0       	ldi	r27, 0x01	; 1
      56:	01 c0       	rjmp	.+2      	; 0x5a <.do_clear_bss_start>

00000058 <.do_clear_bss_loop>:
      58:	1d 92       	st	X+, r1

0000005a <.do_clear_bss_start>:
      5a:	a7 38       	cpi	r26, 0x87	; 135
      5c:	b2 07       	cpc	r27, r18
      5e:	e1 f7       	brne	.-8      	; 0x58 <.do_clear_bss_loop>
      60:	78 d2       	rcall	.+1264   	; 0x552 <main>
      62:	c2 ca       	rjmp	.-2684   	; 0xfffff5e8 <__eeprom_end+0xff7ef5e8>

00000064 <__bad_interrupt>:
      64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <__vector_9>:
}

//-----------------------------------------------------------------------------------------
//Блок прерываний
ISR(USART_RX_vect)
{
      66:	1f 92       	push	r1
      68:	0f 92       	push	r0
      6a:	0f b6       	in	r0, 0x3f	; 63
      6c:	0f 92       	push	r0
      6e:	11 24       	eor	r1, r1
      70:	0f 93       	push	r16
      72:	1f 93       	push	r17
      74:	2f 93       	push	r18
      76:	3f 93       	push	r19
      78:	4f 93       	push	r20
      7a:	5f 93       	push	r21
      7c:	6f 93       	push	r22
      7e:	7f 93       	push	r23
      80:	8f 93       	push	r24
      82:	9f 93       	push	r25
      84:	af 93       	push	r26
      86:	bf 93       	push	r27
      88:	ef 93       	push	r30
      8a:	ff 93       	push	r31
      8c:	cf 93       	push	r28
      8e:	df 93       	push	r29
      90:	cd b7       	in	r28, 0x3d	; 61
      92:	de b7       	in	r29, 0x3e	; 62
      94:	a0 97       	sbiw	r28, 0x20	; 32
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61
	rData = UDR;
      9a:	8c b1       	in	r24, 0x0c	; 12
      9c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <rData>
	char temp[20] = {'\0'};
      a0:	fe 01       	movw	r30, r28
      a2:	31 96       	adiw	r30, 0x01	; 1
      a4:	94 e1       	ldi	r25, 0x14	; 20
      a6:	df 01       	movw	r26, r30
      a8:	1d 92       	st	X+, r1
      aa:	9a 95       	dec	r25
      ac:	e9 f7       	brne	.-6      	; 0xa8 <__vector_9+0x42>
	int t_h, t_min, t_sec, t_date, t_month, t_year;
	//unsigned char flag;

	if (rData == '\r')
      ae:	8d 30       	cpi	r24, 0x0D	; 13
      b0:	09 f0       	breq	.+2      	; 0xb4 <__vector_9+0x4e>
      b2:	53 c1       	rjmp	.+678    	; 0x35a <__stack+0xfb>
	{

		msg[count_char] = '\0';
      b4:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <count_char>
      b8:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <count_char+0x1>
      bc:	e4 5b       	subi	r30, 0xB4	; 180
      be:	fe 4f       	sbci	r31, 0xFE	; 254
      c0:	10 82       	st	Z, r1

		if (set_date == 1) //Если мы устанавливаем дату
      c2:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <set_date>
      c6:	81 30       	cpi	r24, 0x01	; 1
      c8:	09 f0       	breq	.+2      	; 0xcc <__vector_9+0x66>
      ca:	7f c0       	rjmp	.+254    	; 0x1ca <__vector_9+0x164>
		{
			sscanf(msg, "%d-%d-%d", &t_date, &t_month, &t_year);
      cc:	ce 01       	movw	r24, r28
      ce:	4f 96       	adiw	r24, 0x1f	; 31
      d0:	9f 93       	push	r25
      d2:	8f 93       	push	r24
      d4:	02 97       	sbiw	r24, 0x02	; 2
      d6:	9f 93       	push	r25
      d8:	8f 93       	push	r24
      da:	02 97       	sbiw	r24, 0x02	; 2
      dc:	9f 93       	push	r25
      de:	8f 93       	push	r24
      e0:	8a e6       	ldi	r24, 0x6A	; 106
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	9f 93       	push	r25
      e6:	8f 93       	push	r24
      e8:	8c e4       	ldi	r24, 0x4C	; 76
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	9f 93       	push	r25
      ee:	8f 93       	push	r24
      f0:	b1 d4       	rcall	.+2402   	; 0xa54 <sscanf>

			if ((t_date < 1) || (t_date > 31) || (t_month < 1) || (t_month > 12) || (t_year < 0))
      f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
      f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
      f6:	9c 01       	movw	r18, r24
      f8:	21 50       	subi	r18, 0x01	; 1
      fa:	31 09       	sbc	r19, r1
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	f8 94       	cli
     100:	de bf       	out	0x3e, r29	; 62
     102:	0f be       	out	0x3f, r0	; 63
     104:	cd bf       	out	0x3d, r28	; 61
     106:	2f 31       	cpi	r18, 0x1F	; 31
     108:	31 05       	cpc	r19, r1
     10a:	60 f4       	brcc	.+24     	; 0x124 <__vector_9+0xbe>
     10c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     10e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     110:	a9 01       	movw	r20, r18
     112:	41 50       	subi	r20, 0x01	; 1
     114:	51 09       	sbc	r21, r1
     116:	4c 30       	cpi	r20, 0x0C	; 12
     118:	51 05       	cpc	r21, r1
     11a:	20 f4       	brcc	.+8      	; 0x124 <__vector_9+0xbe>
     11c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     11e:	f8 a1       	ldd	r31, Y+32	; 0x20
     120:	ff 23       	and	r31, r31
     122:	24 f4       	brge	.+8      	; 0x12c <__vector_9+0xc6>
			{
				UART_send_string_ln("Wrong value");
     124:	83 e7       	ldi	r24, 0x73	; 115
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	47 d4       	rcall	.+2190   	; 0x9b8 <_Z19UART_send_string_lnPKc>
     12a:	12 c1       	rjmp	.+548    	; 0x350 <__stack+0xf1>
			}
			else if (t_date == 31)
     12c:	8f 31       	cpi	r24, 0x1F	; 31
     12e:	91 05       	cpc	r25, r1
     130:	81 f4       	brne	.+32     	; 0x152 <__vector_9+0xec>
			{
				if ((t_month == 2) || (t_month == 4) || (t_month == 6) || (t_month == 9) || (t_month == 11))
     132:	c9 01       	movw	r24, r18
     134:	8b 7f       	andi	r24, 0xFB	; 251
     136:	02 97       	sbiw	r24, 0x02	; 2
     138:	41 f0       	breq	.+16     	; 0x14a <__vector_9+0xe4>
     13a:	24 30       	cpi	r18, 0x04	; 4
     13c:	31 05       	cpc	r19, r1
     13e:	29 f0       	breq	.+10     	; 0x14a <__vector_9+0xe4>
     140:	2d 7f       	andi	r18, 0xFD	; 253
     142:	29 30       	cpi	r18, 0x09	; 9
     144:	31 05       	cpc	r19, r1
     146:	09 f0       	breq	.+2      	; 0x14a <__vector_9+0xe4>
     148:	03 c1       	rjmp	.+518    	; 0x350 <__stack+0xf1>
				{
					UART_send_string_ln("Wrong value of date for month");
     14a:	8f e7       	ldi	r24, 0x7F	; 127
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	34 d4       	rcall	.+2152   	; 0x9b8 <_Z19UART_send_string_lnPKc>
     150:	ff c0       	rjmp	.+510    	; 0x350 <__stack+0xf1>
				}
			}
			else if (t_date == 30)
     152:	8e 31       	cpi	r24, 0x1E	; 30
     154:	91 05       	cpc	r25, r1
     156:	41 f4       	brne	.+16     	; 0x168 <__vector_9+0x102>
			{
				if (t_month == 2)
     158:	22 30       	cpi	r18, 0x02	; 2
     15a:	31 05       	cpc	r19, r1
     15c:	09 f0       	breq	.+2      	; 0x160 <__vector_9+0xfa>
     15e:	f8 c0       	rjmp	.+496    	; 0x350 <__stack+0xf1>
				{
					UART_send_string_ln("Wrong value of date for month");
     160:	8f e7       	ldi	r24, 0x7F	; 127
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	29 d4       	rcall	.+2130   	; 0x9b8 <_Z19UART_send_string_lnPKc>
     166:	f4 c0       	rjmp	.+488    	; 0x350 <__stack+0xf1>
				}
			}
			else if (t_date == 29)
     168:	8d 31       	cpi	r24, 0x1D	; 29
     16a:	91 05       	cpc	r25, r1
     16c:	19 f5       	brne	.+70     	; 0x1b4 <__vector_9+0x14e>
			{
				if ((t_month == 2) && (not_leap(t_year)))
     16e:	22 30       	cpi	r18, 0x02	; 2
     170:	31 05       	cpc	r19, r1
     172:	a1 f4       	brne	.+40     	; 0x19c <__vector_9+0x136>
	TIFR = 0x01; //clear flag
}

static char not_leap(unsigned short year) //проверка вискосного года
{
	if (!(year % 100))
     174:	cf 01       	movw	r24, r30
     176:	64 e6       	ldi	r22, 0x64	; 100
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	24 d4       	rcall	.+2120   	; 0x9c4 <__udivmodhi4>
     17c:	89 2b       	or	r24, r25
     17e:	31 f4       	brne	.+12     	; 0x18c <__vector_9+0x126>
	{
		return (char)(year % 400);
     180:	8e 2f       	mov	r24, r30
     182:	9f 2f       	mov	r25, r31
     184:	60 e9       	ldi	r22, 0x90	; 144
     186:	71 e0       	ldi	r23, 0x01	; 1
     188:	1d d4       	rcall	.+2106   	; 0x9c4 <__udivmodhi4>
     18a:	02 c0       	rjmp	.+4      	; 0x190 <__vector_9+0x12a>
	}
	else
	{
		return (char)(year % 4);
     18c:	8e 2f       	mov	r24, r30
     18e:	83 70       	andi	r24, 0x03	; 3
					UART_send_string_ln("Wrong value of date for month");
				}
			}
			else if (t_date == 29)
			{
				if ((t_month == 2) && (not_leap(t_year)))
     190:	88 23       	and	r24, r24
     192:	21 f0       	breq	.+8      	; 0x19c <__vector_9+0x136>
				{
					UART_send_string_ln("Wrong value of date for month");
     194:	8f e7       	ldi	r24, 0x7F	; 127
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0f d4       	rcall	.+2078   	; 0x9b8 <_Z19UART_send_string_lnPKc>
     19a:	da c0       	rjmp	.+436    	; 0x350 <__stack+0xf1>
				}
				else
				{
					date = t_date;
     19c:	8d e1       	ldi	r24, 0x1D	; 29
     19e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
					month = t_month;
     1a2:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <month>
					year = t_year;
     1a6:	f0 93 80 01 	sts	0x0180, r31	; 0x800180 <year+0x1>
     1aa:	e0 93 7f 01 	sts	0x017F, r30	; 0x80017f <year>
					set_date = 0;
     1ae:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <set_date>
     1b2:	ce c0       	rjmp	.+412    	; 0x350 <__stack+0xf1>
				}
			}
			else
			{
				date = t_date;
     1b4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
				month = t_month;
     1b8:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <month>
				year = t_year;
     1bc:	f0 93 80 01 	sts	0x0180, r31	; 0x800180 <year+0x1>
     1c0:	e0 93 7f 01 	sts	0x017F, r30	; 0x80017f <year>
				set_date = 0;
     1c4:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <set_date>
     1c8:	c3 c0       	rjmp	.+390    	; 0x350 <__stack+0xf1>
			}

			//UART_send_string_ln((const char*)t_h);
		}
		else if (set_time == 1) //Если мы устанавливаем время
     1ca:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	b9 f5       	brne	.+110    	; 0x240 <__vector_9+0x1da>
		{
			sscanf(msg, "%d-%d-%d", &t_h, &t_min, &t_sec);
     1d2:	ce 01       	movw	r24, r28
     1d4:	49 96       	adiw	r24, 0x19	; 25
     1d6:	9f 93       	push	r25
     1d8:	8f 93       	push	r24
     1da:	02 97       	sbiw	r24, 0x02	; 2
     1dc:	9f 93       	push	r25
     1de:	8f 93       	push	r24
     1e0:	02 97       	sbiw	r24, 0x02	; 2
     1e2:	9f 93       	push	r25
     1e4:	8f 93       	push	r24
     1e6:	8a e6       	ldi	r24, 0x6A	; 106
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	9f 93       	push	r25
     1ec:	8f 93       	push	r24
     1ee:	8c e4       	ldi	r24, 0x4C	; 76
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	9f 93       	push	r25
     1f4:	8f 93       	push	r24
     1f6:	2e d4       	rcall	.+2140   	; 0xa54 <sscanf>

			if ((t_h < 24) && (t_min < 60) && (t_sec < 60))
     1f8:	8d 89       	ldd	r24, Y+21	; 0x15
     1fa:	9e 89       	ldd	r25, Y+22	; 0x16
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
     206:	88 31       	cpi	r24, 0x18	; 24
     208:	91 05       	cpc	r25, r1
     20a:	9c f4       	brge	.+38     	; 0x232 <__vector_9+0x1cc>
     20c:	2f 89       	ldd	r18, Y+23	; 0x17
     20e:	38 8d       	ldd	r19, Y+24	; 0x18
     210:	2c 33       	cpi	r18, 0x3C	; 60
     212:	31 05       	cpc	r19, r1
     214:	74 f4       	brge	.+28     	; 0x232 <__vector_9+0x1cc>
     216:	49 8d       	ldd	r20, Y+25	; 0x19
     218:	5a 8d       	ldd	r21, Y+26	; 0x1a
     21a:	4c 33       	cpi	r20, 0x3C	; 60
     21c:	51 05       	cpc	r21, r1
     21e:	4c f4       	brge	.+18     	; 0x232 <__vector_9+0x1cc>
			{
				hour = t_h;
     220:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <hour>
				minute = t_min;
     224:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <minute>
				second = t_sec;
     228:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <second>
				set_time = 0;
     22c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
     230:	8f c0       	rjmp	.+286    	; 0x350 <__stack+0xf1>
			}
			else
			{
				UART_send_string_ln("Wrong value");
     232:	83 e7       	ldi	r24, 0x73	; 115
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	c0 d3       	rcall	.+1920   	; 0x9b8 <_Z19UART_send_string_lnPKc>
				UART_send_string("Print time (format 23-59-59): ");
     238:	8d e9       	ldi	r24, 0x9D	; 157
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	af d3       	rcall	.+1886   	; 0x99c <_Z16UART_send_stringPKc>
     23e:	88 c0       	rjmp	.+272    	; 0x350 <__stack+0xf1>

			//UART_send_string_ln((const char*)t_h);
		}
		else //Все остальные события
		{
			if (strcmp(msg, "help") == 0)
     240:	6c eb       	ldi	r22, 0xBC	; 188
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	8c e4       	ldi	r24, 0x4C	; 76
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	dd d3       	rcall	.+1978   	; 0xa04 <strcmp>
     24a:	89 2b       	or	r24, r25
     24c:	81 f4       	brne	.+32     	; 0x26e <__stack+0xf>
			{
				UART_send_string_ln("Command list:");
     24e:	81 ec       	ldi	r24, 0xC1	; 193
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	b2 d3       	rcall	.+1892   	; 0x9b8 <_Z19UART_send_string_lnPKc>
				UART_send_string_ln("print-date");
     254:	8f ec       	ldi	r24, 0xCF	; 207
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	af d3       	rcall	.+1886   	; 0x9b8 <_Z19UART_send_string_lnPKc>
				UART_send_string_ln("print-time");
     25a:	8a ed       	ldi	r24, 0xDA	; 218
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	ac d3       	rcall	.+1880   	; 0x9b8 <_Z19UART_send_string_lnPKc>
				UART_send_string_ln("set-date");
     260:	85 ee       	ldi	r24, 0xE5	; 229
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	a9 d3       	rcall	.+1874   	; 0x9b8 <_Z19UART_send_string_lnPKc>
				UART_send_string_ln("set-time");
     266:	8e ee       	ldi	r24, 0xEE	; 238
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	a6 d3       	rcall	.+1868   	; 0x9b8 <_Z19UART_send_string_lnPKc>
     26c:	71 c0       	rjmp	.+226    	; 0x350 <__stack+0xf1>
			}
			else if (strcmp(msg, "print-date") == 0)
     26e:	6f ec       	ldi	r22, 0xCF	; 207
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	8c e4       	ldi	r24, 0x4C	; 76
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	c6 d3       	rcall	.+1932   	; 0xa04 <strcmp>
     278:	89 2b       	or	r24, r25
     27a:	19 f5       	brne	.+70     	; 0x2c2 <__stack+0x63>
			{
				UART_send_string_ln("date:");
     27c:	87 ef       	ldi	r24, 0xF7	; 247
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	9b d3       	rcall	.+1846   	; 0x9b8 <_Z19UART_send_string_lnPKc>
				sprintf(temp, "%d-%d-%d", (int)date, (int)month, (int)year);
     282:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <year+0x1>
     286:	8f 93       	push	r24
     288:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <year>
     28c:	8f 93       	push	r24
     28e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     292:	1f 92       	push	r1
     294:	8f 93       	push	r24
     296:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <date>
     29a:	1f 92       	push	r1
     29c:	8f 93       	push	r24
     29e:	8a e6       	ldi	r24, 0x6A	; 106
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	9f 93       	push	r25
     2a4:	8f 93       	push	r24
     2a6:	8e 01       	movw	r16, r28
     2a8:	0f 5f       	subi	r16, 0xFF	; 255
     2aa:	1f 4f       	sbci	r17, 0xFF	; 255
     2ac:	1f 93       	push	r17
     2ae:	0f 93       	push	r16
     2b0:	b2 d3       	rcall	.+1892   	; 0xa16 <sprintf>
				UART_send_string_ln(temp);
     2b2:	c8 01       	movw	r24, r16
     2b4:	81 d3       	rcall	.+1794   	; 0x9b8 <_Z19UART_send_string_lnPKc>
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	47 c0       	rjmp	.+142    	; 0x350 <__stack+0xf1>
			}
			else if (strcmp(msg, "print-time") == 0)
     2c2:	6a ed       	ldi	r22, 0xDA	; 218
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	8c e4       	ldi	r24, 0x4C	; 76
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	9c d3       	rcall	.+1848   	; 0xa04 <strcmp>
     2cc:	89 2b       	or	r24, r25
     2ce:	09 f5       	brne	.+66     	; 0x312 <__stack+0xb3>
			{
				UART_send_string("time: ");
     2d0:	8d ef       	ldi	r24, 0xFD	; 253
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	63 d3       	rcall	.+1734   	; 0x99c <_Z16UART_send_stringPKc>
				sprintf(temp, "%d-%d-%d", (int)hour, (int)minute, (int)second);
     2d6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <second>
     2da:	1f 92       	push	r1
     2dc:	8f 93       	push	r24
     2de:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <minute>
     2e2:	1f 92       	push	r1
     2e4:	8f 93       	push	r24
     2e6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <hour>
     2ea:	1f 92       	push	r1
     2ec:	8f 93       	push	r24
     2ee:	8a e6       	ldi	r24, 0x6A	; 106
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	9f 93       	push	r25
     2f4:	8f 93       	push	r24
     2f6:	8e 01       	movw	r16, r28
     2f8:	0f 5f       	subi	r16, 0xFF	; 255
     2fa:	1f 4f       	sbci	r17, 0xFF	; 255
     2fc:	1f 93       	push	r17
     2fe:	0f 93       	push	r16
     300:	8a d3       	rcall	.+1812   	; 0xa16 <sprintf>
				UART_send_string_ln(temp);
     302:	c8 01       	movw	r24, r16
     304:	59 d3       	rcall	.+1714   	; 0x9b8 <_Z19UART_send_string_lnPKc>
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	1f c0       	rjmp	.+62     	; 0x350 <__stack+0xf1>
			}
			else if (strcmp(msg, "set-date") == 0)
     312:	65 ee       	ldi	r22, 0xE5	; 229
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	8c e4       	ldi	r24, 0x4C	; 76
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	74 d3       	rcall	.+1768   	; 0xa04 <strcmp>
     31c:	89 2b       	or	r24, r25
     31e:	39 f4       	brne	.+14     	; 0x32e <__stack+0xcf>
			{
				UART_send_string("Print date (format 10-12-2019): ");
     320:	84 e0       	ldi	r24, 0x04	; 4
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	3b d3       	rcall	.+1654   	; 0x99c <_Z16UART_send_stringPKc>
				set_date = 1;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <set_date>
     32c:	11 c0       	rjmp	.+34     	; 0x350 <__stack+0xf1>
			}
			else if (strcmp(msg, "set-time") == 0)
     32e:	6e ee       	ldi	r22, 0xEE	; 238
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	8c e4       	ldi	r24, 0x4C	; 76
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	66 d3       	rcall	.+1740   	; 0xa04 <strcmp>
     338:	89 2b       	or	r24, r25
     33a:	39 f4       	brne	.+14     	; 0x34a <__stack+0xeb>
			{
				UART_send_string("Print time (format 23-59-59): ");
     33c:	8d e9       	ldi	r24, 0x9D	; 157
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	2d d3       	rcall	.+1626   	; 0x99c <_Z16UART_send_stringPKc>
				set_time = 1;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
     348:	03 c0       	rjmp	.+6      	; 0x350 <__stack+0xf1>
			}
			else
			{
				UART_send_string_ln("Print 'help' for more information");
     34a:	85 e2       	ldi	r24, 0x25	; 37
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	34 d3       	rcall	.+1640   	; 0x9b8 <_Z19UART_send_string_lnPKc>
			}
		}

		count_char = 0;
     350:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <count_char+0x1>
     354:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <count_char>
     358:	0e c0       	rjmp	.+28     	; 0x376 <__stack+0x117>
	}
	else
	{
		msg[count_char] = rData;
     35a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <count_char>
     35e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <count_char+0x1>
     362:	f9 01       	movw	r30, r18
     364:	e4 5b       	subi	r30, 0xB4	; 180
     366:	fe 4f       	sbci	r31, 0xFE	; 254
     368:	80 83       	st	Z, r24
		count_char++;
     36a:	2f 5f       	subi	r18, 0xFF	; 255
     36c:	3f 4f       	sbci	r19, 0xFF	; 255
     36e:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <count_char+0x1>
     372:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <count_char>
	}
}
     376:	a0 96       	adiw	r28, 0x20	; 32
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	ff 91       	pop	r31
     388:	ef 91       	pop	r30
     38a:	bf 91       	pop	r27
     38c:	af 91       	pop	r26
     38e:	9f 91       	pop	r25
     390:	8f 91       	pop	r24
     392:	7f 91       	pop	r23
     394:	6f 91       	pop	r22
     396:	5f 91       	pop	r21
     398:	4f 91       	pop	r20
     39a:	3f 91       	pop	r19
     39c:	2f 91       	pop	r18
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	0f 90       	pop	r0
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	0f 90       	pop	r0
     3a8:	1f 90       	pop	r1
     3aa:	18 95       	reti

000003ac <__vector_4>:
// {
// 	disp_flag = !(disp_flag);
// }

ISR(TIMER1_COMPA_vect) //внешнее прерывание по таймеру t1 (каждую секунду) и обработка времени
{
     3ac:	1f 92       	push	r1
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	0f 92       	push	r0
     3b4:	11 24       	eor	r1, r1
     3b6:	2f 93       	push	r18
     3b8:	3f 93       	push	r19
     3ba:	4f 93       	push	r20
     3bc:	5f 93       	push	r21
     3be:	6f 93       	push	r22
     3c0:	7f 93       	push	r23
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
     3c6:	af 93       	push	r26
     3c8:	bf 93       	push	r27
	if (++second == 60)
     3ca:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <second>
     3ce:	8f 5f       	subi	r24, 0xFF	; 255
     3d0:	8c 33       	cpi	r24, 0x3C	; 60
     3d2:	19 f0       	breq	.+6      	; 0x3da <__vector_4+0x2e>
     3d4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <second>
     3d8:	82 c0       	rjmp	.+260    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
	{
		second = 0;
     3da:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <second>
		if (++minute == 60)
     3de:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <minute>
     3e2:	8f 5f       	subi	r24, 0xFF	; 255
     3e4:	8c 33       	cpi	r24, 0x3C	; 60
     3e6:	19 f0       	breq	.+6      	; 0x3ee <__vector_4+0x42>
     3e8:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <minute>
     3ec:	78 c0       	rjmp	.+240    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
		{
			minute = 0;
     3ee:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <minute>
			if (++hour == 24)
     3f2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <hour>
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	88 31       	cpi	r24, 0x18	; 24
     3fa:	19 f0       	breq	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fc:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <hour>
     400:	6e c0       	rjmp	.+220    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			{
				hour = 0;
     402:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <hour>
				if (++date == 32)
     406:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <date>
     40a:	8f 5f       	subi	r24, 0xFF	; 255
     40c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     410:	80 32       	cpi	r24, 0x20	; 32
     412:	49 f4       	brne	.+18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
				{
					month++;
     414:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     418:	8f 5f       	subi	r24, 0xFF	; 255
     41a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
					date = 1;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     424:	4c c0       	rjmp	.+152    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				}
				else if (date == 31)
     426:	8f 31       	cpi	r24, 0x1F	; 31
     428:	81 f4       	brne	.+32     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				{
					if ((month == 4) || (month == 6) || (month == 9) || (month == 11))
     42a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     42e:	98 2f       	mov	r25, r24
     430:	9d 7f       	andi	r25, 0xFD	; 253
     432:	94 30       	cpi	r25, 0x04	; 4
     434:	19 f0       	breq	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	99 30       	cpi	r25, 0x09	; 9
     438:	09 f0       	breq	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43a:	41 c0       	rjmp	.+130    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
					{
						month++;
     43c:	8f 5f       	subi	r24, 0xFF	; 255
     43e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
						date = 1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     448:	3a c0       	rjmp	.+116    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
					}
				}
				else if (date == 30)
     44a:	8e 31       	cpi	r24, 0x1E	; 30
     44c:	59 f4       	brne	.+22     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				{
					if (month == 2)
     44e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     452:	82 30       	cpi	r24, 0x02	; 2
     454:	a1 f5       	brne	.+104    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
					{
						month++;
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
						date = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     462:	3d c0       	rjmp	.+122    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					}
				}
				else if (date == 29)
     464:	8d 31       	cpi	r24, 0x1D	; 29
     466:	59 f5       	brne	.+86     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				{
					if ((month == 2) && (not_leap(year)))
     468:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     46c:	82 30       	cpi	r24, 0x02	; 2
     46e:	39 f5       	brne	.+78     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     470:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <year>
     474:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <year+0x1>
	TIFR = 0x01; //clear flag
}

static char not_leap(unsigned short year) //проверка вискосного года
{
	if (!(year % 100))
     478:	9a 01       	movw	r18, r20
     47a:	36 95       	lsr	r19
     47c:	27 95       	ror	r18
     47e:	36 95       	lsr	r19
     480:	27 95       	ror	r18
     482:	ab e7       	ldi	r26, 0x7B	; 123
     484:	b4 e1       	ldi	r27, 0x14	; 20
     486:	b2 d2       	rcall	.+1380   	; 0x9ec <__umulhisi3>
     488:	96 95       	lsr	r25
     48a:	87 95       	ror	r24
     48c:	64 e6       	ldi	r22, 0x64	; 100
     48e:	68 9f       	mul	r22, r24
     490:	90 01       	movw	r18, r0
     492:	69 9f       	mul	r22, r25
     494:	30 0d       	add	r19, r0
     496:	11 24       	eor	r1, r1
     498:	42 17       	cp	r20, r18
     49a:	53 07       	cpc	r21, r19
     49c:	31 f4       	brne	.+12     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
	{
		return (char)(year % 400);
     49e:	ca 01       	movw	r24, r20
     4a0:	60 e9       	ldi	r22, 0x90	; 144
     4a2:	71 e0       	ldi	r23, 0x01	; 1
     4a4:	8f d2       	rcall	.+1310   	; 0x9c4 <__udivmodhi4>
     4a6:	48 2f       	mov	r20, r24
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	}
	else
	{
		return (char)(year % 4);
     4aa:	43 70       	andi	r20, 0x03	; 3
						date = 1;
					}
				}
				else if (date == 29)
				{
					if ((month == 2) && (not_leap(year)))
     4ac:	44 23       	and	r20, r20
     4ae:	b9 f0       	breq	.+46     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					{
						month++;
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
						date = 1;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     4bc:	10 c0       	rjmp	.+32     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
					}
				}
				if (month == 13)
     4be:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     4c2:	8d 30       	cpi	r24, 0x0D	; 13
     4c4:	61 f4       	brne	.+24     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
				{
					month = 1;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
					year++;
     4cc:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <year>
     4d0:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <year+0x1>
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <year+0x1>
     4da:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <year>
				}
			}
		}
	}
}
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <_Z10timer1_iniv>:

//-----------------------------------------------------------------------------------------
//Блок настройки
void timer1_ini(void) // Настройка Timer1
{
	TCCR1B |= (1 << WGM12); // устанавливаем режим СТС (сброс по совпадению)
     4fc:	8e b5       	in	r24, 0x2e	; 46
     4fe:	88 60       	ori	r24, 0x08	; 8
     500:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     502:	89 b7       	in	r24, 0x39	; 57
     504:	80 64       	ori	r24, 0x40	; 64
     506:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00010000;	//записываем в регистр число для сравнения
     508:	80 e1       	ldi	r24, 0x10	; 16
     50a:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00000010;
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << CS12); //установим делитель 256.
     510:	8e b5       	in	r24, 0x2e	; 46
     512:	84 60       	ori	r24, 0x04	; 4
     514:	8e bd       	out	0x2e, r24	; 46
     516:	08 95       	ret

00000518 <_Z8port_iniv>:
	GICR = (1 << INT1) | (1 << INT0);
}*/

void port_ini() //Настройка портов ввода/вывода
{
	DDRA = 0xff;  // PORTA as OUTPUT
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; // All pins of PORTA LOW
     51c:	1b ba       	out	0x1b, r1	; 27

	DDRC = 0xff;  // PORTC as OUTPUT
     51e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00; // All pins of PORTC LOW
     520:	15 ba       	out	0x15, r1	; 21

	DDRD = 0x00;  // PORTD as INPUT
     522:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xff; // All pins of PORTD HIGH
     524:	82 bb       	out	0x12, r24	; 18
     526:	08 95       	ret

00000528 <_Z7var_iniv>:
}

void var_ini() //Инициализация переменных
{
	second = 0;
     528:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <second>
	minute = 0;
     52c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <minute>
	hour = 0;
     530:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <hour>
	date = 26;
     534:	8a e1       	ldi	r24, 0x1A	; 26
     536:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
	month = 12;
     53a:	8c e0       	ldi	r24, 0x0C	; 12
     53c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
	year = 2055;
     540:	87 e0       	ldi	r24, 0x07	; 7
     542:	98 e0       	ldi	r25, 0x08	; 8
     544:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <year+0x1>
     548:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <year>
	disp_flag = 0;
     54c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <disp_flag>
     550:	08 95       	ret

00000552 <main>:
}
//-----------------------------------------------------------------------------------------

int main(void)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <main+0x6>
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
	timer1_ini();
     55c:	cf df       	rcall	.-98     	; 0x4fc <_Z10timer1_iniv>
	//int_ini();
	port_ini();
     55e:	dc df       	rcall	.-72     	; 0x518 <_Z8port_iniv>
	var_ini();
     560:	e3 df       	rcall	.-58     	; 0x528 <_Z7var_iniv>
	UART_init(8);
     562:	88 e0       	ldi	r24, 0x08	; 8
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9a 83       	std	Y+2, r25	; 0x02
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	ce 01       	movw	r24, r28
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	07 d2       	rcall	.+1038   	; 0x97e <_Z9UART_initRKj>

	sei(); //Глобальные прерывания
     570:	78 94       	sei


	UART_send_string_ln("Print 'help' for more information");
     572:	85 e2       	ldi	r24, 0x25	; 37
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	20 d2       	rcall	.+1088   	; 0x9b8 <_Z19UART_send_string_lnPKc>
				}
				while (!(PIND & (1 << PIND3)))
					;
			}

			PORTC = ~(1 << 5);
     578:	0f 2e       	mov	r0, r31
     57a:	ff ed       	ldi	r31, 0xDF	; 223
     57c:	af 2e       	mov	r10, r31
     57e:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[((year - 2000) % 10)]; //sec1
			_delay_ms(1);

			PORTC = ~(1 << 4);
     580:	0f 2e       	mov	r0, r31
     582:	ff ee       	ldi	r31, 0xEF	; 239
     584:	bf 2e       	mov	r11, r31
     586:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[((year - 2000) / 10)]; //sec2
			_delay_ms(1);

			PORTC = ~(1 << 3);
     588:	0f 2e       	mov	r0, r31
     58a:	f7 ef       	ldi	r31, 0xF7	; 247
     58c:	cf 2e       	mov	r12, r31
     58e:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[(month % 10)]; //min1
     590:	1d ec       	ldi	r17, 0xCD	; 205
			_delay_ms(1);

			PORTC = ~(1 << 2);
     592:	0f 2e       	mov	r0, r31
     594:	fb ef       	ldi	r31, 0xFB	; 251
     596:	df 2e       	mov	r13, r31
     598:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[(month / 10)]; //min2
			_delay_ms(1);

			PORTC = ~(1 << 1);
     59a:	0f 2e       	mov	r0, r31
     59c:	fd ef       	ldi	r31, 0xFD	; 253
     59e:	ef 2e       	mov	r14, r31
     5a0:	f0 2d       	mov	r31, r0
			PORTA = numberSegments[(date % 10)]; //hour1
			_delay_ms(1);

			PORTC = ~(1 << 0);
     5a2:	0f 2e       	mov	r0, r31
     5a4:	fe ef       	ldi	r31, 0xFE	; 254
     5a6:	ff 2e       	mov	r15, r31
     5a8:	f0 2d       	mov	r31, r0
	TIFR = 0x01; //clear flag
}

static char not_leap(unsigned short year) //проверка вискосного года
{
	if (!(year % 100))
     5aa:	0f 2e       	mov	r0, r31
     5ac:	f4 e6       	ldi	r31, 0x64	; 100
     5ae:	7f 2e       	mov	r7, r31
     5b0:	f0 2d       	mov	r31, r0
	{
		return (char)(year % 400);
     5b2:	0f 2e       	mov	r0, r31
     5b4:	f0 e9       	ldi	r31, 0x90	; 144
     5b6:	8f 2e       	mov	r8, r31
     5b8:	f0 2d       	mov	r31, r0
	{

		if (!(PIND & (1 << PIND2))) //Смена даты/время
		{
			if (disp_flag == 0)
				disp_flag = 1;
     5ba:	01 e0       	ldi	r16, 0x01	; 1
					;
			}

			if (!(PIND & (1 << PIND3)))
			{
				if (++date == 32)
     5bc:	68 94       	set
     5be:	99 24       	eor	r9, r9
     5c0:	91 f8       	bld	r9, 1
	UART_send_string_ln("Print 'help' for more information");

	while (1)
	{

		if (!(PIND & (1 << PIND2))) //Смена даты/время
     5c2:	82 99       	sbic	0x10, 2	; 16
     5c4:	0b c0       	rjmp	.+22     	; 0x5dc <main+0x8a>
		{
			if (disp_flag == 0)
     5c6:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <disp_flag>
     5ca:	81 11       	cpse	r24, r1
     5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <main+0x82>
				disp_flag = 1;
     5ce:	00 93 81 01 	sts	0x0181, r16	; 0x800181 <disp_flag>
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <main+0x86>
			else
				disp_flag = 0;
     5d4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <disp_flag>
			while (!(PIND & (1 << PIND2)))
     5d8:	82 9b       	sbis	0x10, 2	; 16
     5da:	fe cf       	rjmp	.-4      	; 0x5d8 <main+0x86>
				;
		}

		//disp_flag для переключения отображения дата/время == 1/0
		if (disp_flag == 1)
     5dc:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <disp_flag>
     5e0:	81 30       	cpi	r24, 0x01	; 1
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <main+0x94>
     5e4:	0d c1       	rjmp	.+538    	; 0x800 <main+0x2ae>
		{

			if (!(PIND & (1 << PIND5)))
     5e6:	85 99       	sbic	0x10, 5	; 16
     5e8:	0b c0       	rjmp	.+22     	; 0x600 <main+0xae>
			{
				year++;
     5ea:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <year>
     5ee:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <year+0x1>
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <year+0x1>
     5f8:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <year>
				while (!(PIND & (1 << PIND5)))
     5fc:	85 9b       	sbis	0x10, 5	; 16
     5fe:	fe cf       	rjmp	.-4      	; 0x5fc <main+0xaa>
					;
			}

			if (!(PIND & (1 << PIND4)))
     600:	84 99       	sbic	0x10, 4	; 16
     602:	0f c0       	rjmp	.+30     	; 0x622 <main+0xd0>
			{
				if (++month == 13)
     604:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	8d 30       	cpi	r24, 0x0D	; 13
     60c:	19 f0       	breq	.+6      	; 0x614 <main+0xc2>
     60e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <month>
     612:	02 c0       	rjmp	.+4      	; 0x618 <main+0xc6>
					month = 1;
     614:	00 93 82 01 	sts	0x0182, r16	; 0x800182 <month>
				date = 1;
     618:	00 93 83 01 	sts	0x0183, r16	; 0x800183 <date>
				while (!(PIND & (1 << PIND4)))
     61c:	84 9b       	sbis	0x10, 4	; 16
     61e:	fe cf       	rjmp	.-4      	; 0x61c <main+0xca>
     620:	ab c1       	rjmp	.+854    	; 0x978 <main+0x426>
					;
			}

			if (!(PIND & (1 << PIND3)))
     622:	83 99       	sbic	0x10, 3	; 16
     624:	4f c0       	rjmp	.+158    	; 0x6c4 <main+0x172>
			{
				if (++date == 32)
     626:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <date>
     62a:	8f 5f       	subi	r24, 0xFF	; 255
     62c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <date>
     630:	80 32       	cpi	r24, 0x20	; 32
     632:	19 f4       	brne	.+6      	; 0x63a <main+0xe8>
				{
					date = 1;
     634:	00 93 83 01 	sts	0x0183, r16	; 0x800183 <date>
     638:	43 c0       	rjmp	.+134    	; 0x6c0 <main+0x16e>
				}
				else if (date == 31)
     63a:	8f 31       	cpi	r24, 0x1F	; 31
     63c:	51 f4       	brne	.+20     	; 0x652 <main+0x100>
				{
					if ((month == 4) || (month == 6) || (month == 9) || (month == 11))
     63e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     642:	8d 7f       	andi	r24, 0xFD	; 253
     644:	84 30       	cpi	r24, 0x04	; 4
     646:	11 f0       	breq	.+4      	; 0x64c <main+0xfa>
     648:	89 30       	cpi	r24, 0x09	; 9
     64a:	d1 f5       	brne	.+116    	; 0x6c0 <main+0x16e>
					{
						date = 1;
     64c:	00 93 83 01 	sts	0x0183, r16	; 0x800183 <date>
     650:	37 c0       	rjmp	.+110    	; 0x6c0 <main+0x16e>
					}
				}
				else if (date == 30)
     652:	8e 31       	cpi	r24, 0x1E	; 30
     654:	39 f4       	brne	.+14     	; 0x664 <main+0x112>
				{
					if (month == 2)
     656:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     65a:	82 30       	cpi	r24, 0x02	; 2
     65c:	89 f5       	brne	.+98     	; 0x6c0 <main+0x16e>
					{
						date = 1;
     65e:	00 93 83 01 	sts	0x0183, r16	; 0x800183 <date>
     662:	2e c0       	rjmp	.+92     	; 0x6c0 <main+0x16e>
					}
				}
				else if (date == 29)
     664:	8d 31       	cpi	r24, 0x1D	; 29
     666:	61 f5       	brne	.+88     	; 0x6c0 <main+0x16e>
				{
					if ((month == 2) && (not_leap(year)))
     668:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <month>
     66c:	82 30       	cpi	r24, 0x02	; 2
     66e:	41 f5       	brne	.+80     	; 0x6c0 <main+0x16e>
     670:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <year>
     674:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <year+0x1>
	TIFR = 0x01; //clear flag
}

static char not_leap(unsigned short year) //проверка вискосного года
{
	if (!(year % 100))
     678:	9a 01       	movw	r18, r20
     67a:	36 95       	lsr	r19
     67c:	27 95       	ror	r18
     67e:	36 95       	lsr	r19
     680:	27 95       	ror	r18
     682:	ab e7       	ldi	r26, 0x7B	; 123
     684:	b4 e1       	ldi	r27, 0x14	; 20
     686:	b2 d1       	rcall	.+868    	; 0x9ec <__umulhisi3>
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	78 9e       	mul	r7, r24
     68e:	90 01       	movw	r18, r0
     690:	79 9e       	mul	r7, r25
     692:	30 0d       	add	r19, r0
     694:	11 24       	eor	r1, r1
     696:	42 17       	cp	r20, r18
     698:	53 07       	cpc	r21, r19
     69a:	71 f4       	brne	.+28     	; 0x6b8 <main+0x166>
	{
		return (char)(year % 400);
     69c:	9a 01       	movw	r18, r20
     69e:	32 95       	swap	r19
     6a0:	22 95       	swap	r18
     6a2:	2f 70       	andi	r18, 0x0F	; 15
     6a4:	23 27       	eor	r18, r19
     6a6:	3f 70       	andi	r19, 0x0F	; 15
     6a8:	23 27       	eor	r18, r19
     6aa:	ae e3       	ldi	r26, 0x3E	; 62
     6ac:	ba e0       	ldi	r27, 0x0A	; 10
     6ae:	9e d1       	rcall	.+828    	; 0x9ec <__umulhisi3>
     6b0:	88 9d       	mul	r24, r8
     6b2:	40 19       	sub	r20, r0
     6b4:	11 24       	eor	r1, r1
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <main+0x168>
	}
	else
	{
		return (char)(year % 4);
     6b8:	43 70       	andi	r20, 0x03	; 3
						date = 1;
					}
				}
				else if (date == 29)
				{
					if ((month == 2) && (not_leap(year)))
     6ba:	41 11       	cpse	r20, r1
					{
						date = 1;
     6bc:	00 93 83 01 	sts	0x0183, r16	; 0x800183 <date>
					}
				}
				while (!(PIND & (1 << PIND3)))
     6c0:	83 9b       	sbis	0x10, 3	; 16
     6c2:	fe cf       	rjmp	.-4      	; 0x6c0 <main+0x16e>
					;
			}

			PORTC = ~(1 << 5);
     6c4:	a5 ba       	out	0x15, r10	; 21
			PORTA = numberSegments[((year - 2000) % 10)]; //sec1
     6c6:	40 91 7f 01 	lds	r20, 0x017F	; 0x80017f <year>
     6ca:	50 91 80 01 	lds	r21, 0x0180	; 0x800180 <year+0x1>
     6ce:	40 5d       	subi	r20, 0xD0	; 208
     6d0:	57 40       	sbci	r21, 0x07	; 7
     6d2:	9a 01       	movw	r18, r20
     6d4:	ad ec       	ldi	r26, 0xCD	; 205
     6d6:	bc ec       	ldi	r27, 0xCC	; 204
     6d8:	89 d1       	rcall	.+786    	; 0x9ec <__umulhisi3>
     6da:	96 95       	lsr	r25
     6dc:	87 95       	ror	r24
     6de:	96 95       	lsr	r25
     6e0:	87 95       	ror	r24
     6e2:	96 95       	lsr	r25
     6e4:	87 95       	ror	r24
     6e6:	9c 01       	movw	r18, r24
     6e8:	22 0f       	add	r18, r18
     6ea:	33 1f       	adc	r19, r19
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	82 0f       	add	r24, r18
     6fa:	93 1f       	adc	r25, r19
     6fc:	48 1b       	sub	r20, r24
     6fe:	59 0b       	sbc	r21, r25
     700:	fa 01       	movw	r30, r20
     702:	e0 5a       	subi	r30, 0xA0	; 160
     704:	ff 4f       	sbci	r31, 0xFF	; 255
     706:	80 81       	ld	r24, Z
     708:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70a:	8f ec       	ldi	r24, 0xCF	; 207
     70c:	97 e0       	ldi	r25, 0x07	; 7
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <main+0x1bc>
     712:	00 c0       	rjmp	.+0      	; 0x714 <main+0x1c2>
     714:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 4);
     716:	b5 ba       	out	0x15, r11	; 21
			PORTA = numberSegments[((year - 2000) / 10)]; //sec2
     718:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <year>
     71c:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <year+0x1>
     720:	20 5d       	subi	r18, 0xD0	; 208
     722:	37 40       	sbci	r19, 0x07	; 7
     724:	63 d1       	rcall	.+710    	; 0x9ec <__umulhisi3>
     726:	96 95       	lsr	r25
     728:	87 95       	ror	r24
     72a:	96 95       	lsr	r25
     72c:	87 95       	ror	r24
     72e:	96 95       	lsr	r25
     730:	87 95       	ror	r24
     732:	fc 01       	movw	r30, r24
     734:	e0 5a       	subi	r30, 0xA0	; 160
     736:	ff 4f       	sbci	r31, 0xFF	; 255
     738:	80 81       	ld	r24, Z
     73a:	8b bb       	out	0x1b, r24	; 27
     73c:	8f ec       	ldi	r24, 0xCF	; 207
     73e:	97 e0       	ldi	r25, 0x07	; 7
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <main+0x1ee>
     744:	00 c0       	rjmp	.+0      	; 0x746 <main+0x1f4>
     746:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 3);
     748:	c5 ba       	out	0x15, r12	; 21
			PORTA = numberSegments[(month % 10)]; //min1
     74a:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <month>
     74e:	e1 9f       	mul	r30, r17
     750:	81 2d       	mov	r24, r1
     752:	11 24       	eor	r1, r1
     754:	86 95       	lsr	r24
     756:	86 95       	lsr	r24
     758:	86 95       	lsr	r24
     75a:	88 0f       	add	r24, r24
     75c:	98 2f       	mov	r25, r24
     75e:	99 0f       	add	r25, r25
     760:	99 0f       	add	r25, r25
     762:	89 0f       	add	r24, r25
     764:	e8 1b       	sub	r30, r24
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	e0 5a       	subi	r30, 0xA0	; 160
     76a:	ff 4f       	sbci	r31, 0xFF	; 255
     76c:	80 81       	ld	r24, Z
     76e:	8b bb       	out	0x1b, r24	; 27
     770:	8f ec       	ldi	r24, 0xCF	; 207
     772:	97 e0       	ldi	r25, 0x07	; 7
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <main+0x222>
     778:	00 c0       	rjmp	.+0      	; 0x77a <main+0x228>
     77a:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 2);
     77c:	d5 ba       	out	0x15, r13	; 21
			PORTA = numberSegments[(month / 10)]; //min2
     77e:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <month>
     782:	e1 9f       	mul	r30, r17
     784:	e1 2d       	mov	r30, r1
     786:	11 24       	eor	r1, r1
     788:	e6 95       	lsr	r30
     78a:	e6 95       	lsr	r30
     78c:	e6 95       	lsr	r30
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	e0 5a       	subi	r30, 0xA0	; 160
     792:	ff 4f       	sbci	r31, 0xFF	; 255
     794:	80 81       	ld	r24, Z
     796:	8b bb       	out	0x1b, r24	; 27
     798:	8f ec       	ldi	r24, 0xCF	; 207
     79a:	97 e0       	ldi	r25, 0x07	; 7
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	f1 f7       	brne	.-4      	; 0x79c <main+0x24a>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <main+0x250>
     7a2:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 1);
     7a4:	e5 ba       	out	0x15, r14	; 21
			PORTA = numberSegments[(date % 10)]; //hour1
     7a6:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <date>
     7aa:	e1 9f       	mul	r30, r17
     7ac:	81 2d       	mov	r24, r1
     7ae:	11 24       	eor	r1, r1
     7b0:	86 95       	lsr	r24
     7b2:	86 95       	lsr	r24
     7b4:	86 95       	lsr	r24
     7b6:	88 0f       	add	r24, r24
     7b8:	98 2f       	mov	r25, r24
     7ba:	99 0f       	add	r25, r25
     7bc:	99 0f       	add	r25, r25
     7be:	89 0f       	add	r24, r25
     7c0:	e8 1b       	sub	r30, r24
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	e0 5a       	subi	r30, 0xA0	; 160
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	80 81       	ld	r24, Z
     7ca:	8b bb       	out	0x1b, r24	; 27
     7cc:	8f ec       	ldi	r24, 0xCF	; 207
     7ce:	97 e0       	ldi	r25, 0x07	; 7
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <main+0x27e>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <main+0x284>
     7d6:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 0);
     7d8:	f5 ba       	out	0x15, r15	; 21
			PORTA = numberSegments[(date / 10)]; //hour2
     7da:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <date>
     7de:	e1 9f       	mul	r30, r17
     7e0:	e1 2d       	mov	r30, r1
     7e2:	11 24       	eor	r1, r1
     7e4:	e6 95       	lsr	r30
     7e6:	e6 95       	lsr	r30
     7e8:	e6 95       	lsr	r30
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	e0 5a       	subi	r30, 0xA0	; 160
     7ee:	ff 4f       	sbci	r31, 0xFF	; 255
     7f0:	80 81       	ld	r24, Z
     7f2:	8b bb       	out	0x1b, r24	; 27
     7f4:	8f ec       	ldi	r24, 0xCF	; 207
     7f6:	97 e0       	ldi	r25, 0x07	; 7
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <main+0x2a6>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <main+0x2ac>
     7fe:	00 00       	nop
			_delay_ms(1);
		}

		if (disp_flag == 0)
     800:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <disp_flag>
     804:	81 11       	cpse	r24, r1
     806:	dd ce       	rjmp	.-582    	; 0x5c2 <main+0x70>
		{

			if (!(PIND & (1 << PIND5)))
     808:	85 99       	sbic	0x10, 5	; 16
     80a:	0c c0       	rjmp	.+24     	; 0x824 <main+0x2d2>
			{
				if (++second == 60)
     80c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <second>
     810:	8f 5f       	subi	r24, 0xFF	; 255
     812:	8c 33       	cpi	r24, 0x3C	; 60
     814:	19 f0       	breq	.+6      	; 0x81c <main+0x2ca>
     816:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <second>
     81a:	02 c0       	rjmp	.+4      	; 0x820 <main+0x2ce>
					second = 0;
     81c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <second>
				while (!(PIND & (1 << PIND5)))
     820:	85 9b       	sbis	0x10, 5	; 16
     822:	fe cf       	rjmp	.-4      	; 0x820 <main+0x2ce>
					;
			}

			if (!(PIND & (1 << PIND4)))
     824:	84 99       	sbic	0x10, 4	; 16
     826:	0c c0       	rjmp	.+24     	; 0x840 <main+0x2ee>
			{
				if (++minute == 60)
     828:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <minute>
     82c:	8f 5f       	subi	r24, 0xFF	; 255
     82e:	8c 33       	cpi	r24, 0x3C	; 60
     830:	19 f0       	breq	.+6      	; 0x838 <main+0x2e6>
     832:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <minute>
     836:	02 c0       	rjmp	.+4      	; 0x83c <main+0x2ea>
					minute = 0;
     838:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <minute>
				while (!(PIND & (1 << PIND4)))
     83c:	84 9b       	sbis	0x10, 4	; 16
     83e:	fe cf       	rjmp	.-4      	; 0x83c <main+0x2ea>
					;
			}

			if (!(PIND & (1 << PIND3)))
     840:	83 99       	sbic	0x10, 3	; 16
     842:	0c c0       	rjmp	.+24     	; 0x85c <main+0x30a>
			{
				if (++hour == 24)
     844:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <hour>
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	88 31       	cpi	r24, 0x18	; 24
     84c:	19 f0       	breq	.+6      	; 0x854 <main+0x302>
     84e:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <hour>
     852:	02 c0       	rjmp	.+4      	; 0x858 <main+0x306>
					hour = 0;
     854:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <hour>
				while (!(PIND & (1 << PIND3)))
     858:	83 9b       	sbis	0x10, 3	; 16
     85a:	fe cf       	rjmp	.-4      	; 0x858 <main+0x306>
					;
			}

			PORTC = ~(1 << 5);
     85c:	a5 ba       	out	0x15, r10	; 21
			PORTA = numberSegments[(second % 10)]; //sec1
     85e:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <second>
     862:	e1 9f       	mul	r30, r17
     864:	81 2d       	mov	r24, r1
     866:	11 24       	eor	r1, r1
     868:	86 95       	lsr	r24
     86a:	86 95       	lsr	r24
     86c:	86 95       	lsr	r24
     86e:	88 0f       	add	r24, r24
     870:	98 2f       	mov	r25, r24
     872:	99 0f       	add	r25, r25
     874:	99 0f       	add	r25, r25
     876:	89 0f       	add	r24, r25
     878:	e8 1b       	sub	r30, r24
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	e0 5a       	subi	r30, 0xA0	; 160
     87e:	ff 4f       	sbci	r31, 0xFF	; 255
     880:	80 81       	ld	r24, Z
     882:	8b bb       	out	0x1b, r24	; 27
     884:	8f ec       	ldi	r24, 0xCF	; 207
     886:	97 e0       	ldi	r25, 0x07	; 7
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <main+0x336>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <main+0x33c>
     88e:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 4);
     890:	b5 ba       	out	0x15, r11	; 21
			PORTA = numberSegments[(second / 10)]; //sec2
     892:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <second>
     896:	e1 9f       	mul	r30, r17
     898:	e1 2d       	mov	r30, r1
     89a:	11 24       	eor	r1, r1
     89c:	e6 95       	lsr	r30
     89e:	e6 95       	lsr	r30
     8a0:	e6 95       	lsr	r30
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	e0 5a       	subi	r30, 0xA0	; 160
     8a6:	ff 4f       	sbci	r31, 0xFF	; 255
     8a8:	80 81       	ld	r24, Z
     8aa:	8b bb       	out	0x1b, r24	; 27
     8ac:	8f ec       	ldi	r24, 0xCF	; 207
     8ae:	97 e0       	ldi	r25, 0x07	; 7
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <main+0x35e>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <main+0x364>
     8b6:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 3);
     8b8:	c5 ba       	out	0x15, r12	; 21
			PORTA = numberSegments[(minute % 10)]; //min1
     8ba:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <minute>
     8be:	e1 9f       	mul	r30, r17
     8c0:	81 2d       	mov	r24, r1
     8c2:	11 24       	eor	r1, r1
     8c4:	86 95       	lsr	r24
     8c6:	86 95       	lsr	r24
     8c8:	86 95       	lsr	r24
     8ca:	88 0f       	add	r24, r24
     8cc:	98 2f       	mov	r25, r24
     8ce:	99 0f       	add	r25, r25
     8d0:	99 0f       	add	r25, r25
     8d2:	89 0f       	add	r24, r25
     8d4:	e8 1b       	sub	r30, r24
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	e0 5a       	subi	r30, 0xA0	; 160
     8da:	ff 4f       	sbci	r31, 0xFF	; 255
     8dc:	80 81       	ld	r24, Z
     8de:	8b bb       	out	0x1b, r24	; 27
     8e0:	8f ec       	ldi	r24, 0xCF	; 207
     8e2:	97 e0       	ldi	r25, 0x07	; 7
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <main+0x392>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <main+0x398>
     8ea:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 2);
     8ec:	d5 ba       	out	0x15, r13	; 21
			PORTA = numberSegments[(minute / 10)]; //min2
     8ee:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <minute>
     8f2:	e1 9f       	mul	r30, r17
     8f4:	e1 2d       	mov	r30, r1
     8f6:	11 24       	eor	r1, r1
     8f8:	e6 95       	lsr	r30
     8fa:	e6 95       	lsr	r30
     8fc:	e6 95       	lsr	r30
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	e0 5a       	subi	r30, 0xA0	; 160
     902:	ff 4f       	sbci	r31, 0xFF	; 255
     904:	80 81       	ld	r24, Z
     906:	8b bb       	out	0x1b, r24	; 27
     908:	8f ec       	ldi	r24, 0xCF	; 207
     90a:	97 e0       	ldi	r25, 0x07	; 7
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <main+0x3ba>
     910:	00 c0       	rjmp	.+0      	; 0x912 <main+0x3c0>
     912:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 1);
     914:	e5 ba       	out	0x15, r14	; 21
			PORTA = numberSegments[(hour % 10)]; //hour1
     916:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <hour>
     91a:	e1 9f       	mul	r30, r17
     91c:	81 2d       	mov	r24, r1
     91e:	11 24       	eor	r1, r1
     920:	86 95       	lsr	r24
     922:	86 95       	lsr	r24
     924:	86 95       	lsr	r24
     926:	88 0f       	add	r24, r24
     928:	98 2f       	mov	r25, r24
     92a:	99 0f       	add	r25, r25
     92c:	99 0f       	add	r25, r25
     92e:	89 0f       	add	r24, r25
     930:	e8 1b       	sub	r30, r24
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	e0 5a       	subi	r30, 0xA0	; 160
     936:	ff 4f       	sbci	r31, 0xFF	; 255
     938:	80 81       	ld	r24, Z
     93a:	8b bb       	out	0x1b, r24	; 27
     93c:	8f ec       	ldi	r24, 0xCF	; 207
     93e:	97 e0       	ldi	r25, 0x07	; 7
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <main+0x3ee>
     944:	00 c0       	rjmp	.+0      	; 0x946 <main+0x3f4>
     946:	00 00       	nop
			_delay_ms(1);

			PORTC = ~(1 << 0);
     948:	f5 ba       	out	0x15, r15	; 21
			PORTA = numberSegments[(hour / 10)]; //hour2
     94a:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <hour>
     94e:	e1 9f       	mul	r30, r17
     950:	e1 2d       	mov	r30, r1
     952:	11 24       	eor	r1, r1
     954:	e6 95       	lsr	r30
     956:	e6 95       	lsr	r30
     958:	e6 95       	lsr	r30
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	e0 5a       	subi	r30, 0xA0	; 160
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	80 81       	ld	r24, Z
     962:	8b bb       	out	0x1b, r24	; 27
     964:	8f ec       	ldi	r24, 0xCF	; 207
     966:	97 e0       	ldi	r25, 0x07	; 7
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <main+0x416>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <main+0x41c>
     96e:	00 00       	nop
     970:	28 ce       	rjmp	.-944    	; 0x5c2 <main+0x70>
					;
			}

			if (!(PIND & (1 << PIND3)))
			{
				if (++date == 32)
     972:	90 92 83 01 	sts	0x0183, r9	; 0x800183 <date>
     976:	a4 ce       	rjmp	.-696    	; 0x6c0 <main+0x16e>
				date = 1;
				while (!(PIND & (1 << PIND4)))
					;
			}

			if (!(PIND & (1 << PIND3)))
     978:	83 99       	sbic	0x10, 3	; 16
     97a:	a4 ce       	rjmp	.-696    	; 0x6c4 <main+0x172>
     97c:	fa cf       	rjmp	.-12     	; 0x972 <main+0x420>

0000097e <_Z9UART_initRKj>:

#include "uart.h"

// UART
void UART_init(const uint16_t& speed) {
	UBRRH = (uint8_t)(speed>>8);
     97e:	fc 01       	movw	r30, r24
     980:	21 81       	ldd	r18, Z+1	; 0x01
     982:	20 bd       	out	0x20, r18	; 32
	UBRRL = (uint8_t)(speed);
     984:	80 81       	ld	r24, Z
     986:	89 b9       	out	0x09, r24	; 9
	//   Enable RXD | Enable TXD
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE); // Receiver / Transmitter / Receiver Interrupt
     988:	88 e9       	ldi	r24, 0x98	; 152
     98a:	8a b9       	out	0x0a, r24	; 10
//	UCSRA = 0;
	UCSRA |= (1<<U2X);
     98c:	59 9a       	sbi	0x0b, 1	; 11
	//       UCSRC   |        Even       |   8 bits in frame
	UCSRC = 1<<URSEL | 1<<UPM1 | 0<<UPM0 | 1<<UCSZ0 | 1<<UCSZ1;
     98e:	86 ea       	ldi	r24, 0xA6	; 166
     990:	80 bd       	out	0x20, r24	; 32
     992:	08 95       	ret

00000994 <_Z14UART_send_byteh>:
}

//  РџРµСЂРµРґР°С‡Р° РѕРґРЅРѕРіРѕ Р±Р°Р№С‚Р°
void UART_send_byte(const uint8_t byte) {
  while(!( UCSRA & (1<<UDRE)));
     994:	5d 9b       	sbis	0x0b, 5	; 11
     996:	fe cf       	rjmp	.-4      	; 0x994 <_Z14UART_send_byteh>
  UDR = byte;
     998:	8c b9       	out	0x0c, r24	; 12
     99a:	08 95       	ret

0000099c <_Z16UART_send_stringPKc>:
}


//  РџРµСЂРµРґР°С‡Р° СЃС‚СЂРѕРєРё
void UART_send_string(const char* str) {
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	ec 01       	movw	r28, r24
	while (*str != 0) {
     9a2:	88 81       	ld	r24, Y
     9a4:	88 23       	and	r24, r24
     9a6:	29 f0       	breq	.+10     	; 0x9b2 <_Z16UART_send_stringPKc+0x16>
     9a8:	21 96       	adiw	r28, 0x01	; 1
		UART_send_byte(*str++);
     9aa:	f4 df       	rcall	.-24     	; 0x994 <_Z14UART_send_byteh>
}


//  РџРµСЂРµРґР°С‡Р° СЃС‚СЂРѕРєРё
void UART_send_string(const char* str) {
	while (*str != 0) {
     9ac:	89 91       	ld	r24, Y+
     9ae:	81 11       	cpse	r24, r1
     9b0:	fc cf       	rjmp	.-8      	; 0x9aa <_Z16UART_send_stringPKc+0xe>
		UART_send_byte(*str++);
	}
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <_Z19UART_send_string_lnPKc>:


//  РџРµСЂРµРґР°С‡Р° СЃС‚СЂРѕРєРё СЃ РїРµСЂРµРІРѕРґРѕРј РєР°СЂРµС‚РєРё РЅР° РЅРѕРІСѓСЋ СЃС‚СЂРѕРєСѓ
void UART_send_string_ln(const char* str) {
  UART_send_string(str);
     9b8:	f1 df       	rcall	.-30     	; 0x99c <_Z16UART_send_stringPKc>
  UART_send_byte(0x0D); // carriage return
     9ba:	8d e0       	ldi	r24, 0x0D	; 13
     9bc:	eb df       	rcall	.-42     	; 0x994 <_Z14UART_send_byteh>
  UART_send_byte(0x0A); // new line
     9be:	8a e0       	ldi	r24, 0x0A	; 10
     9c0:	e9 df       	rcall	.-46     	; 0x994 <_Z14UART_send_byteh>
     9c2:	08 95       	ret

000009c4 <__udivmodhi4>:
     9c4:	aa 1b       	sub	r26, r26
     9c6:	bb 1b       	sub	r27, r27
     9c8:	51 e1       	ldi	r21, 0x11	; 17
     9ca:	07 c0       	rjmp	.+14     	; 0x9da <__udivmodhi4_ep>

000009cc <__udivmodhi4_loop>:
     9cc:	aa 1f       	adc	r26, r26
     9ce:	bb 1f       	adc	r27, r27
     9d0:	a6 17       	cp	r26, r22
     9d2:	b7 07       	cpc	r27, r23
     9d4:	10 f0       	brcs	.+4      	; 0x9da <__udivmodhi4_ep>
     9d6:	a6 1b       	sub	r26, r22
     9d8:	b7 0b       	sbc	r27, r23

000009da <__udivmodhi4_ep>:
     9da:	88 1f       	adc	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	5a 95       	dec	r21
     9e0:	a9 f7       	brne	.-22     	; 0x9cc <__udivmodhi4_loop>
     9e2:	80 95       	com	r24
     9e4:	90 95       	com	r25
     9e6:	bc 01       	movw	r22, r24
     9e8:	cd 01       	movw	r24, r26
     9ea:	08 95       	ret

000009ec <__umulhisi3>:
     9ec:	a2 9f       	mul	r26, r18
     9ee:	b0 01       	movw	r22, r0
     9f0:	b3 9f       	mul	r27, r19
     9f2:	c0 01       	movw	r24, r0
     9f4:	a3 9f       	mul	r26, r19
     9f6:	01 d0       	rcall	.+2      	; 0x9fa <__umulhisi3+0xe>
     9f8:	b2 9f       	mul	r27, r18
     9fa:	70 0d       	add	r23, r0
     9fc:	81 1d       	adc	r24, r1
     9fe:	11 24       	eor	r1, r1
     a00:	91 1d       	adc	r25, r1
     a02:	08 95       	ret

00000a04 <strcmp>:
     a04:	fb 01       	movw	r30, r22
     a06:	dc 01       	movw	r26, r24
     a08:	8d 91       	ld	r24, X+
     a0a:	01 90       	ld	r0, Z+
     a0c:	80 19       	sub	r24, r0
     a0e:	01 10       	cpse	r0, r1
     a10:	d9 f3       	breq	.-10     	; 0xa08 <strcmp+0x4>
     a12:	99 0b       	sbc	r25, r25
     a14:	08 95       	ret

00000a16 <sprintf>:
     a16:	ae e0       	ldi	r26, 0x0E	; 14
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e0 e1       	ldi	r30, 0x10	; 16
     a1c:	f5 e0       	ldi	r31, 0x05	; 5
     a1e:	bb c5       	rjmp	.+2934   	; 0x1596 <__prologue_saves__+0x1c>
     a20:	0d 89       	ldd	r16, Y+21	; 0x15
     a22:	1e 89       	ldd	r17, Y+22	; 0x16
     a24:	86 e0       	ldi	r24, 0x06	; 6
     a26:	8c 83       	std	Y+4, r24	; 0x04
     a28:	1a 83       	std	Y+2, r17	; 0x02
     a2a:	09 83       	std	Y+1, r16	; 0x01
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	9f e7       	ldi	r25, 0x7F	; 127
     a30:	9e 83       	std	Y+6, r25	; 0x06
     a32:	8d 83       	std	Y+5, r24	; 0x05
     a34:	ae 01       	movw	r20, r28
     a36:	47 5e       	subi	r20, 0xE7	; 231
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	6f 89       	ldd	r22, Y+23	; 0x17
     a3c:	78 8d       	ldd	r23, Y+24	; 0x18
     a3e:	ce 01       	movw	r24, r28
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	1e d0       	rcall	.+60     	; 0xa80 <vfprintf>
     a44:	ef 81       	ldd	r30, Y+7	; 0x07
     a46:	f8 85       	ldd	r31, Y+8	; 0x08
     a48:	e0 0f       	add	r30, r16
     a4a:	f1 1f       	adc	r31, r17
     a4c:	10 82       	st	Z, r1
     a4e:	2e 96       	adiw	r28, 0x0e	; 14
     a50:	e4 e0       	ldi	r30, 0x04	; 4
     a52:	bd c5       	rjmp	.+2938   	; 0x15ce <__epilogue_restores__+0x1c>

00000a54 <sscanf>:
     a54:	ae e0       	ldi	r26, 0x0E	; 14
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	ef e2       	ldi	r30, 0x2F	; 47
     a5a:	f5 e0       	ldi	r31, 0x05	; 5
     a5c:	9e c5       	rjmp	.+2876   	; 0x159a <__prologue_saves__+0x20>
     a5e:	85 e0       	ldi	r24, 0x05	; 5
     a60:	8c 83       	std	Y+4, r24	; 0x04
     a62:	8b 89       	ldd	r24, Y+19	; 0x13
     a64:	9c 89       	ldd	r25, Y+20	; 0x14
     a66:	9a 83       	std	Y+2, r25	; 0x02
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	ae 01       	movw	r20, r28
     a6c:	49 5e       	subi	r20, 0xE9	; 233
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	6d 89       	ldd	r22, Y+21	; 0x15
     a72:	7e 89       	ldd	r23, Y+22	; 0x16
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	62 d3       	rcall	.+1732   	; 0x113e <vfscanf>
     a7a:	2e 96       	adiw	r28, 0x0e	; 14
     a7c:	e2 e0       	ldi	r30, 0x02	; 2
     a7e:	a9 c5       	rjmp	.+2898   	; 0x15d2 <__epilogue_restores__+0x20>

00000a80 <vfprintf>:
     a80:	ab e0       	ldi	r26, 0x0B	; 11
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	e5 e4       	ldi	r30, 0x45	; 69
     a86:	f5 e0       	ldi	r31, 0x05	; 5
     a88:	78 c5       	rjmp	.+2800   	; 0x157a <__prologue_saves__>
     a8a:	6c 01       	movw	r12, r24
     a8c:	7b 01       	movw	r14, r22
     a8e:	8a 01       	movw	r16, r20
     a90:	fc 01       	movw	r30, r24
     a92:	17 82       	std	Z+7, r1	; 0x07
     a94:	16 82       	std	Z+6, r1	; 0x06
     a96:	83 81       	ldd	r24, Z+3	; 0x03
     a98:	81 ff       	sbrs	r24, 1
     a9a:	bf c1       	rjmp	.+894    	; 0xe1a <vfprintf+0x39a>
     a9c:	ce 01       	movw	r24, r28
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	3c 01       	movw	r6, r24
     aa2:	f6 01       	movw	r30, r12
     aa4:	93 81       	ldd	r25, Z+3	; 0x03
     aa6:	f7 01       	movw	r30, r14
     aa8:	93 fd       	sbrc	r25, 3
     aaa:	85 91       	lpm	r24, Z+
     aac:	93 ff       	sbrs	r25, 3
     aae:	81 91       	ld	r24, Z+
     ab0:	7f 01       	movw	r14, r30
     ab2:	88 23       	and	r24, r24
     ab4:	09 f4       	brne	.+2      	; 0xab8 <vfprintf+0x38>
     ab6:	ad c1       	rjmp	.+858    	; 0xe12 <vfprintf+0x392>
     ab8:	85 32       	cpi	r24, 0x25	; 37
     aba:	39 f4       	brne	.+14     	; 0xaca <vfprintf+0x4a>
     abc:	93 fd       	sbrc	r25, 3
     abe:	85 91       	lpm	r24, Z+
     ac0:	93 ff       	sbrs	r25, 3
     ac2:	81 91       	ld	r24, Z+
     ac4:	7f 01       	movw	r14, r30
     ac6:	85 32       	cpi	r24, 0x25	; 37
     ac8:	21 f4       	brne	.+8      	; 0xad2 <vfprintf+0x52>
     aca:	b6 01       	movw	r22, r12
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	9f d4       	rcall	.+2366   	; 0x140e <fputc>
     ad0:	e8 cf       	rjmp	.-48     	; 0xaa2 <vfprintf+0x22>
     ad2:	91 2c       	mov	r9, r1
     ad4:	21 2c       	mov	r2, r1
     ad6:	31 2c       	mov	r3, r1
     ad8:	ff e1       	ldi	r31, 0x1F	; 31
     ada:	f3 15       	cp	r31, r3
     adc:	d8 f0       	brcs	.+54     	; 0xb14 <vfprintf+0x94>
     ade:	8b 32       	cpi	r24, 0x2B	; 43
     ae0:	79 f0       	breq	.+30     	; 0xb00 <vfprintf+0x80>
     ae2:	38 f4       	brcc	.+14     	; 0xaf2 <vfprintf+0x72>
     ae4:	80 32       	cpi	r24, 0x20	; 32
     ae6:	79 f0       	breq	.+30     	; 0xb06 <vfprintf+0x86>
     ae8:	83 32       	cpi	r24, 0x23	; 35
     aea:	a1 f4       	brne	.+40     	; 0xb14 <vfprintf+0x94>
     aec:	23 2d       	mov	r18, r3
     aee:	20 61       	ori	r18, 0x10	; 16
     af0:	1d c0       	rjmp	.+58     	; 0xb2c <vfprintf+0xac>
     af2:	8d 32       	cpi	r24, 0x2D	; 45
     af4:	61 f0       	breq	.+24     	; 0xb0e <vfprintf+0x8e>
     af6:	80 33       	cpi	r24, 0x30	; 48
     af8:	69 f4       	brne	.+26     	; 0xb14 <vfprintf+0x94>
     afa:	23 2d       	mov	r18, r3
     afc:	21 60       	ori	r18, 0x01	; 1
     afe:	16 c0       	rjmp	.+44     	; 0xb2c <vfprintf+0xac>
     b00:	83 2d       	mov	r24, r3
     b02:	82 60       	ori	r24, 0x02	; 2
     b04:	38 2e       	mov	r3, r24
     b06:	e3 2d       	mov	r30, r3
     b08:	e4 60       	ori	r30, 0x04	; 4
     b0a:	3e 2e       	mov	r3, r30
     b0c:	2a c0       	rjmp	.+84     	; 0xb62 <vfprintf+0xe2>
     b0e:	f3 2d       	mov	r31, r3
     b10:	f8 60       	ori	r31, 0x08	; 8
     b12:	1d c0       	rjmp	.+58     	; 0xb4e <vfprintf+0xce>
     b14:	37 fc       	sbrc	r3, 7
     b16:	2d c0       	rjmp	.+90     	; 0xb72 <vfprintf+0xf2>
     b18:	20 ed       	ldi	r18, 0xD0	; 208
     b1a:	28 0f       	add	r18, r24
     b1c:	2a 30       	cpi	r18, 0x0A	; 10
     b1e:	40 f0       	brcs	.+16     	; 0xb30 <vfprintf+0xb0>
     b20:	8e 32       	cpi	r24, 0x2E	; 46
     b22:	b9 f4       	brne	.+46     	; 0xb52 <vfprintf+0xd2>
     b24:	36 fc       	sbrc	r3, 6
     b26:	75 c1       	rjmp	.+746    	; 0xe12 <vfprintf+0x392>
     b28:	23 2d       	mov	r18, r3
     b2a:	20 64       	ori	r18, 0x40	; 64
     b2c:	32 2e       	mov	r3, r18
     b2e:	19 c0       	rjmp	.+50     	; 0xb62 <vfprintf+0xe2>
     b30:	36 fe       	sbrs	r3, 6
     b32:	06 c0       	rjmp	.+12     	; 0xb40 <vfprintf+0xc0>
     b34:	8a e0       	ldi	r24, 0x0A	; 10
     b36:	98 9e       	mul	r9, r24
     b38:	20 0d       	add	r18, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	92 2e       	mov	r9, r18
     b3e:	11 c0       	rjmp	.+34     	; 0xb62 <vfprintf+0xe2>
     b40:	ea e0       	ldi	r30, 0x0A	; 10
     b42:	2e 9e       	mul	r2, r30
     b44:	20 0d       	add	r18, r0
     b46:	11 24       	eor	r1, r1
     b48:	22 2e       	mov	r2, r18
     b4a:	f3 2d       	mov	r31, r3
     b4c:	f0 62       	ori	r31, 0x20	; 32
     b4e:	3f 2e       	mov	r3, r31
     b50:	08 c0       	rjmp	.+16     	; 0xb62 <vfprintf+0xe2>
     b52:	8c 36       	cpi	r24, 0x6C	; 108
     b54:	21 f4       	brne	.+8      	; 0xb5e <vfprintf+0xde>
     b56:	83 2d       	mov	r24, r3
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	38 2e       	mov	r3, r24
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <vfprintf+0xe2>
     b5e:	88 36       	cpi	r24, 0x68	; 104
     b60:	41 f4       	brne	.+16     	; 0xb72 <vfprintf+0xf2>
     b62:	f7 01       	movw	r30, r14
     b64:	93 fd       	sbrc	r25, 3
     b66:	85 91       	lpm	r24, Z+
     b68:	93 ff       	sbrs	r25, 3
     b6a:	81 91       	ld	r24, Z+
     b6c:	7f 01       	movw	r14, r30
     b6e:	81 11       	cpse	r24, r1
     b70:	b3 cf       	rjmp	.-154    	; 0xad8 <vfprintf+0x58>
     b72:	98 2f       	mov	r25, r24
     b74:	9f 7d       	andi	r25, 0xDF	; 223
     b76:	95 54       	subi	r25, 0x45	; 69
     b78:	93 30       	cpi	r25, 0x03	; 3
     b7a:	28 f4       	brcc	.+10     	; 0xb86 <vfprintf+0x106>
     b7c:	0c 5f       	subi	r16, 0xFC	; 252
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
     b80:	9f e3       	ldi	r25, 0x3F	; 63
     b82:	99 83       	std	Y+1, r25	; 0x01
     b84:	0d c0       	rjmp	.+26     	; 0xba0 <vfprintf+0x120>
     b86:	83 36       	cpi	r24, 0x63	; 99
     b88:	31 f0       	breq	.+12     	; 0xb96 <vfprintf+0x116>
     b8a:	83 37       	cpi	r24, 0x73	; 115
     b8c:	71 f0       	breq	.+28     	; 0xbaa <vfprintf+0x12a>
     b8e:	83 35       	cpi	r24, 0x53	; 83
     b90:	09 f0       	breq	.+2      	; 0xb94 <vfprintf+0x114>
     b92:	55 c0       	rjmp	.+170    	; 0xc3e <vfprintf+0x1be>
     b94:	20 c0       	rjmp	.+64     	; 0xbd6 <vfprintf+0x156>
     b96:	f8 01       	movw	r30, r16
     b98:	80 81       	ld	r24, Z
     b9a:	89 83       	std	Y+1, r24	; 0x01
     b9c:	0e 5f       	subi	r16, 0xFE	; 254
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	88 24       	eor	r8, r8
     ba2:	83 94       	inc	r8
     ba4:	91 2c       	mov	r9, r1
     ba6:	53 01       	movw	r10, r6
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <vfprintf+0x14e>
     baa:	28 01       	movw	r4, r16
     bac:	f2 e0       	ldi	r31, 0x02	; 2
     bae:	4f 0e       	add	r4, r31
     bb0:	51 1c       	adc	r5, r1
     bb2:	f8 01       	movw	r30, r16
     bb4:	a0 80       	ld	r10, Z
     bb6:	b1 80       	ldd	r11, Z+1	; 0x01
     bb8:	36 fe       	sbrs	r3, 6
     bba:	03 c0       	rjmp	.+6      	; 0xbc2 <vfprintf+0x142>
     bbc:	69 2d       	mov	r22, r9
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <vfprintf+0x146>
     bc2:	6f ef       	ldi	r22, 0xFF	; 255
     bc4:	7f ef       	ldi	r23, 0xFF	; 255
     bc6:	c5 01       	movw	r24, r10
     bc8:	d9 d3       	rcall	.+1970   	; 0x137c <strnlen>
     bca:	4c 01       	movw	r8, r24
     bcc:	82 01       	movw	r16, r4
     bce:	f3 2d       	mov	r31, r3
     bd0:	ff 77       	andi	r31, 0x7F	; 127
     bd2:	3f 2e       	mov	r3, r31
     bd4:	15 c0       	rjmp	.+42     	; 0xc00 <vfprintf+0x180>
     bd6:	28 01       	movw	r4, r16
     bd8:	22 e0       	ldi	r18, 0x02	; 2
     bda:	42 0e       	add	r4, r18
     bdc:	51 1c       	adc	r5, r1
     bde:	f8 01       	movw	r30, r16
     be0:	a0 80       	ld	r10, Z
     be2:	b1 80       	ldd	r11, Z+1	; 0x01
     be4:	36 fe       	sbrs	r3, 6
     be6:	03 c0       	rjmp	.+6      	; 0xbee <vfprintf+0x16e>
     be8:	69 2d       	mov	r22, r9
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <vfprintf+0x172>
     bee:	6f ef       	ldi	r22, 0xFF	; 255
     bf0:	7f ef       	ldi	r23, 0xFF	; 255
     bf2:	c5 01       	movw	r24, r10
     bf4:	b8 d3       	rcall	.+1904   	; 0x1366 <strnlen_P>
     bf6:	4c 01       	movw	r8, r24
     bf8:	f3 2d       	mov	r31, r3
     bfa:	f0 68       	ori	r31, 0x80	; 128
     bfc:	3f 2e       	mov	r3, r31
     bfe:	82 01       	movw	r16, r4
     c00:	33 fc       	sbrc	r3, 3
     c02:	19 c0       	rjmp	.+50     	; 0xc36 <vfprintf+0x1b6>
     c04:	82 2d       	mov	r24, r2
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	88 16       	cp	r8, r24
     c0a:	99 06       	cpc	r9, r25
     c0c:	a0 f4       	brcc	.+40     	; 0xc36 <vfprintf+0x1b6>
     c0e:	b6 01       	movw	r22, r12
     c10:	80 e2       	ldi	r24, 0x20	; 32
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	fc d3       	rcall	.+2040   	; 0x140e <fputc>
     c16:	2a 94       	dec	r2
     c18:	f5 cf       	rjmp	.-22     	; 0xc04 <vfprintf+0x184>
     c1a:	f5 01       	movw	r30, r10
     c1c:	37 fc       	sbrc	r3, 7
     c1e:	85 91       	lpm	r24, Z+
     c20:	37 fe       	sbrs	r3, 7
     c22:	81 91       	ld	r24, Z+
     c24:	5f 01       	movw	r10, r30
     c26:	b6 01       	movw	r22, r12
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	f1 d3       	rcall	.+2018   	; 0x140e <fputc>
     c2c:	21 10       	cpse	r2, r1
     c2e:	2a 94       	dec	r2
     c30:	21 e0       	ldi	r18, 0x01	; 1
     c32:	82 1a       	sub	r8, r18
     c34:	91 08       	sbc	r9, r1
     c36:	81 14       	cp	r8, r1
     c38:	91 04       	cpc	r9, r1
     c3a:	79 f7       	brne	.-34     	; 0xc1a <vfprintf+0x19a>
     c3c:	e1 c0       	rjmp	.+450    	; 0xe00 <vfprintf+0x380>
     c3e:	84 36       	cpi	r24, 0x64	; 100
     c40:	11 f0       	breq	.+4      	; 0xc46 <vfprintf+0x1c6>
     c42:	89 36       	cpi	r24, 0x69	; 105
     c44:	39 f5       	brne	.+78     	; 0xc94 <vfprintf+0x214>
     c46:	f8 01       	movw	r30, r16
     c48:	37 fe       	sbrs	r3, 7
     c4a:	07 c0       	rjmp	.+14     	; 0xc5a <vfprintf+0x1da>
     c4c:	60 81       	ld	r22, Z
     c4e:	71 81       	ldd	r23, Z+1	; 0x01
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	0c 5f       	subi	r16, 0xFC	; 252
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	08 c0       	rjmp	.+16     	; 0xc6a <vfprintf+0x1ea>
     c5a:	60 81       	ld	r22, Z
     c5c:	71 81       	ldd	r23, Z+1	; 0x01
     c5e:	07 2e       	mov	r0, r23
     c60:	00 0c       	add	r0, r0
     c62:	88 0b       	sbc	r24, r24
     c64:	99 0b       	sbc	r25, r25
     c66:	0e 5f       	subi	r16, 0xFE	; 254
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	f3 2d       	mov	r31, r3
     c6c:	ff 76       	andi	r31, 0x6F	; 111
     c6e:	3f 2e       	mov	r3, r31
     c70:	97 ff       	sbrs	r25, 7
     c72:	09 c0       	rjmp	.+18     	; 0xc86 <vfprintf+0x206>
     c74:	90 95       	com	r25
     c76:	80 95       	com	r24
     c78:	70 95       	com	r23
     c7a:	61 95       	neg	r22
     c7c:	7f 4f       	sbci	r23, 0xFF	; 255
     c7e:	8f 4f       	sbci	r24, 0xFF	; 255
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	f0 68       	ori	r31, 0x80	; 128
     c84:	3f 2e       	mov	r3, r31
     c86:	2a e0       	ldi	r18, 0x0A	; 10
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	a3 01       	movw	r20, r6
     c8c:	15 d4       	rcall	.+2090   	; 0x14b8 <__ultoa_invert>
     c8e:	88 2e       	mov	r8, r24
     c90:	86 18       	sub	r8, r6
     c92:	44 c0       	rjmp	.+136    	; 0xd1c <vfprintf+0x29c>
     c94:	85 37       	cpi	r24, 0x75	; 117
     c96:	31 f4       	brne	.+12     	; 0xca4 <vfprintf+0x224>
     c98:	23 2d       	mov	r18, r3
     c9a:	2f 7e       	andi	r18, 0xEF	; 239
     c9c:	b2 2e       	mov	r11, r18
     c9e:	2a e0       	ldi	r18, 0x0A	; 10
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	25 c0       	rjmp	.+74     	; 0xcee <vfprintf+0x26e>
     ca4:	93 2d       	mov	r25, r3
     ca6:	99 7f       	andi	r25, 0xF9	; 249
     ca8:	b9 2e       	mov	r11, r25
     caa:	8f 36       	cpi	r24, 0x6F	; 111
     cac:	c1 f0       	breq	.+48     	; 0xcde <vfprintf+0x25e>
     cae:	18 f4       	brcc	.+6      	; 0xcb6 <vfprintf+0x236>
     cb0:	88 35       	cpi	r24, 0x58	; 88
     cb2:	79 f0       	breq	.+30     	; 0xcd2 <vfprintf+0x252>
     cb4:	ae c0       	rjmp	.+348    	; 0xe12 <vfprintf+0x392>
     cb6:	80 37       	cpi	r24, 0x70	; 112
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <vfprintf+0x240>
     cba:	88 37       	cpi	r24, 0x78	; 120
     cbc:	21 f0       	breq	.+8      	; 0xcc6 <vfprintf+0x246>
     cbe:	a9 c0       	rjmp	.+338    	; 0xe12 <vfprintf+0x392>
     cc0:	e9 2f       	mov	r30, r25
     cc2:	e0 61       	ori	r30, 0x10	; 16
     cc4:	be 2e       	mov	r11, r30
     cc6:	b4 fe       	sbrs	r11, 4
     cc8:	0d c0       	rjmp	.+26     	; 0xce4 <vfprintf+0x264>
     cca:	fb 2d       	mov	r31, r11
     ccc:	f4 60       	ori	r31, 0x04	; 4
     cce:	bf 2e       	mov	r11, r31
     cd0:	09 c0       	rjmp	.+18     	; 0xce4 <vfprintf+0x264>
     cd2:	34 fe       	sbrs	r3, 4
     cd4:	0a c0       	rjmp	.+20     	; 0xcea <vfprintf+0x26a>
     cd6:	29 2f       	mov	r18, r25
     cd8:	26 60       	ori	r18, 0x06	; 6
     cda:	b2 2e       	mov	r11, r18
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <vfprintf+0x26a>
     cde:	28 e0       	ldi	r18, 0x08	; 8
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <vfprintf+0x26e>
     ce4:	20 e1       	ldi	r18, 0x10	; 16
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <vfprintf+0x26e>
     cea:	20 e1       	ldi	r18, 0x10	; 16
     cec:	32 e0       	ldi	r19, 0x02	; 2
     cee:	f8 01       	movw	r30, r16
     cf0:	b7 fe       	sbrs	r11, 7
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <vfprintf+0x282>
     cf4:	60 81       	ld	r22, Z
     cf6:	71 81       	ldd	r23, Z+1	; 0x01
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	0c 5f       	subi	r16, 0xFC	; 252
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <vfprintf+0x28e>
     d02:	60 81       	ld	r22, Z
     d04:	71 81       	ldd	r23, Z+1	; 0x01
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 5f       	subi	r16, 0xFE	; 254
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	a3 01       	movw	r20, r6
     d10:	d3 d3       	rcall	.+1958   	; 0x14b8 <__ultoa_invert>
     d12:	88 2e       	mov	r8, r24
     d14:	86 18       	sub	r8, r6
     d16:	fb 2d       	mov	r31, r11
     d18:	ff 77       	andi	r31, 0x7F	; 127
     d1a:	3f 2e       	mov	r3, r31
     d1c:	36 fe       	sbrs	r3, 6
     d1e:	0d c0       	rjmp	.+26     	; 0xd3a <vfprintf+0x2ba>
     d20:	23 2d       	mov	r18, r3
     d22:	2e 7f       	andi	r18, 0xFE	; 254
     d24:	a2 2e       	mov	r10, r18
     d26:	89 14       	cp	r8, r9
     d28:	58 f4       	brcc	.+22     	; 0xd40 <vfprintf+0x2c0>
     d2a:	34 fe       	sbrs	r3, 4
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <vfprintf+0x2c4>
     d2e:	32 fc       	sbrc	r3, 2
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <vfprintf+0x2c4>
     d32:	83 2d       	mov	r24, r3
     d34:	8e 7e       	andi	r24, 0xEE	; 238
     d36:	a8 2e       	mov	r10, r24
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <vfprintf+0x2c4>
     d3a:	b8 2c       	mov	r11, r8
     d3c:	a3 2c       	mov	r10, r3
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <vfprintf+0x2c6>
     d40:	b8 2c       	mov	r11, r8
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <vfprintf+0x2c6>
     d44:	b9 2c       	mov	r11, r9
     d46:	a4 fe       	sbrs	r10, 4
     d48:	0f c0       	rjmp	.+30     	; 0xd68 <vfprintf+0x2e8>
     d4a:	fe 01       	movw	r30, r28
     d4c:	e8 0d       	add	r30, r8
     d4e:	f1 1d       	adc	r31, r1
     d50:	80 81       	ld	r24, Z
     d52:	80 33       	cpi	r24, 0x30	; 48
     d54:	21 f4       	brne	.+8      	; 0xd5e <vfprintf+0x2de>
     d56:	9a 2d       	mov	r25, r10
     d58:	99 7e       	andi	r25, 0xE9	; 233
     d5a:	a9 2e       	mov	r10, r25
     d5c:	09 c0       	rjmp	.+18     	; 0xd70 <vfprintf+0x2f0>
     d5e:	a2 fe       	sbrs	r10, 2
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <vfprintf+0x2ee>
     d62:	b3 94       	inc	r11
     d64:	b3 94       	inc	r11
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <vfprintf+0x2f0>
     d68:	8a 2d       	mov	r24, r10
     d6a:	86 78       	andi	r24, 0x86	; 134
     d6c:	09 f0       	breq	.+2      	; 0xd70 <vfprintf+0x2f0>
     d6e:	b3 94       	inc	r11
     d70:	a3 fc       	sbrc	r10, 3
     d72:	10 c0       	rjmp	.+32     	; 0xd94 <vfprintf+0x314>
     d74:	a0 fe       	sbrs	r10, 0
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <vfprintf+0x304>
     d78:	b2 14       	cp	r11, r2
     d7a:	80 f4       	brcc	.+32     	; 0xd9c <vfprintf+0x31c>
     d7c:	28 0c       	add	r2, r8
     d7e:	92 2c       	mov	r9, r2
     d80:	9b 18       	sub	r9, r11
     d82:	0d c0       	rjmp	.+26     	; 0xd9e <vfprintf+0x31e>
     d84:	b2 14       	cp	r11, r2
     d86:	58 f4       	brcc	.+22     	; 0xd9e <vfprintf+0x31e>
     d88:	b6 01       	movw	r22, r12
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	3f d3       	rcall	.+1662   	; 0x140e <fputc>
     d90:	b3 94       	inc	r11
     d92:	f8 cf       	rjmp	.-16     	; 0xd84 <vfprintf+0x304>
     d94:	b2 14       	cp	r11, r2
     d96:	18 f4       	brcc	.+6      	; 0xd9e <vfprintf+0x31e>
     d98:	2b 18       	sub	r2, r11
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <vfprintf+0x320>
     d9c:	98 2c       	mov	r9, r8
     d9e:	21 2c       	mov	r2, r1
     da0:	a4 fe       	sbrs	r10, 4
     da2:	0f c0       	rjmp	.+30     	; 0xdc2 <vfprintf+0x342>
     da4:	b6 01       	movw	r22, r12
     da6:	80 e3       	ldi	r24, 0x30	; 48
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	31 d3       	rcall	.+1634   	; 0x140e <fputc>
     dac:	a2 fe       	sbrs	r10, 2
     dae:	16 c0       	rjmp	.+44     	; 0xddc <vfprintf+0x35c>
     db0:	a1 fc       	sbrc	r10, 1
     db2:	03 c0       	rjmp	.+6      	; 0xdba <vfprintf+0x33a>
     db4:	88 e7       	ldi	r24, 0x78	; 120
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <vfprintf+0x33e>
     dba:	88 e5       	ldi	r24, 0x58	; 88
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	b6 01       	movw	r22, r12
     dc0:	0c c0       	rjmp	.+24     	; 0xdda <vfprintf+0x35a>
     dc2:	8a 2d       	mov	r24, r10
     dc4:	86 78       	andi	r24, 0x86	; 134
     dc6:	51 f0       	breq	.+20     	; 0xddc <vfprintf+0x35c>
     dc8:	a1 fe       	sbrs	r10, 1
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <vfprintf+0x350>
     dcc:	8b e2       	ldi	r24, 0x2B	; 43
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <vfprintf+0x352>
     dd0:	80 e2       	ldi	r24, 0x20	; 32
     dd2:	a7 fc       	sbrc	r10, 7
     dd4:	8d e2       	ldi	r24, 0x2D	; 45
     dd6:	b6 01       	movw	r22, r12
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	19 d3       	rcall	.+1586   	; 0x140e <fputc>
     ddc:	89 14       	cp	r8, r9
     dde:	30 f4       	brcc	.+12     	; 0xdec <vfprintf+0x36c>
     de0:	b6 01       	movw	r22, r12
     de2:	80 e3       	ldi	r24, 0x30	; 48
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	13 d3       	rcall	.+1574   	; 0x140e <fputc>
     de8:	9a 94       	dec	r9
     dea:	f8 cf       	rjmp	.-16     	; 0xddc <vfprintf+0x35c>
     dec:	8a 94       	dec	r8
     dee:	f3 01       	movw	r30, r6
     df0:	e8 0d       	add	r30, r8
     df2:	f1 1d       	adc	r31, r1
     df4:	80 81       	ld	r24, Z
     df6:	b6 01       	movw	r22, r12
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	09 d3       	rcall	.+1554   	; 0x140e <fputc>
     dfc:	81 10       	cpse	r8, r1
     dfe:	f6 cf       	rjmp	.-20     	; 0xdec <vfprintf+0x36c>
     e00:	22 20       	and	r2, r2
     e02:	09 f4       	brne	.+2      	; 0xe06 <vfprintf+0x386>
     e04:	4e ce       	rjmp	.-868    	; 0xaa2 <vfprintf+0x22>
     e06:	b6 01       	movw	r22, r12
     e08:	80 e2       	ldi	r24, 0x20	; 32
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	00 d3       	rcall	.+1536   	; 0x140e <fputc>
     e0e:	2a 94       	dec	r2
     e10:	f7 cf       	rjmp	.-18     	; 0xe00 <vfprintf+0x380>
     e12:	f6 01       	movw	r30, r12
     e14:	86 81       	ldd	r24, Z+6	; 0x06
     e16:	97 81       	ldd	r25, Z+7	; 0x07
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <vfprintf+0x39e>
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	9f ef       	ldi	r25, 0xFF	; 255
     e1e:	2b 96       	adiw	r28, 0x0b	; 11
     e20:	e2 e1       	ldi	r30, 0x12	; 18
     e22:	c7 c3       	rjmp	.+1934   	; 0x15b2 <__epilogue_restores__>

00000e24 <putval>:
     e24:	20 fd       	sbrc	r18, 0
     e26:	09 c0       	rjmp	.+18     	; 0xe3a <putval+0x16>
     e28:	fc 01       	movw	r30, r24
     e2a:	23 fd       	sbrc	r18, 3
     e2c:	05 c0       	rjmp	.+10     	; 0xe38 <putval+0x14>
     e2e:	22 ff       	sbrs	r18, 2
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <putval+0x12>
     e32:	73 83       	std	Z+3, r23	; 0x03
     e34:	62 83       	std	Z+2, r22	; 0x02
     e36:	51 83       	std	Z+1, r21	; 0x01
     e38:	40 83       	st	Z, r20
     e3a:	08 95       	ret

00000e3c <mulacc>:
     e3c:	44 fd       	sbrc	r20, 4
     e3e:	17 c0       	rjmp	.+46     	; 0xe6e <mulacc+0x32>
     e40:	46 fd       	sbrc	r20, 6
     e42:	17 c0       	rjmp	.+46     	; 0xe72 <mulacc+0x36>
     e44:	ab 01       	movw	r20, r22
     e46:	bc 01       	movw	r22, r24
     e48:	da 01       	movw	r26, r20
     e4a:	fb 01       	movw	r30, r22
     e4c:	aa 0f       	add	r26, r26
     e4e:	bb 1f       	adc	r27, r27
     e50:	ee 1f       	adc	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	10 94       	com	r1
     e56:	d1 f7       	brne	.-12     	; 0xe4c <mulacc+0x10>
     e58:	4a 0f       	add	r20, r26
     e5a:	5b 1f       	adc	r21, r27
     e5c:	6e 1f       	adc	r22, r30
     e5e:	7f 1f       	adc	r23, r31
     e60:	cb 01       	movw	r24, r22
     e62:	ba 01       	movw	r22, r20
     e64:	66 0f       	add	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	88 1f       	adc	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <mulacc+0x44>
     e6e:	33 e0       	ldi	r19, 0x03	; 3
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <mulacc+0x38>
     e72:	34 e0       	ldi	r19, 0x04	; 4
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	88 1f       	adc	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	31 50       	subi	r19, 0x01	; 1
     e7e:	d1 f7       	brne	.-12     	; 0xe74 <mulacc+0x38>
     e80:	62 0f       	add	r22, r18
     e82:	71 1d       	adc	r23, r1
     e84:	81 1d       	adc	r24, r1
     e86:	91 1d       	adc	r25, r1
     e88:	08 95       	ret

00000e8a <skip_spaces>:
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	8c 01       	movw	r16, r24
     e94:	c8 01       	movw	r24, r16
     e96:	7d d2       	rcall	.+1274   	; 0x1392 <fgetc>
     e98:	ec 01       	movw	r28, r24
     e9a:	97 fd       	sbrc	r25, 7
     e9c:	06 c0       	rjmp	.+12     	; 0xeaa <skip_spaces+0x20>
     e9e:	50 d2       	rcall	.+1184   	; 0x1340 <isspace>
     ea0:	89 2b       	or	r24, r25
     ea2:	c1 f7       	brne	.-16     	; 0xe94 <skip_spaces+0xa>
     ea4:	b8 01       	movw	r22, r16
     ea6:	ce 01       	movw	r24, r28
     ea8:	ee d2       	rcall	.+1500   	; 0x1486 <ungetc>
     eaa:	ce 01       	movw	r24, r28
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	08 95       	ret

00000eb6 <conv_int>:
     eb6:	8f 92       	push	r8
     eb8:	9f 92       	push	r9
     eba:	af 92       	push	r10
     ebc:	bf 92       	push	r11
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	8c 01       	movw	r16, r24
     ecc:	d6 2f       	mov	r29, r22
     ece:	7a 01       	movw	r14, r20
     ed0:	b2 2e       	mov	r11, r18
     ed2:	5f d2       	rcall	.+1214   	; 0x1392 <fgetc>
     ed4:	9c 01       	movw	r18, r24
     ed6:	33 27       	eor	r19, r19
     ed8:	2b 32       	cpi	r18, 0x2B	; 43
     eda:	31 05       	cpc	r19, r1
     edc:	31 f0       	breq	.+12     	; 0xeea <conv_int+0x34>
     ede:	2d 32       	cpi	r18, 0x2D	; 45
     ee0:	31 05       	cpc	r19, r1
     ee2:	59 f4       	brne	.+22     	; 0xefa <conv_int+0x44>
     ee4:	8b 2d       	mov	r24, r11
     ee6:	80 68       	ori	r24, 0x80	; 128
     ee8:	b8 2e       	mov	r11, r24
     eea:	d1 50       	subi	r29, 0x01	; 1
     eec:	11 f4       	brne	.+4      	; 0xef2 <conv_int+0x3c>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	61 c0       	rjmp	.+194    	; 0xfb4 <conv_int+0xfe>
     ef2:	c8 01       	movw	r24, r16
     ef4:	4e d2       	rcall	.+1180   	; 0x1392 <fgetc>
     ef6:	97 fd       	sbrc	r25, 7
     ef8:	fa cf       	rjmp	.-12     	; 0xeee <conv_int+0x38>
     efa:	cb 2d       	mov	r28, r11
     efc:	cd 7f       	andi	r28, 0xFD	; 253
     efe:	2b 2d       	mov	r18, r11
     f00:	20 73       	andi	r18, 0x30	; 48
     f02:	f9 f4       	brne	.+62     	; 0xf42 <conv_int+0x8c>
     f04:	80 33       	cpi	r24, 0x30	; 48
     f06:	e9 f4       	brne	.+58     	; 0xf42 <conv_int+0x8c>
     f08:	aa 24       	eor	r10, r10
     f0a:	aa 94       	dec	r10
     f0c:	ad 0e       	add	r10, r29
     f0e:	09 f4       	brne	.+2      	; 0xf12 <conv_int+0x5c>
     f10:	3e c0       	rjmp	.+124    	; 0xf8e <conv_int+0xd8>
     f12:	c8 01       	movw	r24, r16
     f14:	3e d2       	rcall	.+1148   	; 0x1392 <fgetc>
     f16:	97 fd       	sbrc	r25, 7
     f18:	3a c0       	rjmp	.+116    	; 0xf8e <conv_int+0xd8>
     f1a:	9c 01       	movw	r18, r24
     f1c:	2f 7d       	andi	r18, 0xDF	; 223
     f1e:	33 27       	eor	r19, r19
     f20:	28 35       	cpi	r18, 0x58	; 88
     f22:	31 05       	cpc	r19, r1
     f24:	41 f4       	brne	.+16     	; 0xf36 <conv_int+0x80>
     f26:	c2 64       	ori	r28, 0x42	; 66
     f28:	d2 50       	subi	r29, 0x02	; 2
     f2a:	89 f1       	breq	.+98     	; 0xf8e <conv_int+0xd8>
     f2c:	c8 01       	movw	r24, r16
     f2e:	31 d2       	rcall	.+1122   	; 0x1392 <fgetc>
     f30:	97 ff       	sbrs	r25, 7
     f32:	07 c0       	rjmp	.+14     	; 0xf42 <conv_int+0x8c>
     f34:	2c c0       	rjmp	.+88     	; 0xf8e <conv_int+0xd8>
     f36:	b6 fe       	sbrs	r11, 6
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <conv_int+0x88>
     f3a:	c2 60       	ori	r28, 0x02	; 2
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <conv_int+0x8a>
     f3e:	c2 61       	ori	r28, 0x12	; 18
     f40:	da 2d       	mov	r29, r10
     f42:	81 2c       	mov	r8, r1
     f44:	91 2c       	mov	r9, r1
     f46:	54 01       	movw	r10, r8
     f48:	20 ed       	ldi	r18, 0xD0	; 208
     f4a:	28 0f       	add	r18, r24
     f4c:	28 30       	cpi	r18, 0x08	; 8
     f4e:	78 f0       	brcs	.+30     	; 0xf6e <conv_int+0xb8>
     f50:	c4 ff       	sbrs	r28, 4
     f52:	03 c0       	rjmp	.+6      	; 0xf5a <conv_int+0xa4>
     f54:	b8 01       	movw	r22, r16
     f56:	97 d2       	rcall	.+1326   	; 0x1486 <ungetc>
     f58:	17 c0       	rjmp	.+46     	; 0xf88 <conv_int+0xd2>
     f5a:	2a 30       	cpi	r18, 0x0A	; 10
     f5c:	40 f0       	brcs	.+16     	; 0xf6e <conv_int+0xb8>
     f5e:	c6 ff       	sbrs	r28, 6
     f60:	f9 cf       	rjmp	.-14     	; 0xf54 <conv_int+0x9e>
     f62:	2f 7d       	andi	r18, 0xDF	; 223
     f64:	3f ee       	ldi	r19, 0xEF	; 239
     f66:	32 0f       	add	r19, r18
     f68:	36 30       	cpi	r19, 0x06	; 6
     f6a:	a0 f7       	brcc	.-24     	; 0xf54 <conv_int+0x9e>
     f6c:	27 50       	subi	r18, 0x07	; 7
     f6e:	4c 2f       	mov	r20, r28
     f70:	c5 01       	movw	r24, r10
     f72:	b4 01       	movw	r22, r8
     f74:	63 df       	rcall	.-314    	; 0xe3c <mulacc>
     f76:	4b 01       	movw	r8, r22
     f78:	5c 01       	movw	r10, r24
     f7a:	c2 60       	ori	r28, 0x02	; 2
     f7c:	d1 50       	subi	r29, 0x01	; 1
     f7e:	51 f0       	breq	.+20     	; 0xf94 <conv_int+0xde>
     f80:	c8 01       	movw	r24, r16
     f82:	07 d2       	rcall	.+1038   	; 0x1392 <fgetc>
     f84:	97 ff       	sbrs	r25, 7
     f86:	e0 cf       	rjmp	.-64     	; 0xf48 <conv_int+0x92>
     f88:	c1 fd       	sbrc	r28, 1
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <conv_int+0xde>
     f8c:	b0 cf       	rjmp	.-160    	; 0xeee <conv_int+0x38>
     f8e:	81 2c       	mov	r8, r1
     f90:	91 2c       	mov	r9, r1
     f92:	54 01       	movw	r10, r8
     f94:	c7 ff       	sbrs	r28, 7
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <conv_int+0xf2>
     f98:	b0 94       	com	r11
     f9a:	a0 94       	com	r10
     f9c:	90 94       	com	r9
     f9e:	80 94       	com	r8
     fa0:	81 1c       	adc	r8, r1
     fa2:	91 1c       	adc	r9, r1
     fa4:	a1 1c       	adc	r10, r1
     fa6:	b1 1c       	adc	r11, r1
     fa8:	2c 2f       	mov	r18, r28
     faa:	b5 01       	movw	r22, r10
     fac:	a4 01       	movw	r20, r8
     fae:	c7 01       	movw	r24, r14
     fb0:	39 df       	rcall	.-398    	; 0xe24 <putval>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	bf 90       	pop	r11
     fc2:	af 90       	pop	r10
     fc4:	9f 90       	pop	r9
     fc6:	8f 90       	pop	r8
     fc8:	08 95       	ret

00000fca <conv_brk>:
     fca:	a0 e2       	ldi	r26, 0x20	; 32
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ea ee       	ldi	r30, 0xEA	; 234
     fd0:	f7 e0       	ldi	r31, 0x07	; 7
     fd2:	d6 c2       	rjmp	.+1452   	; 0x1580 <__prologue_saves__+0x6>
     fd4:	5c 01       	movw	r10, r24
     fd6:	96 2e       	mov	r9, r22
     fd8:	7a 01       	movw	r14, r20
     fda:	f9 01       	movw	r30, r18
     fdc:	8e 01       	movw	r16, r28
     fde:	0f 5f       	subi	r16, 0xFF	; 255
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	68 01       	movw	r12, r16
     fe4:	80 e2       	ldi	r24, 0x20	; 32
     fe6:	d8 01       	movw	r26, r16
     fe8:	1d 92       	st	X+, r1
     fea:	8a 95       	dec	r24
     fec:	e9 f7       	brne	.-6      	; 0xfe8 <conv_brk+0x1e>
     fee:	d5 01       	movw	r26, r10
     ff0:	13 96       	adiw	r26, 0x03	; 3
     ff2:	8c 90       	ld	r8, X
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	61 2c       	mov	r6, r1
     ffa:	71 2c       	mov	r7, r1
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	83 fc       	sbrc	r8, 3
    1004:	25 91       	lpm	r18, Z+
    1006:	83 fe       	sbrs	r8, 3
    1008:	21 91       	ld	r18, Z+
    100a:	8f 01       	movw	r16, r30
    100c:	52 2e       	mov	r5, r18
    100e:	21 11       	cpse	r18, r1
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <conv_brk+0x4e>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	90 c0       	rjmp	.+288    	; 0x1138 <conv_brk+0x16e>
    1018:	2e 35       	cpi	r18, 0x5E	; 94
    101a:	11 f4       	brne	.+4      	; 0x1020 <conv_brk+0x56>
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	51 f1       	breq	.+84     	; 0x1074 <conv_brk+0xaa>
    1020:	43 2f       	mov	r20, r19
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	48 17       	cp	r20, r24
    1026:	59 07       	cpc	r21, r25
    1028:	3c f4       	brge	.+14     	; 0x1038 <conv_brk+0x6e>
    102a:	2d 35       	cpi	r18, 0x5D	; 93
    102c:	59 f1       	breq	.+86     	; 0x1084 <conv_brk+0xba>
    102e:	2d 32       	cpi	r18, 0x2D	; 45
    1030:	19 f4       	brne	.+6      	; 0x1038 <conv_brk+0x6e>
    1032:	77 20       	and	r7, r7
    1034:	09 f1       	breq	.+66     	; 0x1078 <conv_brk+0xae>
    1036:	03 c0       	rjmp	.+6      	; 0x103e <conv_brk+0x74>
    1038:	77 20       	and	r7, r7
    103a:	09 f4       	brne	.+2      	; 0x103e <conv_brk+0x74>
    103c:	68 c0       	rjmp	.+208    	; 0x110e <conv_brk+0x144>
    103e:	45 2d       	mov	r20, r5
    1040:	46 95       	lsr	r20
    1042:	46 95       	lsr	r20
    1044:	46 95       	lsr	r20
    1046:	d6 01       	movw	r26, r12
    1048:	a4 0f       	add	r26, r20
    104a:	b1 1d       	adc	r27, r1
    104c:	45 2d       	mov	r20, r5
    104e:	47 70       	andi	r20, 0x07	; 7
    1050:	8b 01       	movw	r16, r22
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <conv_brk+0x8e>
    1054:	00 0f       	add	r16, r16
    1056:	11 1f       	adc	r17, r17
    1058:	4a 95       	dec	r20
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <conv_brk+0x8a>
    105c:	a8 01       	movw	r20, r16
    105e:	5c 91       	ld	r21, X
    1060:	45 2b       	or	r20, r21
    1062:	4c 93       	st	X, r20
    1064:	65 14       	cp	r6, r5
    1066:	59 f0       	breq	.+22     	; 0x107e <conv_brk+0xb4>
    1068:	56 14       	cp	r5, r6
    106a:	10 f4       	brcc	.+4      	; 0x1070 <conv_brk+0xa6>
    106c:	53 94       	inc	r5
    106e:	e7 cf       	rjmp	.-50     	; 0x103e <conv_brk+0x74>
    1070:	5a 94       	dec	r5
    1072:	e5 cf       	rjmp	.-54     	; 0x103e <conv_brk+0x74>
    1074:	31 e0       	ldi	r19, 0x01	; 1
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <conv_brk+0xb6>
    1078:	77 24       	eor	r7, r7
    107a:	73 94       	inc	r7
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <conv_brk+0xb6>
    107e:	71 2c       	mov	r7, r1
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	bf cf       	rjmp	.-130    	; 0x1002 <conv_brk+0x38>
    1084:	77 20       	and	r7, r7
    1086:	19 f0       	breq	.+6      	; 0x108e <conv_brk+0xc4>
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	80 62       	ori	r24, 0x20	; 32
    108c:	8e 83       	std	Y+6, r24	; 0x06
    108e:	31 11       	cpse	r19, r1
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <conv_brk+0xce>
    1092:	88 24       	eor	r8, r8
    1094:	83 94       	inc	r8
    1096:	17 c0       	rjmp	.+46     	; 0x10c6 <conv_brk+0xfc>
    1098:	f6 01       	movw	r30, r12
    109a:	9e 01       	movw	r18, r28
    109c:	2f 5d       	subi	r18, 0xDF	; 223
    109e:	3f 4f       	sbci	r19, 0xFF	; 255
    10a0:	80 81       	ld	r24, Z
    10a2:	80 95       	com	r24
    10a4:	81 93       	st	Z+, r24
    10a6:	2e 17       	cp	r18, r30
    10a8:	3f 07       	cpc	r19, r31
    10aa:	d1 f7       	brne	.-12     	; 0x10a0 <conv_brk+0xd6>
    10ac:	f2 cf       	rjmp	.-28     	; 0x1092 <conv_brk+0xc8>
    10ae:	e1 14       	cp	r14, r1
    10b0:	f1 04       	cpc	r15, r1
    10b2:	29 f0       	breq	.+10     	; 0x10be <conv_brk+0xf4>
    10b4:	d7 01       	movw	r26, r14
    10b6:	8c 93       	st	X, r24
    10b8:	f7 01       	movw	r30, r14
    10ba:	31 96       	adiw	r30, 0x01	; 1
    10bc:	7f 01       	movw	r14, r30
    10be:	9a 94       	dec	r9
    10c0:	81 2c       	mov	r8, r1
    10c2:	99 20       	and	r9, r9
    10c4:	e9 f0       	breq	.+58     	; 0x1100 <conv_brk+0x136>
    10c6:	c5 01       	movw	r24, r10
    10c8:	64 d1       	rcall	.+712    	; 0x1392 <fgetc>
    10ca:	97 fd       	sbrc	r25, 7
    10cc:	17 c0       	rjmp	.+46     	; 0x10fc <conv_brk+0x132>
    10ce:	fc 01       	movw	r30, r24
    10d0:	ff 27       	eor	r31, r31
    10d2:	23 e0       	ldi	r18, 0x03	; 3
    10d4:	f5 95       	asr	r31
    10d6:	e7 95       	ror	r30
    10d8:	2a 95       	dec	r18
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <conv_brk+0x10a>
    10dc:	ec 0d       	add	r30, r12
    10de:	fd 1d       	adc	r31, r13
    10e0:	20 81       	ld	r18, Z
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	ac 01       	movw	r20, r24
    10e6:	47 70       	andi	r20, 0x07	; 7
    10e8:	55 27       	eor	r21, r21
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <conv_brk+0x126>
    10ec:	35 95       	asr	r19
    10ee:	27 95       	ror	r18
    10f0:	4a 95       	dec	r20
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <conv_brk+0x122>
    10f4:	20 fd       	sbrc	r18, 0
    10f6:	db cf       	rjmp	.-74     	; 0x10ae <conv_brk+0xe4>
    10f8:	b5 01       	movw	r22, r10
    10fa:	c5 d1       	rcall	.+906    	; 0x1486 <ungetc>
    10fc:	81 10       	cpse	r8, r1
    10fe:	89 cf       	rjmp	.-238    	; 0x1012 <conv_brk+0x48>
    1100:	e1 14       	cp	r14, r1
    1102:	f1 04       	cpc	r15, r1
    1104:	11 f0       	breq	.+4      	; 0x110a <conv_brk+0x140>
    1106:	d7 01       	movw	r26, r14
    1108:	1c 92       	st	X, r1
    110a:	c8 01       	movw	r24, r16
    110c:	15 c0       	rjmp	.+42     	; 0x1138 <conv_brk+0x16e>
    110e:	42 2f       	mov	r20, r18
    1110:	46 95       	lsr	r20
    1112:	46 95       	lsr	r20
    1114:	46 95       	lsr	r20
    1116:	d6 01       	movw	r26, r12
    1118:	a4 0f       	add	r26, r20
    111a:	b1 1d       	adc	r27, r1
    111c:	42 2f       	mov	r20, r18
    111e:	47 70       	andi	r20, 0x07	; 7
    1120:	8b 01       	movw	r16, r22
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <conv_brk+0x15e>
    1124:	00 0f       	add	r16, r16
    1126:	11 1f       	adc	r17, r17
    1128:	4a 95       	dec	r20
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <conv_brk+0x15a>
    112c:	a8 01       	movw	r20, r16
    112e:	5c 91       	ld	r21, X
    1130:	45 2b       	or	r20, r21
    1132:	4c 93       	st	X, r20
    1134:	62 2e       	mov	r6, r18
    1136:	a4 cf       	rjmp	.-184    	; 0x1080 <conv_brk+0xb6>
    1138:	a0 96       	adiw	r28, 0x20	; 32
    113a:	ef e0       	ldi	r30, 0x0F	; 15
    113c:	3d c2       	rjmp	.+1146   	; 0x15b8 <__epilogue_restores__+0x6>

0000113e <vfscanf>:
    113e:	a0 e0       	ldi	r26, 0x00	; 0
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e4 ea       	ldi	r30, 0xA4	; 164
    1144:	f8 e0       	ldi	r31, 0x08	; 8
    1146:	1c c2       	rjmp	.+1080   	; 0x1580 <__prologue_saves__+0x6>
    1148:	6c 01       	movw	r12, r24
    114a:	eb 01       	movw	r28, r22
    114c:	5a 01       	movw	r10, r20
    114e:	fc 01       	movw	r30, r24
    1150:	17 82       	std	Z+7, r1	; 0x07
    1152:	16 82       	std	Z+6, r1	; 0x06
    1154:	51 2c       	mov	r5, r1
    1156:	f6 01       	movw	r30, r12
    1158:	e3 80       	ldd	r14, Z+3	; 0x03
    115a:	fe 01       	movw	r30, r28
    115c:	e3 fc       	sbrc	r14, 3
    115e:	85 91       	lpm	r24, Z+
    1160:	e3 fe       	sbrs	r14, 3
    1162:	81 91       	ld	r24, Z+
    1164:	18 2f       	mov	r17, r24
    1166:	ef 01       	movw	r28, r30
    1168:	88 23       	and	r24, r24
    116a:	09 f4       	brne	.+2      	; 0x116e <vfscanf+0x30>
    116c:	e0 c0       	rjmp	.+448    	; 0x132e <vfscanf+0x1f0>
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	e7 d0       	rcall	.+462    	; 0x1340 <isspace>
    1172:	89 2b       	or	r24, r25
    1174:	19 f0       	breq	.+6      	; 0x117c <vfscanf+0x3e>
    1176:	c6 01       	movw	r24, r12
    1178:	88 de       	rcall	.-752    	; 0xe8a <skip_spaces>
    117a:	ed cf       	rjmp	.-38     	; 0x1156 <vfscanf+0x18>
    117c:	15 32       	cpi	r17, 0x25	; 37
    117e:	41 f4       	brne	.+16     	; 0x1190 <vfscanf+0x52>
    1180:	fe 01       	movw	r30, r28
    1182:	e3 fc       	sbrc	r14, 3
    1184:	15 91       	lpm	r17, Z+
    1186:	e3 fe       	sbrs	r14, 3
    1188:	11 91       	ld	r17, Z+
    118a:	ef 01       	movw	r28, r30
    118c:	15 32       	cpi	r17, 0x25	; 37
    118e:	71 f4       	brne	.+28     	; 0x11ac <vfscanf+0x6e>
    1190:	c6 01       	movw	r24, r12
    1192:	ff d0       	rcall	.+510    	; 0x1392 <fgetc>
    1194:	97 fd       	sbrc	r25, 7
    1196:	c9 c0       	rjmp	.+402    	; 0x132a <vfscanf+0x1ec>
    1198:	41 2f       	mov	r20, r17
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	9c 01       	movw	r18, r24
    119e:	33 27       	eor	r19, r19
    11a0:	24 17       	cp	r18, r20
    11a2:	35 07       	cpc	r19, r21
    11a4:	c1 f2       	breq	.-80     	; 0x1156 <vfscanf+0x18>
    11a6:	b6 01       	movw	r22, r12
    11a8:	6e d1       	rcall	.+732    	; 0x1486 <ungetc>
    11aa:	c1 c0       	rjmp	.+386    	; 0x132e <vfscanf+0x1f0>
    11ac:	1a 32       	cpi	r17, 0x2A	; 42
    11ae:	39 f4       	brne	.+14     	; 0x11be <vfscanf+0x80>
    11b0:	e3 fc       	sbrc	r14, 3
    11b2:	15 91       	lpm	r17, Z+
    11b4:	e3 fe       	sbrs	r14, 3
    11b6:	11 91       	ld	r17, Z+
    11b8:	ef 01       	movw	r28, r30
    11ba:	01 e0       	ldi	r16, 0x01	; 1
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <vfscanf+0x82>
    11be:	00 e0       	ldi	r16, 0x00	; 0
    11c0:	f1 2c       	mov	r15, r1
    11c2:	20 ed       	ldi	r18, 0xD0	; 208
    11c4:	21 0f       	add	r18, r17
    11c6:	2a 30       	cpi	r18, 0x0A	; 10
    11c8:	78 f4       	brcc	.+30     	; 0x11e8 <vfscanf+0xaa>
    11ca:	02 60       	ori	r16, 0x02	; 2
    11cc:	6f 2d       	mov	r22, r15
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	40 e2       	ldi	r20, 0x20	; 32
    11d6:	32 de       	rcall	.-924    	; 0xe3c <mulacc>
    11d8:	f6 2e       	mov	r15, r22
    11da:	fe 01       	movw	r30, r28
    11dc:	e3 fc       	sbrc	r14, 3
    11de:	15 91       	lpm	r17, Z+
    11e0:	e3 fe       	sbrs	r14, 3
    11e2:	11 91       	ld	r17, Z+
    11e4:	ef 01       	movw	r28, r30
    11e6:	ed cf       	rjmp	.-38     	; 0x11c2 <vfscanf+0x84>
    11e8:	01 ff       	sbrs	r16, 1
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <vfscanf+0xb4>
    11ec:	f1 10       	cpse	r15, r1
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <vfscanf+0xb8>
    11f0:	9e c0       	rjmp	.+316    	; 0x132e <vfscanf+0x1f0>
    11f2:	ff 24       	eor	r15, r15
    11f4:	fa 94       	dec	r15
    11f6:	18 36       	cpi	r17, 0x68	; 104
    11f8:	19 f0       	breq	.+6      	; 0x1200 <vfscanf+0xc2>
    11fa:	1c 36       	cpi	r17, 0x6C	; 108
    11fc:	51 f0       	breq	.+20     	; 0x1212 <vfscanf+0xd4>
    11fe:	10 c0       	rjmp	.+32     	; 0x1220 <vfscanf+0xe2>
    1200:	fe 01       	movw	r30, r28
    1202:	e3 fc       	sbrc	r14, 3
    1204:	15 91       	lpm	r17, Z+
    1206:	e3 fe       	sbrs	r14, 3
    1208:	11 91       	ld	r17, Z+
    120a:	ef 01       	movw	r28, r30
    120c:	18 36       	cpi	r17, 0x68	; 104
    120e:	41 f4       	brne	.+16     	; 0x1220 <vfscanf+0xe2>
    1210:	08 60       	ori	r16, 0x08	; 8
    1212:	04 60       	ori	r16, 0x04	; 4
    1214:	fe 01       	movw	r30, r28
    1216:	e3 fc       	sbrc	r14, 3
    1218:	15 91       	lpm	r17, Z+
    121a:	e3 fe       	sbrs	r14, 3
    121c:	11 91       	ld	r17, Z+
    121e:	ef 01       	movw	r28, r30
    1220:	11 23       	and	r17, r17
    1222:	09 f4       	brne	.+2      	; 0x1226 <vfscanf+0xe8>
    1224:	84 c0       	rjmp	.+264    	; 0x132e <vfscanf+0x1f0>
    1226:	61 2f       	mov	r22, r17
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	82 e2       	ldi	r24, 0x22	; 34
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	90 d0       	rcall	.+288    	; 0x1350 <strchr_P>
    1230:	89 2b       	or	r24, r25
    1232:	09 f4       	brne	.+2      	; 0x1236 <vfscanf+0xf8>
    1234:	7c c0       	rjmp	.+248    	; 0x132e <vfscanf+0x1f0>
    1236:	00 fd       	sbrc	r16, 0
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <vfscanf+0x10a>
    123a:	f5 01       	movw	r30, r10
    123c:	80 80       	ld	r8, Z
    123e:	91 80       	ldd	r9, Z+1	; 0x01
    1240:	c5 01       	movw	r24, r10
    1242:	02 96       	adiw	r24, 0x02	; 2
    1244:	5c 01       	movw	r10, r24
    1246:	02 c0       	rjmp	.+4      	; 0x124c <vfscanf+0x10e>
    1248:	81 2c       	mov	r8, r1
    124a:	91 2c       	mov	r9, r1
    124c:	1e 36       	cpi	r17, 0x6E	; 110
    124e:	49 f4       	brne	.+18     	; 0x1262 <vfscanf+0x124>
    1250:	f6 01       	movw	r30, r12
    1252:	46 81       	ldd	r20, Z+6	; 0x06
    1254:	57 81       	ldd	r21, Z+7	; 0x07
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	20 2f       	mov	r18, r16
    125c:	c4 01       	movw	r24, r8
    125e:	e2 dd       	rcall	.-1084   	; 0xe24 <putval>
    1260:	7a cf       	rjmp	.-268    	; 0x1156 <vfscanf+0x18>
    1262:	13 36       	cpi	r17, 0x63	; 99
    1264:	a1 f4       	brne	.+40     	; 0x128e <vfscanf+0x150>
    1266:	01 fd       	sbrc	r16, 1
    1268:	02 c0       	rjmp	.+4      	; 0x126e <vfscanf+0x130>
    126a:	ff 24       	eor	r15, r15
    126c:	f3 94       	inc	r15
    126e:	c6 01       	movw	r24, r12
    1270:	90 d0       	rcall	.+288    	; 0x1392 <fgetc>
    1272:	97 fd       	sbrc	r25, 7
    1274:	5a c0       	rjmp	.+180    	; 0x132a <vfscanf+0x1ec>
    1276:	81 14       	cp	r8, r1
    1278:	91 04       	cpc	r9, r1
    127a:	29 f0       	breq	.+10     	; 0x1286 <vfscanf+0x148>
    127c:	f4 01       	movw	r30, r8
    127e:	80 83       	st	Z, r24
    1280:	c4 01       	movw	r24, r8
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	4c 01       	movw	r8, r24
    1286:	fa 94       	dec	r15
    1288:	f1 10       	cpse	r15, r1
    128a:	f1 cf       	rjmp	.-30     	; 0x126e <vfscanf+0x130>
    128c:	4a c0       	rjmp	.+148    	; 0x1322 <vfscanf+0x1e4>
    128e:	1b 35       	cpi	r17, 0x5B	; 91
    1290:	51 f4       	brne	.+20     	; 0x12a6 <vfscanf+0x168>
    1292:	9e 01       	movw	r18, r28
    1294:	a4 01       	movw	r20, r8
    1296:	6f 2d       	mov	r22, r15
    1298:	c6 01       	movw	r24, r12
    129a:	97 de       	rcall	.-722    	; 0xfca <conv_brk>
    129c:	ec 01       	movw	r28, r24
    129e:	89 2b       	or	r24, r25
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <vfscanf+0x166>
    12a2:	3f c0       	rjmp	.+126    	; 0x1322 <vfscanf+0x1e4>
    12a4:	39 c0       	rjmp	.+114    	; 0x1318 <vfscanf+0x1da>
    12a6:	c6 01       	movw	r24, r12
    12a8:	f0 dd       	rcall	.-1056   	; 0xe8a <skip_spaces>
    12aa:	97 fd       	sbrc	r25, 7
    12ac:	3e c0       	rjmp	.+124    	; 0x132a <vfscanf+0x1ec>
    12ae:	1f 36       	cpi	r17, 0x6F	; 111
    12b0:	49 f1       	breq	.+82     	; 0x1304 <vfscanf+0x1c6>
    12b2:	28 f4       	brcc	.+10     	; 0x12be <vfscanf+0x180>
    12b4:	14 36       	cpi	r17, 0x64	; 100
    12b6:	21 f1       	breq	.+72     	; 0x1300 <vfscanf+0x1c2>
    12b8:	19 36       	cpi	r17, 0x69	; 105
    12ba:	39 f1       	breq	.+78     	; 0x130a <vfscanf+0x1cc>
    12bc:	25 c0       	rjmp	.+74     	; 0x1308 <vfscanf+0x1ca>
    12be:	13 37       	cpi	r17, 0x73	; 115
    12c0:	71 f0       	breq	.+28     	; 0x12de <vfscanf+0x1a0>
    12c2:	15 37       	cpi	r17, 0x75	; 117
    12c4:	e9 f0       	breq	.+58     	; 0x1300 <vfscanf+0x1c2>
    12c6:	20 c0       	rjmp	.+64     	; 0x1308 <vfscanf+0x1ca>
    12c8:	81 14       	cp	r8, r1
    12ca:	91 04       	cpc	r9, r1
    12cc:	29 f0       	breq	.+10     	; 0x12d8 <vfscanf+0x19a>
    12ce:	f4 01       	movw	r30, r8
    12d0:	60 82       	st	Z, r6
    12d2:	c4 01       	movw	r24, r8
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	4c 01       	movw	r8, r24
    12d8:	fa 94       	dec	r15
    12da:	ff 20       	and	r15, r15
    12dc:	59 f0       	breq	.+22     	; 0x12f4 <vfscanf+0x1b6>
    12de:	c6 01       	movw	r24, r12
    12e0:	58 d0       	rcall	.+176    	; 0x1392 <fgetc>
    12e2:	3c 01       	movw	r6, r24
    12e4:	97 fd       	sbrc	r25, 7
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <vfscanf+0x1b6>
    12e8:	2b d0       	rcall	.+86     	; 0x1340 <isspace>
    12ea:	89 2b       	or	r24, r25
    12ec:	69 f3       	breq	.-38     	; 0x12c8 <vfscanf+0x18a>
    12ee:	b6 01       	movw	r22, r12
    12f0:	c3 01       	movw	r24, r6
    12f2:	c9 d0       	rcall	.+402    	; 0x1486 <ungetc>
    12f4:	81 14       	cp	r8, r1
    12f6:	91 04       	cpc	r9, r1
    12f8:	a1 f0       	breq	.+40     	; 0x1322 <vfscanf+0x1e4>
    12fa:	f4 01       	movw	r30, r8
    12fc:	10 82       	st	Z, r1
    12fe:	11 c0       	rjmp	.+34     	; 0x1322 <vfscanf+0x1e4>
    1300:	00 62       	ori	r16, 0x20	; 32
    1302:	03 c0       	rjmp	.+6      	; 0x130a <vfscanf+0x1cc>
    1304:	00 61       	ori	r16, 0x10	; 16
    1306:	01 c0       	rjmp	.+2      	; 0x130a <vfscanf+0x1cc>
    1308:	00 64       	ori	r16, 0x40	; 64
    130a:	20 2f       	mov	r18, r16
    130c:	a4 01       	movw	r20, r8
    130e:	6f 2d       	mov	r22, r15
    1310:	c6 01       	movw	r24, r12
    1312:	d1 dd       	rcall	.-1118   	; 0xeb6 <conv_int>
    1314:	81 11       	cpse	r24, r1
    1316:	05 c0       	rjmp	.+10     	; 0x1322 <vfscanf+0x1e4>
    1318:	f6 01       	movw	r30, r12
    131a:	83 81       	ldd	r24, Z+3	; 0x03
    131c:	80 73       	andi	r24, 0x30	; 48
    131e:	29 f4       	brne	.+10     	; 0x132a <vfscanf+0x1ec>
    1320:	06 c0       	rjmp	.+12     	; 0x132e <vfscanf+0x1f0>
    1322:	00 fd       	sbrc	r16, 0
    1324:	18 cf       	rjmp	.-464    	; 0x1156 <vfscanf+0x18>
    1326:	53 94       	inc	r5
    1328:	16 cf       	rjmp	.-468    	; 0x1156 <vfscanf+0x18>
    132a:	55 20       	and	r5, r5
    132c:	19 f0       	breq	.+6      	; 0x1334 <vfscanf+0x1f6>
    132e:	85 2d       	mov	r24, r5
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <vfscanf+0x1fa>
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	9f ef       	ldi	r25, 0xFF	; 255
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	ef e0       	ldi	r30, 0x0F	; 15
    133e:	3c c1       	rjmp	.+632    	; 0x15b8 <__epilogue_restores__+0x6>

00001340 <isspace>:
    1340:	91 11       	cpse	r25, r1
    1342:	18 c1       	rjmp	.+560    	; 0x1574 <__ctype_isfalse>
    1344:	80 32       	cpi	r24, 0x20	; 32
    1346:	19 f0       	breq	.+6      	; 0x134e <isspace+0xe>
    1348:	89 50       	subi	r24, 0x09	; 9
    134a:	85 50       	subi	r24, 0x05	; 5
    134c:	d0 f7       	brcc	.-12     	; 0x1342 <isspace+0x2>
    134e:	08 95       	ret

00001350 <strchr_P>:
    1350:	fc 01       	movw	r30, r24
    1352:	05 90       	lpm	r0, Z+
    1354:	06 16       	cp	r0, r22
    1356:	21 f0       	breq	.+8      	; 0x1360 <strchr_P+0x10>
    1358:	00 20       	and	r0, r0
    135a:	d9 f7       	brne	.-10     	; 0x1352 <strchr_P+0x2>
    135c:	c0 01       	movw	r24, r0
    135e:	08 95       	ret
    1360:	31 97       	sbiw	r30, 0x01	; 1
    1362:	cf 01       	movw	r24, r30
    1364:	08 95       	ret

00001366 <strnlen_P>:
    1366:	fc 01       	movw	r30, r24
    1368:	05 90       	lpm	r0, Z+
    136a:	61 50       	subi	r22, 0x01	; 1
    136c:	70 40       	sbci	r23, 0x00	; 0
    136e:	01 10       	cpse	r0, r1
    1370:	d8 f7       	brcc	.-10     	; 0x1368 <strnlen_P+0x2>
    1372:	80 95       	com	r24
    1374:	90 95       	com	r25
    1376:	8e 0f       	add	r24, r30
    1378:	9f 1f       	adc	r25, r31
    137a:	08 95       	ret

0000137c <strnlen>:
    137c:	fc 01       	movw	r30, r24
    137e:	61 50       	subi	r22, 0x01	; 1
    1380:	70 40       	sbci	r23, 0x00	; 0
    1382:	01 90       	ld	r0, Z+
    1384:	01 10       	cpse	r0, r1
    1386:	d8 f7       	brcc	.-10     	; 0x137e <strnlen+0x2>
    1388:	80 95       	com	r24
    138a:	90 95       	com	r25
    138c:	8e 0f       	add	r24, r30
    138e:	9f 1f       	adc	r25, r31
    1390:	08 95       	ret

00001392 <fgetc>:
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	ec 01       	movw	r28, r24
    1398:	2b 81       	ldd	r18, Y+3	; 0x03
    139a:	20 ff       	sbrs	r18, 0
    139c:	33 c0       	rjmp	.+102    	; 0x1404 <fgetc+0x72>
    139e:	26 ff       	sbrs	r18, 6
    13a0:	0a c0       	rjmp	.+20     	; 0x13b6 <fgetc+0x24>
    13a2:	2f 7b       	andi	r18, 0xBF	; 191
    13a4:	2b 83       	std	Y+3, r18	; 0x03
    13a6:	8e 81       	ldd	r24, Y+6	; 0x06
    13a8:	9f 81       	ldd	r25, Y+7	; 0x07
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	9f 83       	std	Y+7, r25	; 0x07
    13ae:	8e 83       	std	Y+6, r24	; 0x06
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	29 c0       	rjmp	.+82     	; 0x1408 <fgetc+0x76>
    13b6:	22 ff       	sbrs	r18, 2
    13b8:	0f c0       	rjmp	.+30     	; 0x13d8 <fgetc+0x46>
    13ba:	e8 81       	ld	r30, Y
    13bc:	f9 81       	ldd	r31, Y+1	; 0x01
    13be:	80 81       	ld	r24, Z
    13c0:	08 2e       	mov	r0, r24
    13c2:	00 0c       	add	r0, r0
    13c4:	99 0b       	sbc	r25, r25
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	19 f4       	brne	.+6      	; 0x13d0 <fgetc+0x3e>
    13ca:	20 62       	ori	r18, 0x20	; 32
    13cc:	2b 83       	std	Y+3, r18	; 0x03
    13ce:	1a c0       	rjmp	.+52     	; 0x1404 <fgetc+0x72>
    13d0:	31 96       	adiw	r30, 0x01	; 1
    13d2:	f9 83       	std	Y+1, r31	; 0x01
    13d4:	e8 83       	st	Y, r30
    13d6:	0e c0       	rjmp	.+28     	; 0x13f4 <fgetc+0x62>
    13d8:	ea 85       	ldd	r30, Y+10	; 0x0a
    13da:	fb 85       	ldd	r31, Y+11	; 0x0b
    13dc:	09 95       	icall
    13de:	97 ff       	sbrs	r25, 7
    13e0:	09 c0       	rjmp	.+18     	; 0x13f4 <fgetc+0x62>
    13e2:	2b 81       	ldd	r18, Y+3	; 0x03
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	11 f0       	breq	.+4      	; 0x13ec <fgetc+0x5a>
    13e8:	80 e2       	ldi	r24, 0x20	; 32
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <fgetc+0x5c>
    13ec:	80 e1       	ldi	r24, 0x10	; 16
    13ee:	82 2b       	or	r24, r18
    13f0:	8b 83       	std	Y+3, r24	; 0x03
    13f2:	08 c0       	rjmp	.+16     	; 0x1404 <fgetc+0x72>
    13f4:	2e 81       	ldd	r18, Y+6	; 0x06
    13f6:	3f 81       	ldd	r19, Y+7	; 0x07
    13f8:	2f 5f       	subi	r18, 0xFF	; 255
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	3f 83       	std	Y+7, r19	; 0x07
    13fe:	2e 83       	std	Y+6, r18	; 0x06
    1400:	99 27       	eor	r25, r25
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <fgetc+0x76>
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	9f ef       	ldi	r25, 0xFF	; 255
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <fputc>:
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	fb 01       	movw	r30, r22
    1418:	23 81       	ldd	r18, Z+3	; 0x03
    141a:	21 fd       	sbrc	r18, 1
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <fputc+0x16>
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	9f ef       	ldi	r25, 0xFF	; 255
    1422:	2c c0       	rjmp	.+88     	; 0x147c <fputc+0x6e>
    1424:	22 ff       	sbrs	r18, 2
    1426:	16 c0       	rjmp	.+44     	; 0x1454 <fputc+0x46>
    1428:	46 81       	ldd	r20, Z+6	; 0x06
    142a:	57 81       	ldd	r21, Z+7	; 0x07
    142c:	24 81       	ldd	r18, Z+4	; 0x04
    142e:	35 81       	ldd	r19, Z+5	; 0x05
    1430:	42 17       	cp	r20, r18
    1432:	53 07       	cpc	r21, r19
    1434:	44 f4       	brge	.+16     	; 0x1446 <fputc+0x38>
    1436:	a0 81       	ld	r26, Z
    1438:	b1 81       	ldd	r27, Z+1	; 0x01
    143a:	9d 01       	movw	r18, r26
    143c:	2f 5f       	subi	r18, 0xFF	; 255
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	31 83       	std	Z+1, r19	; 0x01
    1442:	20 83       	st	Z, r18
    1444:	8c 93       	st	X, r24
    1446:	26 81       	ldd	r18, Z+6	; 0x06
    1448:	37 81       	ldd	r19, Z+7	; 0x07
    144a:	2f 5f       	subi	r18, 0xFF	; 255
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	37 83       	std	Z+7, r19	; 0x07
    1450:	26 83       	std	Z+6, r18	; 0x06
    1452:	14 c0       	rjmp	.+40     	; 0x147c <fputc+0x6e>
    1454:	8b 01       	movw	r16, r22
    1456:	ec 01       	movw	r28, r24
    1458:	fb 01       	movw	r30, r22
    145a:	00 84       	ldd	r0, Z+8	; 0x08
    145c:	f1 85       	ldd	r31, Z+9	; 0x09
    145e:	e0 2d       	mov	r30, r0
    1460:	09 95       	icall
    1462:	89 2b       	or	r24, r25
    1464:	e1 f6       	brne	.-72     	; 0x141e <fputc+0x10>
    1466:	d8 01       	movw	r26, r16
    1468:	16 96       	adiw	r26, 0x06	; 6
    146a:	8d 91       	ld	r24, X+
    146c:	9c 91       	ld	r25, X
    146e:	17 97       	sbiw	r26, 0x07	; 7
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	17 96       	adiw	r26, 0x07	; 7
    1474:	9c 93       	st	X, r25
    1476:	8e 93       	st	-X, r24
    1478:	16 97       	sbiw	r26, 0x06	; 6
    147a:	ce 01       	movw	r24, r28
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	08 95       	ret

00001486 <ungetc>:
    1486:	fb 01       	movw	r30, r22
    1488:	23 81       	ldd	r18, Z+3	; 0x03
    148a:	20 ff       	sbrs	r18, 0
    148c:	12 c0       	rjmp	.+36     	; 0x14b2 <ungetc+0x2c>
    148e:	26 fd       	sbrc	r18, 6
    1490:	10 c0       	rjmp	.+32     	; 0x14b2 <ungetc+0x2c>
    1492:	8f 3f       	cpi	r24, 0xFF	; 255
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	93 07       	cpc	r25, r19
    1498:	61 f0       	breq	.+24     	; 0x14b2 <ungetc+0x2c>
    149a:	82 83       	std	Z+2, r24	; 0x02
    149c:	2f 7d       	andi	r18, 0xDF	; 223
    149e:	20 64       	ori	r18, 0x40	; 64
    14a0:	23 83       	std	Z+3, r18	; 0x03
    14a2:	26 81       	ldd	r18, Z+6	; 0x06
    14a4:	37 81       	ldd	r19, Z+7	; 0x07
    14a6:	21 50       	subi	r18, 0x01	; 1
    14a8:	31 09       	sbc	r19, r1
    14aa:	37 83       	std	Z+7, r19	; 0x07
    14ac:	26 83       	std	Z+6, r18	; 0x06
    14ae:	99 27       	eor	r25, r25
    14b0:	08 95       	ret
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	9f ef       	ldi	r25, 0xFF	; 255
    14b6:	08 95       	ret

000014b8 <__ultoa_invert>:
    14b8:	fa 01       	movw	r30, r20
    14ba:	aa 27       	eor	r26, r26
    14bc:	28 30       	cpi	r18, 0x08	; 8
    14be:	51 f1       	breq	.+84     	; 0x1514 <__ultoa_invert+0x5c>
    14c0:	20 31       	cpi	r18, 0x10	; 16
    14c2:	81 f1       	breq	.+96     	; 0x1524 <__ultoa_invert+0x6c>
    14c4:	e8 94       	clt
    14c6:	6f 93       	push	r22
    14c8:	6e 7f       	andi	r22, 0xFE	; 254
    14ca:	6e 5f       	subi	r22, 0xFE	; 254
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	8f 4f       	sbci	r24, 0xFF	; 255
    14d0:	9f 4f       	sbci	r25, 0xFF	; 255
    14d2:	af 4f       	sbci	r26, 0xFF	; 255
    14d4:	b1 e0       	ldi	r27, 0x01	; 1
    14d6:	3e d0       	rcall	.+124    	; 0x1554 <__ultoa_invert+0x9c>
    14d8:	b4 e0       	ldi	r27, 0x04	; 4
    14da:	3c d0       	rcall	.+120    	; 0x1554 <__ultoa_invert+0x9c>
    14dc:	67 0f       	add	r22, r23
    14de:	78 1f       	adc	r23, r24
    14e0:	89 1f       	adc	r24, r25
    14e2:	9a 1f       	adc	r25, r26
    14e4:	a1 1d       	adc	r26, r1
    14e6:	68 0f       	add	r22, r24
    14e8:	79 1f       	adc	r23, r25
    14ea:	8a 1f       	adc	r24, r26
    14ec:	91 1d       	adc	r25, r1
    14ee:	a1 1d       	adc	r26, r1
    14f0:	6a 0f       	add	r22, r26
    14f2:	71 1d       	adc	r23, r1
    14f4:	81 1d       	adc	r24, r1
    14f6:	91 1d       	adc	r25, r1
    14f8:	a1 1d       	adc	r26, r1
    14fa:	20 d0       	rcall	.+64     	; 0x153c <__ultoa_invert+0x84>
    14fc:	09 f4       	brne	.+2      	; 0x1500 <__ultoa_invert+0x48>
    14fe:	68 94       	set
    1500:	3f 91       	pop	r19
    1502:	2a e0       	ldi	r18, 0x0A	; 10
    1504:	26 9f       	mul	r18, r22
    1506:	11 24       	eor	r1, r1
    1508:	30 19       	sub	r19, r0
    150a:	30 5d       	subi	r19, 0xD0	; 208
    150c:	31 93       	st	Z+, r19
    150e:	de f6       	brtc	.-74     	; 0x14c6 <__ultoa_invert+0xe>
    1510:	cf 01       	movw	r24, r30
    1512:	08 95       	ret
    1514:	46 2f       	mov	r20, r22
    1516:	47 70       	andi	r20, 0x07	; 7
    1518:	40 5d       	subi	r20, 0xD0	; 208
    151a:	41 93       	st	Z+, r20
    151c:	b3 e0       	ldi	r27, 0x03	; 3
    151e:	0f d0       	rcall	.+30     	; 0x153e <__ultoa_invert+0x86>
    1520:	c9 f7       	brne	.-14     	; 0x1514 <__ultoa_invert+0x5c>
    1522:	f6 cf       	rjmp	.-20     	; 0x1510 <__ultoa_invert+0x58>
    1524:	46 2f       	mov	r20, r22
    1526:	4f 70       	andi	r20, 0x0F	; 15
    1528:	40 5d       	subi	r20, 0xD0	; 208
    152a:	4a 33       	cpi	r20, 0x3A	; 58
    152c:	18 f0       	brcs	.+6      	; 0x1534 <__ultoa_invert+0x7c>
    152e:	49 5d       	subi	r20, 0xD9	; 217
    1530:	31 fd       	sbrc	r19, 1
    1532:	40 52       	subi	r20, 0x20	; 32
    1534:	41 93       	st	Z+, r20
    1536:	02 d0       	rcall	.+4      	; 0x153c <__ultoa_invert+0x84>
    1538:	a9 f7       	brne	.-22     	; 0x1524 <__ultoa_invert+0x6c>
    153a:	ea cf       	rjmp	.-44     	; 0x1510 <__ultoa_invert+0x58>
    153c:	b4 e0       	ldi	r27, 0x04	; 4
    153e:	a6 95       	lsr	r26
    1540:	97 95       	ror	r25
    1542:	87 95       	ror	r24
    1544:	77 95       	ror	r23
    1546:	67 95       	ror	r22
    1548:	ba 95       	dec	r27
    154a:	c9 f7       	brne	.-14     	; 0x153e <__ultoa_invert+0x86>
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	61 05       	cpc	r22, r1
    1550:	71 05       	cpc	r23, r1
    1552:	08 95       	ret
    1554:	9b 01       	movw	r18, r22
    1556:	ac 01       	movw	r20, r24
    1558:	0a 2e       	mov	r0, r26
    155a:	06 94       	lsr	r0
    155c:	57 95       	ror	r21
    155e:	47 95       	ror	r20
    1560:	37 95       	ror	r19
    1562:	27 95       	ror	r18
    1564:	ba 95       	dec	r27
    1566:	c9 f7       	brne	.-14     	; 0x155a <__ultoa_invert+0xa2>
    1568:	62 0f       	add	r22, r18
    156a:	73 1f       	adc	r23, r19
    156c:	84 1f       	adc	r24, r20
    156e:	95 1f       	adc	r25, r21
    1570:	a0 1d       	adc	r26, r0
    1572:	08 95       	ret

00001574 <__ctype_isfalse>:
    1574:	99 27       	eor	r25, r25
    1576:	88 27       	eor	r24, r24

00001578 <__ctype_istrue>:
    1578:	08 95       	ret

0000157a <__prologue_saves__>:
    157a:	2f 92       	push	r2
    157c:	3f 92       	push	r3
    157e:	4f 92       	push	r4
    1580:	5f 92       	push	r5
    1582:	6f 92       	push	r6
    1584:	7f 92       	push	r7
    1586:	8f 92       	push	r8
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	ca 1b       	sub	r28, r26
    15a4:	db 0b       	sbc	r29, r27
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	09 94       	ijmp

000015b2 <__epilogue_restores__>:
    15b2:	2a 88       	ldd	r2, Y+18	; 0x12
    15b4:	39 88       	ldd	r3, Y+17	; 0x11
    15b6:	48 88       	ldd	r4, Y+16	; 0x10
    15b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    15ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    15bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    15be:	8c 84       	ldd	r8, Y+12	; 0x0c
    15c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    15c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    15c4:	b9 84       	ldd	r11, Y+9	; 0x09
    15c6:	c8 84       	ldd	r12, Y+8	; 0x08
    15c8:	df 80       	ldd	r13, Y+7	; 0x07
    15ca:	ee 80       	ldd	r14, Y+6	; 0x06
    15cc:	fd 80       	ldd	r15, Y+5	; 0x05
    15ce:	0c 81       	ldd	r16, Y+4	; 0x04
    15d0:	1b 81       	ldd	r17, Y+3	; 0x03
    15d2:	aa 81       	ldd	r26, Y+2	; 0x02
    15d4:	b9 81       	ldd	r27, Y+1	; 0x01
    15d6:	ce 0f       	add	r28, r30
    15d8:	d1 1d       	adc	r29, r1
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	ed 01       	movw	r28, r26
    15e6:	08 95       	ret

000015e8 <_exit>:
    15e8:	f8 94       	cli

000015ea <__stop_program>:
    15ea:	ff cf       	rjmp	.-2      	; 0x15ea <__stop_program>
